 AS V1.42 Beta [Bld 227] - Source File add_EMUBASIC.ASM - Page 1 - 11/29/2022 11:11:34


       1/       0 :                     	page	0
       2/       0 :                     	cpu	z80
       3/       0 :                     ;	EMUBASIC based on GRANT's BASIC
       4/       0 :                     ;	TARGET: EMUZ80
       5/       0 :                     ;	ASSEMBLER: ARCPIT XZ80.EXE
       6/       0 :                     ;
       7/       0 :                     ;	START UP ROUTINE
       8/       0 :                     ;	VERSION 1.0, 2022/02/15
       9/       0 :                     ;	WRITTEN by TETSUYA SUZUKI
      10/       0 :                     ;	Modified Akihito Honda
      11/       0 :                     ;
      12/       0 :                     
      13/       0 :                     ;	MEMORY ASIGN
      14/       0 : =2F00H               ROMTOP	EQU	2F00H		; 0000H - 2EFFH for unimon
      15/       0 : =8000H               RAMTOP	EQU	08000H
      16/       0 : =4000H               RAMSIZ	EQU	4000H
      17/       0 : =0BFFFH              RAM_E	equ	RAMTOP + RAMSIZ - 1	; RAM END address
      18/       0 :                     
      19/       0 : =100H                WORK_SIZE	equ	256		;monitor work area size
      20/       0 : =40H                 MSTACK_SIZE	equ	64
      21/       0 :                     
      22/       0 : =0BF00H              WORK_B	equ	RAM_E -	WORK_SIZE + 1	; work area BF00-BFFF
      23/       0 : =0BEC0H              STACKU	equ	WORK_B - MSTACK_SIZE	; user stack
      24/       0 :                     
      25/    2F00 :                     	ORG	ROMTOP
      26/    2F00 :                     
      27/    2F00 : C3 06 2F            	JP	STARTB		; Jump for cold start
      28/    2F03 : C3 6B 2F            	JP	WARMST		; Jump for warm start
      29/    2F06 :                     
      30/    2F06 :                     ;
      31/    2F06 :                     ;==================================================================================
      32/    2F06 :                     ; The updates to the original BASIC within this file are copyright Grant Searle
      33/    2F06 :                     ;
      34/    2F06 :                     ; You have permission to use this for NON COMMERCIAL USE ONLY
      35/    2F06 :                     ; If you wish to use it elsewhere, please include an acknowledgement to myself.
      36/    2F06 :                     ;
      37/    2F06 :                     ; http://searle.hostei.com/grant/index.html
      38/    2F06 :                     ;
      39/    2F06 :                     ; eMail: home.micros01@btinternet.com
      40/    2F06 :                     ;
      41/    2F06 :                     ; If the above don't work, please perform an Internet search to see if I have
      42/    2F06 :                     ; updated the web page hosting service.
      43/    2F06 :                     ;
      44/    2F06 :                     ;==================================================================================
      45/    2F06 :                     ;
      46/    2F06 :                     ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
      47/    2F06 :                     ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
      48/    2F06 :                     ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
      49/    2F06 :                     ; Adapted for the freeware Zilog Macro Assembler 2.10 to produce
      50/    2F06 :                     ; the original ROM code (checksum A934H). PA
      51/    2F06 :                     ;
      52/    2F06 :                     ; GENERAL EQUATES
      53/    2F06 :                     ;
      54/    2F06 : =3H                  CTRLC	EQU	03H		; Control "C"
      55/    2F06 : =7H                  CTRLG	EQU	07H		; Control "G"
      56/    2F06 : =8H                  BKSP	EQU	08H		; Back space
      57/    2F06 : =0AH                 LF	EQU	0AH		; Line feed
      58/    2F06 : =0CH                 CS	EQU	0CH		; Clear screen
      59/    2F06 : =0DH                 CR	EQU	0DH		; Carriage return
      60/    2F06 : =0FH                 CTRLO	EQU	0FH		; Control "O"
      61/    2F06 : =11H                 CTRLQ	EQU	11H		; Control "Q"
      62/    2F06 : =12H                 CTRLR	EQU	12H		; Control "R"
      63/    2F06 : =13H                 CTRLS	EQU	13H		; Control "S"
      64/    2F06 : =15H                 CTRLU	EQU	15H		; Control "U"
      65/    2F06 : =1BH                 ESC	EQU	1BH		; Escape
      66/    2F06 : =7FH                 DEL	EQU	7FH		; Delete
      67/    2F06 :                     ;
      68/    2F06 :                     ; BASIC WORK SPACE LOCATIONS
      69/    2F06 :                     ;
      70/    2F06 : =8045H               WRKSPC	EQU	RAMTOP + 45H	; BASIC Work space
      71/    2F06 : =8048H               USR	EQU	WRKSPC+3H	; "USR (x)" jump
      72/    2F06 : =804BH               OUTSUB	EQU	WRKSPC+6H	; "OUT p,n"
      73/    2F06 : =804CH               OTPORT	EQU	WRKSPC+7H	; Port (p)
      74/    2F06 : =804EH               DIVSUP	EQU	WRKSPC+9H	; Division support routine
      75/    2F06 : =804FH               DIV1	EQU	WRKSPC+0AH	; <- Values
      76/    2F06 : =8053H               DIV2	EQU	WRKSPC+0EH	; <- to
      77/    2F06 : =8057H               DIV3	EQU	WRKSPC+12H	; <- be
      78/    2F06 : =805AH               DIV4	EQU	WRKSPC+15H	; <- inserted
      79/    2F06 : =805CH               SEED	EQU	WRKSPC+17H	; Random number seed
      80/    2F06 : =807FH               LSTRND	EQU	WRKSPC+3AH	; Last random number
      81/    2F06 : =8083H               INPSUB	EQU	WRKSPC+3EH	; #INP (x)" Routine
      82/    2F06 : =8084H               INPORT	EQU	WRKSPC+3FH	; PORT (x)
      83/    2F06 : =8086H               NULLS	EQU	WRKSPC+41H	; Number of nulls
      84/    2F06 : =8087H               LWIDTH	EQU	WRKSPC+42H	; Terminal width
      85/    2F06 : =8088H               COMMAN	EQU	WRKSPC+43H	; Width for commas
      86/    2F06 : =8089H               NULFLG	EQU	WRKSPC+44H	; Null after input byte flag
      87/    2F06 : =808AH               CTLOFG	EQU	WRKSPC+45H	; Control "O" flag
      88/    2F06 : =808BH               LINESC	EQU	WRKSPC+46H	; Lines counter
      89/    2F06 : =808DH               LINESN	EQU	WRKSPC+48H	; Lines number
      90/    2F06 : =808FH               CHKSUM	EQU	WRKSPC+4AH	; Array load/save check sum
      91/    2F06 : =8091H               NMIFLG	EQU	WRKSPC+4CH	; Flag for NMI break routine
      92/    2F06 : =8092H               BRKFLG	EQU	WRKSPC+4DH	; Break flag
      93/    2F06 : =8093H               RINPUT	EQU	WRKSPC+4EH	; Input reflection
      94/    2F06 : =8096H               POINT	EQU	WRKSPC+51H	; "POINT" reflection (unused)
      95/    2F06 : =8099H               PSET	EQU	WRKSPC+54H	; "SET"	reflection
      96/    2F06 : =809CH               RESET	EQU	WRKSPC+57H	; "RESET" reflection
      97/    2F06 : =809FH               STRSPC	EQU	WRKSPC+5AH	; Bottom of string space
      98/    2F06 : =80A1H               LINEAT	EQU	WRKSPC+5CH	; Current line number
      99/    2F06 : =80A3H               BASTXT	EQU	WRKSPC+5EH	; Pointer to start of program
     100/    2F06 : =80A6H               BUFFER	EQU	WRKSPC+61H	; Input buffer
     101/    2F06 : =80ABH               STACK	EQU	WRKSPC+66H	; Initial stack
     102/    2F06 : =80F0H               CURPOS	EQU	WRKSPC+0ABH	; Character position on line
     103/    2F06 : =80F1H               LCRFLG	EQU	WRKSPC+0ACH	; Locate/Create flag
     104/    2F06 : =80F2H               TYPE	EQU	WRKSPC+0ADH	; Data type flag
     105/    2F06 : =80F3H               DATFLG	EQU	WRKSPC+0AEH	; Literal statement flag
     106/    2F06 : =80F4H               LSTRAM	EQU	WRKSPC+0AFH	; Last available RAM
     107/    2F06 : =80F6H               TMSTPT	EQU	WRKSPC+0B1H	; Temporary string pointer
     108/    2F06 : =80F8H               TMSTPL	EQU	WRKSPC+0B3H	; Temporary string pool
     109/    2F06 : =8104H               TMPSTR	EQU	WRKSPC+0BFH	; Temporary string
     110/    2F06 : =8108H               STRBOT	EQU	WRKSPC+0C3H	; Bottom of string space
     111/    2F06 : =810AH               CUROPR	EQU	WRKSPC+0C5H	; Current operator in EVAL
     112/    2F06 : =810CH               LOOPST	EQU	WRKSPC+0C7H	; First statement of loop
     113/    2F06 : =810EH               DATLIN	EQU	WRKSPC+0C9H	; Line of current DATA item
     114/    2F06 : =8110H               FORFLG	EQU	WRKSPC+0CBH	; "FOR" loop flag
     115/    2F06 : =8111H               LSTBIN	EQU	WRKSPC+0CCH	; Last byte entered
     116/    2F06 : =8112H               READFG	EQU	WRKSPC+0CDH	; Read/Input flag
     117/    2F06 : =8113H               BRKLIN	EQU	WRKSPC+0CEH	; Line of break
     118/    2F06 : =8115H               NXTOPR	EQU	WRKSPC+0D0H	; Next operator in EVAL
     119/    2F06 : =8117H               ERRLIN	EQU	WRKSPC+0D2H	; Line of error
     120/    2F06 : =8119H               CONTAD	EQU	WRKSPC+0D4H	; Where to CONTinue
     121/    2F06 : =811BH               PROGND	EQU	WRKSPC+0D6H	; End of program
     122/    2F06 : =811DH               VAREND	EQU	WRKSPC+0D8H	; End of variables
     123/    2F06 : =811FH               ARREND	EQU	WRKSPC+0DAH	; End of arrays
     124/    2F06 : =8121H               NXTDAT	EQU	WRKSPC+0DCH	; Next data item
     125/    2F06 : =8123H               FNRGNM	EQU	WRKSPC+0DEH	; Name of FN argument
     126/    2F06 : =8125H               FNARG	EQU	WRKSPC+0E0H	; FN argument value
     127/    2F06 : =8129H               FPREG	EQU	WRKSPC+0E4H	; Floating point register
     128/    2F06 : =812CH               FPEXP	EQU	FPREG+3		; Floating point exponent
     129/    2F06 : =812DH               SGNRES	EQU	WRKSPC+0E8H	; Sign of result
     130/    2F06 : =812EH               PBUFF	EQU	WRKSPC+0E9H	; Number print buffer
     131/    2F06 : =813BH               MULVAL	EQU	WRKSPC+0F6H	; Multiplier
     132/    2F06 : =813EH               PROGST	EQU	WRKSPC+0F9H	; Start of program text area
     133/    2F06 : =81A2H               STLOOK	EQU	WRKSPC+15DH	; Start of memory test
     134/    2F06 :                     ;
     135/    2F06 :                     ; BASIC ERROR CODE VALUES
     136/    2F06 :                     ;
     137/    2F06 : =0H                  NF	EQU	00H		; NEXT without FOR
     138/    2F06 : =2H                  SN	EQU	02H		; Syntax error
     139/    2F06 : =4H                  RG	EQU	04H		; RETURN without GOSUB
     140/    2F06 : =6H                  OD	EQU	06H		; Out of DATA
     141/    2F06 : =8H                  FC	EQU	08H		; Function call error
     142/    2F06 : =0AH                 OV	EQU	0AH		; Overflow
     143/    2F06 : =0CH                 OM	EQU	0CH		; Out of memory
     144/    2F06 : =0EH                 UL	EQU	0EH		; Undefined line number
     145/    2F06 : =10H                 BS	EQU	10H		; Bad subscript
     146/    2F06 : =12H                 RD	EQU	12H		; Re-DIMensioned array
     147/    2F06 : =14H                 DZ	EQU	14H		; Division by zero (/0)
     148/    2F06 : =16H                 ID	EQU	16H		; Illegal direct
     149/    2F06 : =18H                 TM	EQU	18H		; Type miss-match
     150/    2F06 : =1AH                 OS	EQU	1AH		; Out of string space
     151/    2F06 : =1CH                 LS	EQU	1CH		; String too long
     152/    2F06 : =1EH                 ST	EQU	1EH		; String formula too complex
     153/    2F06 : =20H                 CN	EQU	20H		; Can't CONTinue
     154/    2F06 : =22H                 UF	EQU	22H		; UnDEFined FN function
     155/    2F06 : =24H                 MO	EQU	24H		; Missing operand
     156/    2F06 : =26H                 HX	EQU	26H		; HEX error
     157/    2F06 : =28H                 BN	EQU	28H		; BIN error
     158/    2F06 :                     ;
     159/    2F06 : C3 0D 2F            STARTB: JP	CSTART		; Jump to initialise
     160/    2F09 :                     ;
     161/    2F09 : AC 37               	DW	DEINT		; Get integer -32768 to 32767
     162/    2F0B : 22 3F               	DW	ABPASS		; Return integer in AB
     163/    2F0D :                     ;
     164/    2F0D : 21 45 80            CSTART: LD	HL,WRKSPC	; Start of workspace RAM
     165/    2F10 : F9                  	LD	SP,HL		; Set up a temporary stack
     166/    2F11 : C3 37 4B            	JP	INITST		; Go to initialise
     167/    2F14 :                     ;
     168/    2F14 : 11 D5 31            INIT:	LD	DE,INITAB	; Initialise workspace
     169/    2F17 : 06 63               	LD	B,INITBE-INITAB+3; Bytes to copy
     170/    2F19 : 21 45 80            	LD	HL,WRKSPC	; Into workspace RAM
     171/    2F1C : 1A                  COPY:	LD	A,(DE)		; Get source
     172/    2F1D : 77                  	LD	(HL),A		; To destination
     173/    2F1E : 23                  	INC	HL		; Next destination
     174/    2F1F : 13                  	INC	DE		; Next source
     175/    2F20 : 05                  	DEC	B		; Count bytes
     176/    2F21 : C2 1C 2F            	JP	NZ,COPY		; More to move
     177/    2F24 : F9                  	LD	SP,HL		; Temporary stack
     178/    2F25 : CD D6 33            	CALL	CLREG		; Clear registers and stack
     179/    2F28 : CD A2 39            	CALL	PRCRLF		; Output CRLF
     180/    2F2B : 32 EF 80            	LD	(BUFFER+72+1),A	; Mark end of buffer
     181/    2F2E : 32 3E 81            	LD	(PROGST),A	; Initialise program area
     182/    2F31 :                     ;MSIZE:	LD	HL,STLOOK	; Point to start of RAM
     183/    2F31 :                     ;MLOOP:	INC	HL		; Next byte
     184/    2F31 :                     ;	LD	A,H		; Above address FFFF ?
     185/    2F31 :                     ;	OR	L
     186/    2F31 :                     ;	JP	Z,SETTOP	; Yes - 64K RAM
     187/    2F31 :                     ;	LD	A,(HL)		; Get contents
     188/    2F31 :                     ;	LD	B,A		; Save it
     189/    2F31 :                     ;	CPL			; Flip all bits
     190/    2F31 :                     ;	LD	(HL),A		; Put it back
     191/    2F31 :                     ;	CP	(HL)		; RAM there if same
     192/    2F31 :                     ;	LD	(HL),B		; Restore old contents
     193/    2F31 :                     ;	JP	Z,MLOOP		; If RAM - test next byte
     194/    2F31 :                     ;
     195/    2F31 :                     ;SETTOP: DEC	HL		; Back one byte
     196/    2F31 :                     
     197/    2F31 : 21 C0 BE            	ld	hl, STACKU	; set RAM end
     198/    2F34 :                     
     199/    2F34 : 11 A1 81            	LD	DE,STLOOK-1	; See if enough RAM
     200/    2F37 : CD 6C 35            	CALL	CPDEHL		; Compare DE with HL
     201/    2F3A : DA 74 2F            	JP	C,NEMEM		; If not enough RAM
     202/    2F3D : 11 CE FF            	LD	DE,0-50		; 50 Bytes string space
     203/    2F40 : 22 F4 80            	LD	(LSTRAM),HL	; Save last available RAM
     204/    2F43 : 19                  	ADD	HL,DE		; Allocate string space
     205/    2F44 : 22 9F 80            	LD	(STRSPC),HL	; Save string space
     206/    2F47 : CD B1 33            	CALL	CLRPTR		; Clear program area
     207/    2F4A : 2A 9F 80            	LD	HL,(STRSPC)	; Get end of memory
     208/    2F4D : 11 EF FF            	LD	DE,0-17		; Offset for free bytes
     209/    2F50 : 19                  	ADD	HL,DE		; Adjust HL
     210/    2F51 : 11 3E 81            	LD	DE,PROGST	; Start of program text
     211/    2F54 : 7D                  	LD	A,L		; Get LSB
     212/    2F55 : 93                  	SUB	E		; Adjust it
     213/    2F56 : 6F                  	LD	L,A		; Re-save
     214/    2F57 : 7C                  	LD	A,H		; Get MSB
     215/    2F58 : 9A                  	SBC	A,D		; Adjust it
     216/    2F59 : 67                  	LD	H,A		; Re-save
     217/    2F5A : E5                  	PUSH	HL		; Save bytes free
     218/    2F5B : 21 8C 2F            	LD	HL,SIGNON	; Sign-on message
     219/    2F5E : CD 40 40            	CALL	PRS		; Output string
     220/    2F61 : E1                  	POP	HL		; Get bytes free back
     221/    2F62 : CD E3 46            	CALL	PRNTHL		; Output amount of free memory
     222/    2F65 : 21 7D 2F            	LD	HL,BFREE	; " Bytes free" message
     223/    2F68 : CD 40 40            	CALL	PRS		; Output string
     224/    2F6B :                     ;
     225/    2F6B : 31 AB 80            WARMST: LD	SP,STACK	; Temporary stack
     226/    2F6E : CD D6 33            BRKRET: CALL	CLREG		; Clear registers and stack
     227/    2F71 : C3 EF 32            	JP	PRNTOK		; Go to get command line
     228/    2F74 :                     ;
     229/    2F74 : 21 C3 2F            NEMEM:	LD	HL,MEMMSG	; Memory size not enough
     230/    2F77 : CD 40 40            	CALL	PRS		; Print it
     231/    2F7A : C3 7A 2F            XXXXX:	JP	XXXXX		; Stop
     232/    2F7D :                     ;
     233/    2F7D : 20 42 79 74 65 73   BFREE:	DB	" Bytes free",CR,LF,0,0
             2F83 : 20 66 72 65 65 0D 
             2F89 : 0A 00 00          
     234/    2F8C :                     ;
     235/    2F8C : 5A 38 30 20 42 41   SIGNON: DB	"Z80 BASIC Ver 4.7b",CR,LF
             2F92 : 53 49 43 20 56 65 
             2F98 : 72 20 34 2E 37 62 
             2F9E : 0D 0A             
     236/    2FA0 : 43 6F 70 79 72 69   	DB	"Copyright ",40,"C",41
             2FA6 : 67 68 74 20 28 43 
             2FAC : 29                
     237/    2FAD : 20 31 39 37 38 20   	DB	" 1978 by Microsoft",CR,LF,0,0
             2FB3 : 62 79 20 4D 69 63 
             2FB9 : 72 6F 73 6F 66 74 
             2FBF : 0D 0A 00 00       
     238/    2FC3 :                     ;
     239/    2FC3 : 4D 65 6D 6F 72 79   MEMMSG: DB	"Memory size not enough",CR,LF
             2FC9 : 20 73 69 7A 65 20 
             2FCF : 6E 6F 74 20 65 6E 
             2FD5 : 6F 75 67 68 0D 0A 
     240/    2FDB : 54 68 65 20 73 79   	DB	"The system is stopped.",CR,LF,0,0
             2FE1 : 73 74 65 6D 20 69 
             2FE7 : 73 20 73 74 6F 70 
             2FED : 70 65 64 2E 0D 0A 
             2FF3 : 00 00             
     241/    2FF5 :                     ;
     242/    2FF5 :                     ; FUNCTION ADDRESS TABLE
     243/    2FF5 :                     ;
     244/    2FF5 : 58 45               FNCTAB: DW	SGN
     245/    2FF7 : 1C 46               	DW	INT
     246/    2FF9 : 6E 45               	DW	ABS
     247/    2FFB : 48 80               	DW	USR
     248/    2FFD : 00 3F               	DW	FRE
     249/    2FFF : 85 42               	DW	INP
     250/    3001 : 2E 3F               	DW	POS
     251/    3003 : E2 47               	DW	SQR
     252/    3005 : C1 48               	DW	RND
     253/    3007 : FD 43               	DW	LOG
     254/    3009 : 30 48               	DW	EXP
     255/    300B : 36 49               	DW	COS
     256/    300D : 3C 49               	DW	SIN
     257/    300F : 9D 49               	DW	TAN
     258/    3011 : B2 49               	DW	ATN
     259/    3013 : D9 42               	DW	PEEK
     260/    3015 : 1C 4A               	DW	DEEK
     261/    3017 : 96 80               	DW	POINT
     262/    3019 : B2 41               	DW	LEN
     263/    301B : CA 3F               	DW	STR
     264/    301D : 4C 42               	DW	VAL
     265/    301F : C1 41               	DW	ASC
     266/    3021 : D2 41               	DW	CHR
     267/    3023 : 3E 4A               	DW	HEX
     268/    3025 : D1 4A               	DW	BIN
     269/    3027 : E2 41               	DW	LEFT
     270/    3029 : 12 42               	DW	RIGHT
     271/    302B : 1C 42               	DW	MID
     272/    302D :                     ;
     273/    302D :                     ; RESERVED WORD LIST
     274/    302D :                     ;
     275/    302D : C5 4E 44            WORDS:	DB	0C5H,"ND"
     276/    3030 : C6 4F 52            	DB	0C6H,"OR"
     277/    3033 : CE 45 58 54         	DB	0CEH,"EXT"
     278/    3037 : C4 41 54 41         	DB	0C4H,"ATA"
     279/    303B : C9 4E 50 55 54      	DB	0C9H,"NPUT"
     280/    3040 : C4 49 4D            	DB	0C4H,"IM"
     281/    3043 : D2 45 41 44         	DB	0D2H,"EAD"
     282/    3047 : CC 45 54            	DB	0CCH,"ET"
     283/    304A : C7 4F 54 4F         	DB	0C7H,"OTO"
     284/    304E : D2 55 4E            	DB	0D2H,"UN"
     285/    3051 : C9 46               	DB	0C9H,"F"
     286/    3053 : D2 45 53 54 4F 52   	DB	0D2H,"ESTORE"
             3059 : 45                
     287/    305A : C7 4F 53 55 42      	DB	0C7H,"OSUB"
     288/    305F : D2 45 54 55 52 4E   	DB	0D2H,"ETURN"
     289/    3065 : D2 45 4D            	DB	0D2H,"EM"
     290/    3068 : D3 54 4F 50         	DB	0D3H,"TOP"
     291/    306C : CF 55 54            	DB	0CFH,"UT"
     292/    306F : CF 4E               	DB	0CFH,"N"
     293/    3071 : CE 55 4C 4C         	DB	0CEH,"ULL"
     294/    3075 : D7 41 49 54         	DB	0D7H,"AIT"
     295/    3079 : C4 45 46            	DB	0C4H,"EF"
     296/    307C : D0 4F 4B 45         	DB	0D0H,"OKE"
     297/    3080 : C4 4F 4B 45         	DB	0C4H,"OKE"
     298/    3084 : D3 43 52 45 45 4E   	DB	0D3H,"CREEN"
     299/    308A : CC 49 4E 45 53      	DB	0CCH,"INES"
     300/    308F : C3 4C 53            	DB	0C3H,"LS"
     301/    3092 : D7 49 44 54 48      	DB	0D7H,"IDTH"
     302/    3097 : CD 4F 4E 49 54 4F   	DB	0CDH,"ONITOR"
             309D : 52                
     303/    309E : D3 45 54            	DB	0D3H,"ET"
     304/    30A1 : D2 45 53 45 54      	DB	0D2H,"ESET"
     305/    30A6 : D0 52 49 4E 54      	DB	0D0H,"RINT"
     306/    30AB : C3 4F 4E 54         	DB	0C3H,"ONT"
     307/    30AF : CC 49 53 54         	DB	0CCH,"IST"
     308/    30B3 : C3 4C 45 41 52      	DB	0C3H,"LEAR"
     309/    30B8 : C3 4C 4F 41 44      	DB	0C3H,"LOAD"
     310/    30BD : C3 53 41 56 45      	DB	0C3H,"SAVE"
     311/    30C2 : CE 45 57            	DB	0CEH,"EW"
     312/    30C5 :                     ;
     313/    30C5 : D4 41 42 28         	DB	0D4H,"AB("
     314/    30C9 : D4 4F               	DB	0D4H,"O"
     315/    30CB : C6 4E               	DB	0C6H,"N"
     316/    30CD : D3 50 43 28         	DB	0D3H,"PC("
     317/    30D1 : D4 48 45 4E         	DB	0D4H,"HEN"
     318/    30D5 : CE 4F 54            	DB	0CEH,"OT"
     319/    30D8 : D3 54 45 50         	DB	0D3H,"TEP"
     320/    30DC :                     ;
     321/    30DC : AB                  	DB	0ABH
     322/    30DD : AD                  	DB	0ADH
     323/    30DE : AA                  	DB	0AAH
     324/    30DF : AF                  	DB	0AFH
     325/    30E0 : DE                  	DB	0DEH
     326/    30E1 : C1 4E 44            	DB	0C1H,"ND"
     327/    30E4 : CF 52               	DB	0CFH,"R"
     328/    30E6 : BE                  	DB	0BEH
     329/    30E7 : BD                  	DB	0BDH
     330/    30E8 : BC                  	DB	0BCH
     331/    30E9 :                     ;
     332/    30E9 : D3 47 4E            	DB	0D3H,"GN"
     333/    30EC : C9 4E 54            	DB	0C9H,"NT"
     334/    30EF : C1 42 53            	DB	0C1H,"BS"
     335/    30F2 : D5 53 52            	DB	0D5H,"SR"
     336/    30F5 : C6 52 45            	DB	0C6H,"RE"
     337/    30F8 : C9 4E 50            	DB	0C9H,"NP"
     338/    30FB : D0 4F 53            	DB	0D0H,"OS"
     339/    30FE : D3 51 52            	DB	0D3H,"QR"
     340/    3101 : D2 4E 44            	DB	0D2H,"ND"
     341/    3104 : CC 4F 47            	DB	0CCH,"OG"
     342/    3107 : C5 58 50            	DB	0C5H,"XP"
     343/    310A : C3 4F 53            	DB	0C3H,"OS"
     344/    310D : D3 49 4E            	DB	0D3H,"IN"
     345/    3110 : D4 41 4E            	DB	0D4H,"AN"
     346/    3113 : C1 54 4E            	DB	0C1H,"TN"
     347/    3116 : D0 45 45 4B         	DB	0D0H,"EEK"
     348/    311A : C4 45 45 4B         	DB	0C4H,"EEK"
     349/    311E : D0 4F 49 4E 54      	DB	0D0H,"OINT"
     350/    3123 : CC 45 4E            	DB	0CCH,"EN"
     351/    3126 : D3 54 52 24         	DB	0D3H,"TR$"
     352/    312A : D6 41 4C            	DB	0D6H,"AL"
     353/    312D : C1 53 43            	DB	0C1H,"SC"
     354/    3130 : C3 48 52 24         	DB	0C3H,"HR$"
     355/    3134 : C8 45 58 24         	DB	0C8H,"EX$"
     356/    3138 : C2 49 4E 24         	DB	0C2H,"IN$"
     357/    313C : CC 45 46 54 24      	DB	0CCH,"EFT$"
     358/    3141 : D2 49 47 48 54 24   	DB	0D2H,"IGHT$"
     359/    3147 : CD 49 44 24         	DB	0CDH,"ID$"
     360/    314B : 80                  	DB	80H		; End of list marker
     361/    314C :                     ;
     362/    314C :                     ; KEYWORD ADDRESS TABLE
     363/    314C :                     ;
     364/    314C : 44 37               WORDTB: DW	PEND
     365/    314E : 41 36               	DW	FOR
     366/    3150 : 1C 3B               	DW	NEXT
     367/    3152 : 91 38               	DW	DATA
     368/    3154 : 23 3A               	DW	INPUT
     369/    3156 : 58 3D               	DW	DIM
     370/    3158 : 52 3A               	DW	READ
     371/    315A : A8 38               	DW	LET
     372/    315C : 4E 38               	DW	GOTO
     373/    315E : 31 38               	DW	RUN
     374/    3160 : 20 39               	DW	IF_
     375/    3162 : 0A 37               	DW	RESTOR
     376/    3164 : 3D 38               	DW	GOSUB
     377/    3166 : 6C 38               	DW	RETURN
     378/    3168 : 93 38               	DW	REM
     379/    316A : 42 37               	DW	STOP
     380/    316C : 91 42               	DW	POUT
     381/    316E : 02 39               	DW	ON
     382/    3170 : 83 37               	DW	NULL
     383/    3172 : 97 42               	DW	WAIT
     384/    3174 : 36 3F               	DW	DEF
     385/    3176 : E0 42               	DW	POKE
     386/    3178 : 27 4A               	DW	DOKE
     387/    317A : 93 38               	DW	REM
     388/    317C : 0D 4A               	DW	LINES
     389/    317E : 01 4A               	DW	CLS
     390/    3180 : 05 4A               	DW	WIDTH
     391/    3182 : 33 4B               	DW	MONITR
     392/    3184 : 99 80               	DW	PSET
     393/    3186 : 9C 80               	DW	RESET
     394/    3188 : 44 39               	DW	PRINT
     395/    318A : 70 37               	DW	CONT
     396/    318C : B6 35               	DW	LIST
     397/    318E : EB 37               	DW	CLEAR
     398/    3190 : 93 38               	DW	REM
     399/    3192 : 93 38               	DW	REM
     400/    3194 : B0 33               	DW	NEW
     401/    3196 :                     ;
     402/    3196 :                     ; RESERVED WORD TOKEN VALUES
     403/    3196 :                     ;
     404/    3196 : =80H                 ZEND	EQU	080H		; END
     405/    3196 : =81H                 ZFOR	EQU	081H		; FOR
     406/    3196 : =83H                 ZDATA	EQU	083H		; DATA
     407/    3196 : =88H                 ZGOTO	EQU	088H		; GOTO
     408/    3196 : =8CH                 ZGOSUB	EQU	08CH		; GOSUB
     409/    3196 : =8EH                 ZREM	EQU	08EH		; REM
     410/    3196 : =9EH                 ZPRINT	EQU	09EH		; PRINT
     411/    3196 : =0A4H                ZNEW	EQU	0A4H		; NEW
     412/    3196 :                     ;
     413/    3196 : =0A5H                ZTAB	EQU	0A5H		; TAB
     414/    3196 : =0A6H                ZTO	EQU	0A6H		; TO
     415/    3196 : =0A7H                ZFN	EQU	0A7H		; FN
     416/    3196 : =0A8H                ZSPC	EQU	0A8H		; SPC
     417/    3196 : =0A9H                ZTHEN	EQU	0A9H		; THEN
     418/    3196 : =0AAH                ZNOT	EQU	0AAH		; NOT
     419/    3196 : =0ABH                ZSTEP	EQU	0ABH		; STEP
     420/    3196 :                     ;
     421/    3196 : =0ACH                ZPLUS	EQU	0ACH		; +
     422/    3196 : =0ADH                ZMINUS	EQU	0ADH		; -
     423/    3196 : =0AEH                ZTIMES	EQU	0AEH		; *
     424/    3196 : =0AFH                ZDIV	EQU	0AFH		; /
     425/    3196 : =0B2H                ZOR	EQU	0B2H		; OR
     426/    3196 : =0B3H                ZGTR	EQU	0B3H		; >
     427/    3196 : =0B4H                ZEQUAL	EQU	0B4H		; M
     428/    3196 : =0B5H                ZLTH	EQU	0B5H		; <
     429/    3196 : =0B6H                ZSGN	EQU	0B6H		; SGN
     430/    3196 : =0C7H                ZPOINT	EQU	0C7H		; POINT
     431/    3196 : =0CFH                ZLEFT	EQU	0CDH +2		; LEFT$
     432/    3196 :                     ;
     433/    3196 :                     ; ARITHMETIC PRECEDENCE TABLE
     434/    3196 :                     ;
     435/    3196 : 79                  PRITAB: DB	79H		; Precedence value
     436/    3197 : CA 46               	DW	PADD		; FPREG = <last> + FPREG
     437/    3199 :                     ;
     438/    3199 : 79                  	DB	79H		; Precedence value
     439/    319A : FE 42               	DW	PSUB		; FPREG = <last> - FPREG
     440/    319C :                     ;
     441/    319C : 7C                  	DB	7CH		; Precedence value
     442/    319D : 3C 44               	DW	MULT		; PPREG = <last> * FPREG
     443/    319F :                     ;
     444/    319F : 7C                  	DB	7CH		; Precedence value
     445/    31A0 : 9D 44               	DW	DIV		; FPREG = <last> / FPREG
     446/    31A2 :                     ;
     447/    31A2 : 7F                  	DB	7FH		; Precedence value
     448/    31A3 : EB 47               	DW	POWER		; FPREG = <last> ^ FPREG
     449/    31A5 :                     ;
     450/    31A5 : 50                  	DB	50H		; Precedence value
     451/    31A6 : B1 3C               	DW	PAND		; FPREG = <last> AND FPREG
     452/    31A8 :                     ;
     453/    31A8 : 46                  	DB	46H		; Precedence value
     454/    31A9 : B0 3C               	DW	POR		; FPREG = <last> OR FPREG
     455/    31AB :                     ;
     456/    31AB :                     ; BASIC ERROR CODE LIST
     457/    31AB :                     ;
     458/    31AB : 4E 46               ERRORS: DB	"NF"		; NEXT without FOR
     459/    31AD : 53 4E               	DB	"SN"		; Syntax error
     460/    31AF : 52 47               	DB	"RG"		; RETURN without GOSUB
     461/    31B1 : 4F 44               	DB	"OD"		; Out of DATA
     462/    31B3 : 46 43               	DB	"FC"		; Illegal function call
     463/    31B5 : 4F 56               	DB	"OV"		; Overflow error
     464/    31B7 : 4F 4D               	DB	"OM"		; Out of memory
     465/    31B9 : 55 4C               	DB	"UL"		; Undefined line
     466/    31BB : 42 53               	DB	"BS"		; Bad subscript
     467/    31BD : 44 44               	DB	"DD"		; Re-DIMensioned array
     468/    31BF : 2F 30               	DB	"/0"		; Division by zero
     469/    31C1 : 49 44               	DB	"ID"		; Illegal direct
     470/    31C3 : 54 4D               	DB	"TM"		; Type mis-match
     471/    31C5 : 4F 53               	DB	"OS"		; Out of string space
     472/    31C7 : 4C 53               	DB	"LS"		; String too long
     473/    31C9 : 53 54               	DB	"ST"		; String formula too complex
     474/    31CB : 43 4E               	DB	"CN"		; Can't CONTinue
     475/    31CD : 55 46               	DB	"UF"		; Undefined FN function
     476/    31CF : 4D 4F               	DB	"MO"		; Missing operand
     477/    31D1 : 48 58               	DB	"HX"		; HEX error
     478/    31D3 : 42 4E               	DB	"BN"		; BIN error
     479/    31D5 :                     ;
     480/    31D5 :                     ; INITIALISATION TABLE -------------------------------------------------------
     481/    31D5 :                     ;
     482/    31D5 : C3 6B 2F            INITAB: JP	WARMST		; Warm start jump
     483/    31D8 : C3 C1 37            	JP	FCERR		; "USR (X)" jump (Set to Error)
     484/    31DB : D3 00               	OUT	(0),A		; "OUT p,n" skeleton
     485/    31DD : C9                  	RET
     486/    31DE : D6 00               	SUB	0		; Division support routine
     487/    31E0 : 6F                  	LD	L,A
     488/    31E1 : 7C                  	LD	A,H
     489/    31E2 : DE 00               	SBC	A,0
     490/    31E4 : 67                  	LD	H,A
     491/    31E5 : 78                  	LD	A,B
     492/    31E6 : DE 00               	SBC	A,0
     493/    31E8 : 47                  	LD	B,A
     494/    31E9 : 3E 00               	LD	A,0
     495/    31EB : C9                  	RET
     496/    31EC : 00 00 00            	DB	0,0,0			; Random number seed table used by RND
     497/    31EF : 35 4A CA 99         	DB	035H,04AH,0CAH,099H	;-2.65145E+07
     498/    31F3 : 39 1C 76 98         	DB	039H,01CH,076H,098H	; 1.61291E+07
     499/    31F7 : 22 95 B3 98         	DB	022H,095H,0B3H,098H	;-1.17691E+07
     500/    31FB : 0A DD 47 98         	DB	00AH,0DDH,047H,098H	; 1.30983E+07
     501/    31FF : 53 D1 99 99         	DB	053H,0D1H,099H,099H	;-2-01612E+07
     502/    3203 : 0A 1A 9F 98         	DB	00AH,01AH,09FH,098H	;-1.04269E+07
     503/    3207 : 65 BC CD 98         	DB	065H,0BCH,0CDH,098H	;-1.34831E+07
     504/    320B : D6 77 3E 98         	DB	0D6H,077H,03EH,098H	; 1.24825E+07
     505/    320F : 52 C7 4F 80         	DB	052H,0C7H,04FH,080H	; Last random number
     506/    3213 : DB 00               	IN	A,(0)		; INP (x) skeleton
     507/    3215 : C9                  	RET
     508/    3216 : 01                  	DB	1		; POS (x) number (1)
     509/    3217 : FF                  	DB	255		; Terminal width (255 = no auto CRLF)
     510/    3218 : 1C                  	DB	28		; Width for commas (3 columns)
     511/    3219 : 00                  	DB	0		; No nulls after input bytes
     512/    321A : 00                  	DB	0		; Output enabled (^O off)
     513/    321B : 14 00               	DW	20		; Initial lines counter
     514/    321D : 14 00               	DW	20		; Initial lines number
     515/    321F : 00 00               	DW	0		; Array load/save check sum
     516/    3221 : 00                  	DB	0		; Break not by NMI
     517/    3222 : 00                  	DB	0		; Break flag
     518/    3223 : C3 E9 34            	JP	TTYLIN		; Input reflection (set to TTY)
     519/    3226 : C3 00 00            	JP	0000H		; POINT reflection unused
     520/    3229 : C3 00 00            	JP	0000H		; SET reflection
     521/    322C : C3 00 00            	JP	0000H			; RESET reflection
     522/    322F : A2 81               	DW	STLOOK		; Temp string space
     523/    3231 : FE FF               	DW	-2		; Current line number (cold)
     524/    3233 : 3F 81               	DW	PROGST+1	; Start of program text
     525/    3235 :                     INITBE:			 
     526/    3235 :                     ;
     527/    3235 :                     ; END OF INITIALISATION TABLE ---------------------------------------------------
     528/    3235 :                     ;
     529/    3235 : 20 45 72 72 6F 72   ERRMSG: DB	" Error",0
             323B : 00                
     530/    323C : 20 69 6E 20 00      INMSG:	DB	" in ",0
     531/    3241 : =3240H               ZERBYT	EQU	$-1		; A zero byte
     532/    3241 : 4F 6B 0D 0A 00 00   OKMSG:	DB	"Ok",CR,LF,0,0
     533/    3247 : 42 72 65 61 6B 00   BRKMSG: DB	"Break",0
     534/    324D :                     ;
     535/    324D : 21 04 00            BAKSTK: LD	HL,4		; Look for "FOR" block with
     536/    3250 : 39                  	ADD	HL,SP		; same index as specified
     537/    3251 : 7E                  LOKFOR: LD	A,(HL)		; Get block ID
     538/    3252 : 23                  	INC	HL		; Point to index address
     539/    3253 : FE 81               	CP	ZFOR		; Is it a "FOR" token
     540/    3255 : C0                  	RET	NZ		; No - exit
     541/    3256 : 4E                  	LD	C,(HL)		; BC = Address of "FOR" index
     542/    3257 : 23                  	INC	HL
     543/    3258 : 46                  	LD	B,(HL)
     544/    3259 : 23                  	INC	HL		; Point to sign of STEP
     545/    325A : E5                  	PUSH	HL		; Save pointer to sign
     546/    325B : 69                  	LD	L,C		; HL = address of "FOR" index
     547/    325C : 60                  	LD	H,B
     548/    325D : 7A                  	LD	A,D		; See if an index was specified
     549/    325E : B3                  	OR	E		; DE = 0 if no index specified
     550/    325F : EB                  	EX	DE,HL		; Specified index into HL
     551/    3260 : CA 67 32            	JP	Z,INDFND	; Skip if no index given
     552/    3263 : EB                  	EX	DE,HL		; Index back into DE
     553/    3264 : CD 6C 35            	CALL	CPDEHL		; Compare index with one given
     554/    3267 : 01 0D 00            INDFND: LD	BC,16-3		; Offset to next block
     555/    326A : E1                  	POP	HL		; Restore pointer to sign
     556/    326B : C8                  	RET	Z		; Return if block found
     557/    326C : 09                  	ADD	HL,BC		; Point to next block
     558/    326D : C3 51 32            	JP	LOKFOR		; Keep on looking
     559/    3270 :                     ;
     560/    3270 : CD 8A 32            MOVUP:	CALL	ENFMEM		; See if enough memory
     561/    3273 : C5                  MOVSTR: PUSH	BC		; Save end of source
     562/    3274 : E3                  	EX	(SP),HL		; Swap source and dest" end
     563/    3275 : C1                  	POP	BC		; Get end of destination
     564/    3276 : CD 6C 35            MOVLP:	CALL	CPDEHL		; See if list moved
     565/    3279 : 7E                  	LD	A,(HL)		; Get byte
     566/    327A : 02                  	LD	(BC),A		; Move it
     567/    327B : C8                  	RET	Z		; Exit if all done
     568/    327C : 0B                  	DEC	BC		; Next byte to move to
     569/    327D : 2B                  	DEC	HL		; Next byte to move
     570/    327E : C3 76 32            	JP	MOVLP		; Loop until all bytes moved
     571/    3281 :                     ;
     572/    3281 : E5                  CHKSTK: PUSH	HL		; Save code string address
     573/    3282 : 2A 1F 81            	LD	HL,(ARREND)	; Lowest free memory
     574/    3285 : 06 00               	LD	B,0		; BC = Number of levels to test
     575/    3287 : 09                  	ADD	HL,BC		; 2 Bytes for each level
     576/    3288 : 09                  	ADD	HL,BC
     577/    3289 : 3E                  	DB	3EH		; Skip "PUSH HL"
     578/    328A : E5                  ENFMEM: PUSH	HL		; Save code string address
     579/    328B : 3E D0               	LD	A,0D0H		; LOW -48; 48 Bytes minimum RAM
     580/    328D : 95                  	SUB	L
     581/    328E : 6F                  	LD	L,A
     582/    328F : 3E FF               	LD	A,0FFH		; HIGH (-48); 48 Bytes minimum RAM
     583/    3291 : 9C                  	SBC	A,H
     584/    3292 : DA 99 32            	JP	C,OMERR		; Not enough - ?OM Error
     585/    3295 : 67                  	LD	H,A
     586/    3296 : 39                  	ADD	HL,SP		; Test if stack is overflowed
     587/    3297 : E1                  	POP	HL		; Restore code string address
     588/    3298 : D8                  	RET	C		; Return if enough mmory
     589/    3299 : 1E 0C               OMERR:	LD	E,OM		; ?OM Error
     590/    329B : C3 B8 32            	JP	ERROR_
     591/    329E :                     ;
     592/    329E : 2A 0E 81            DATSNR: LD	HL,(DATLIN)	; Get line of current DATA item
     593/    32A1 : 22 A1 80            	LD	(LINEAT),HL	; Save as current line
     594/    32A4 : 1E 02               SNERR:	LD	E,SN		; ?SN Error
     595/    32A6 : 01                  	DB	01H		; Skip "LD E,DZ"
     596/    32A7 : 1E 14               DZERR:	LD	E,DZ		; ?/0 Error
     597/    32A9 : 01                  	DB	01H		; Skip "LD E,NF"
     598/    32AA : 1E 00               NFERR:	LD	E,NF		; ?NF Error
     599/    32AC : 01                  	DB	01H		; Skip "LD E,RD"
     600/    32AD : 1E 12               DDERR:	LD	E,RD		; ?DD Error
     601/    32AF : 01                  	DB	01H		; Skip "LD E,UF"
     602/    32B0 : 1E 22               UFERR:	LD	E,UF		; ?UF Error
     603/    32B2 : 01                  	DB	01H		; Skip "LD E,OV
     604/    32B3 : 1E 0A               OVERR:	LD	E,OV		; ?OV Error
     605/    32B5 : 01                  	DB	01H		; Skip "LD E,TM"
     606/    32B6 : 1E 18               TMERR:	LD	E,TM		; ?TM Error
     607/    32B8 :                     ;
     608/    32B8 : CD D6 33            ERROR_:	CALL	CLREG		; Clear registers and stack
     609/    32BB : 32 8A 80            	LD	(CTLOFG),A	; Enable output (A is 0)
     610/    32BE : CD 95 39            	CALL	STTLIN		; Start new line
     611/    32C1 : 21 AB 31            	LD	HL,ERRORS	; Point to error codes
     612/    32C4 : 57                  	LD	D,A		; D = 0 (A is 0)
     613/    32C5 : 3E 3F               	LD	A,'?'
     614/    32C7 : CD 7D 35            	CALL	OUTC		; Output '?'
     615/    32CA : 19                  	ADD	HL,DE		; Offset to correct error code
     616/    32CB : 7E                  	LD	A,(HL)		; First character
     617/    32CC : CD 7D 35            	CALL	OUTC		; Output it
     618/    32CF : CD FA 36            	CALL	GETCHR		; Get next character
     619/    32D2 : CD 7D 35            	CALL	OUTC		; Output it
     620/    32D5 : 21 35 32            	LD	HL,ERRMSG	; "Error" message
     621/    32D8 : CD 40 40            ERRIN:	CALL	PRS		; Output message
     622/    32DB : 2A A1 80            	LD	HL,(LINEAT)	; Get line of error
     623/    32DE : 11 FE FF            	LD	DE,-2		; Cold start error if -2
     624/    32E1 : CD 6C 35            	CALL	CPDEHL		; See if cold start error
     625/    32E4 : CA 0D 2F            	JP	Z,CSTART	; Cold start error - Restart
     626/    32E7 : 7C                  	LD	A,H		; Was it a direct error?
     627/    32E8 : A5                  	AND	L		; Line = -1 if direct error
     628/    32E9 : 3C                  	INC	A
     629/    32EA : C4 DB 46            	CALL	NZ,LINEIN	; No - output line of error
     630/    32ED : 3E                  	DB	3EH		; Skip "POP BC"
     631/    32EE : C1                  POPNOK: POP	BC		; Drop address in input buffer
     632/    32EF :                     ;
     633/    32EF : AF                  PRNTOK: XOR	A		; Output "Ok" and get command
     634/    32F0 : 32 8A 80            	LD	(CTLOFG),A	; Enable output
     635/    32F3 : CD 95 39            	CALL	STTLIN		; Start new line
     636/    32F6 : 21 41 32            	LD	HL,OKMSG	; "Ok" message
     637/    32F9 : CD 40 40            	CALL	PRS		; Output "Ok"
     638/    32FC : 21 FF FF            GETCMD: LD	HL,-1		; Flag direct mode
     639/    32FF : 22 A1 80            	LD	(LINEAT),HL	; Save as current line
     640/    3302 : CD E9 34            	CALL	GETLIN		; Get an input line
     641/    3305 : DA FC 32            	JP	C,GETCMD	; Get line again if break
     642/    3308 : CD FA 36            	CALL	GETCHR		; Get first character
     643/    330B : 3C                  	INC	A		; Test if end of line
     644/    330C : 3D                  	DEC	A		; Without affecting Carry
     645/    330D : CA FC 32            	JP	Z,GETCMD	; Nothing entered - Get another
     646/    3310 : F5                  	PUSH	AF		; Save Carry status
     647/    3311 : CD C6 37            	CALL	ATOH		; Get line number into DE
     648/    3314 : D5                  	PUSH	DE		; Save line number
     649/    3315 : CD 00 34            	CALL	CRUNCH		; Tokenise rest of line
     650/    3318 : 47                  	LD	B,A		; Length of tokenised line
     651/    3319 : D1                  	POP	DE		; Restore line number
     652/    331A : F1                  	POP	AF		; Restore Carry
     653/    331B : D2 DA 36            	JP	NC,EXCUTE	; No line number - Direct mode
     654/    331E : D5                  	PUSH	DE		; Save line number
     655/    331F : C5                  	PUSH	BC		; Save length of tokenised line
     656/    3320 : AF                  	XOR	A
     657/    3321 : 32 11 81            	LD	(LSTBIN),A	; Clear last byte input
     658/    3324 : CD FA 36            	CALL	GETCHR		; Get next character
     659/    3327 : B7                  	OR	A		; Set flags
     660/    3328 : F5                  	PUSH	AF		; And save them
     661/    3329 : CD 90 33            	CALL	SRCHLN		; Search for line number in DE
     662/    332C : DA 35 33            	JP	C,LINFND	; Jump if line found
     663/    332F : F1                  	POP	AF		; Get status
     664/    3330 : F5                  	PUSH	AF		; And re-save
     665/    3331 : CA 67 38            	JP	Z,ULERR	; Nothing after number - Error
     666/    3334 : B7                  	OR	A		; Clear Carry
     667/    3335 : C5                  LINFND: PUSH	BC		; Save address of line in prog
     668/    3336 : D2 4C 33            	JP	NC,INEWLN	; Line not found - Insert new
     669/    3339 : EB                  	EX	DE,HL		; Next line address in DE
     670/    333A : 2A 1B 81            	LD	HL,(PROGND)	; End of program
     671/    333D : 1A                  SFTPRG: LD	A,(DE)		; Shift rest of program down
     672/    333E : 02                  	LD	(BC),A
     673/    333F : 03                  	INC	BC		; Next destination
     674/    3340 : 13                  	INC	DE		; Next source
     675/    3341 : CD 6C 35            	CALL	CPDEHL		; All done?
     676/    3344 : C2 3D 33            	JP	NZ,SFTPRG	; More to do
     677/    3347 : 60                  	LD	H,B		; HL - New end of program
     678/    3348 : 69                  	LD	L,C
     679/    3349 : 22 1B 81            	LD	(PROGND),HL	; Update end of program
     680/    334C :                     ;
     681/    334C : D1                  INEWLN: POP	DE		; Get address of line,
     682/    334D : F1                  	POP	AF		; Get status
     683/    334E : CA 73 33            	JP	Z,SETPTR	; No text - Set up pointers
     684/    3351 : 2A 1B 81            	LD	HL,(PROGND)	; Get end of program
     685/    3354 : E3                  	EX	(SP),HL		; Get length of input line
     686/    3355 : C1                  	POP	BC		; End of program to BC
     687/    3356 : 09                  	ADD	HL,BC		; Find new end
     688/    3357 : E5                  	PUSH	HL		; Save new end
     689/    3358 : CD 70 32            	CALL	MOVUP		; Make space for line
     690/    335B : E1                  	POP	HL		; Restore new end
     691/    335C : 22 1B 81            	LD	(PROGND),HL	; Update end of program pointer
     692/    335F : EB                  	EX	DE,HL		; Get line to move up in HL
     693/    3360 : 74                  	LD	(HL),H		; Save MSB
     694/    3361 : D1                  	POP	DE		; Get new line number
     695/    3362 : 23                  	INC	HL		; Skip pointer
     696/    3363 : 23                  	INC	HL
     697/    3364 : 73                  	LD	(HL),E		; Save LSB of line number
     698/    3365 : 23                  	INC	HL
     699/    3366 : 72                  	LD	(HL),D		; Save MSB of line number
     700/    3367 : 23                  	INC	HL		; To first byte in line
     701/    3368 : 11 A6 80            	LD	DE,BUFFER	; Copy buffer to program
     702/    336B : 1A                  MOVBUF: LD	A,(DE)		; Get source
     703/    336C : 77                  	LD	(HL),A		; Save destinations
     704/    336D : 23                  	INC	HL		; Next source
     705/    336E : 13                  	INC	DE		; Next destination
     706/    336F : B7                  	OR	A		; Done?
     707/    3370 : C2 6B 33            	JP	NZ,MOVBUF	; No - Repeat
     708/    3373 : CD BC 33            SETPTR: CALL	RUNFST		; Set line pointers
     709/    3376 : 23                  	INC	HL		; To LSB of pointer
     710/    3377 : EB                  	EX	DE,HL		; Address to DE
     711/    3378 : 62                  PTRLP:	LD	H,D		; Address to HL
     712/    3379 : 6B                  	LD	L,E
     713/    337A : 7E                  	LD	A,(HL)		; Get LSB of pointer
     714/    337B : 23                  	INC	HL		; To MSB of pointer
     715/    337C : B6                  	OR	(HL)		; Compare with MSB pointer
     716/    337D : CA FC 32            	JP	Z,GETCMD	; Get command line if end
     717/    3380 : 23                  	INC	HL		; To LSB of line number
     718/    3381 : 23                  	INC	HL		; Skip line number
     719/    3382 : 23                  	INC	HL		; Point to first byte in line
     720/    3383 : AF                  	XOR	A		; Looking for 00 byte
     721/    3384 : BE                  FNDEND: CP	(HL)		; Found end of line?
     722/    3385 : 23                  	INC	HL		; Move to next byte
     723/    3386 : C2 84 33            	JP	NZ,FNDEND	; No - Keep looking
     724/    3389 : EB                  	EX	DE,HL		; Next line address to HL
     725/    338A : 73                  	LD	(HL),E		; Save LSB of pointer
     726/    338B : 23                  	INC	HL
     727/    338C : 72                  	LD	(HL),D		; Save MSB of pointer
     728/    338D : C3 78 33            	JP	PTRLP		; Do next line
     729/    3390 :                     ;
     730/    3390 : 2A A3 80            SRCHLN: LD	HL,(BASTXT)	; Start of program text
     731/    3393 : 44                  SRCHLP: LD	B,H		; BC = Address to look at
     732/    3394 : 4D                  	LD	C,L
     733/    3395 : 7E                  	LD	A,(HL)		; Get address of next line
     734/    3396 : 23                  	INC	HL
     735/    3397 : B6                  	OR	(HL)		; End of program found?
     736/    3398 : 2B                  	DEC	HL
     737/    3399 : C8                  	RET	Z		; Yes - Line not found
     738/    339A : 23                  	INC	HL
     739/    339B : 23                  	INC	HL
     740/    339C : 7E                  	LD	A,(HL)		; Get LSB of line number
     741/    339D : 23                  	INC	HL
     742/    339E : 66                  	LD	H,(HL)		; Get MSB of line number
     743/    339F : 6F                  	LD	L,A
     744/    33A0 : CD 6C 35            	CALL	CPDEHL		; Compare with line in DE
     745/    33A3 : 60                  	LD	H,B		; HL = Start of this line
     746/    33A4 : 69                  	LD	L,C
     747/    33A5 : 7E                  	LD	A,(HL)		; Get LSB of next line address
     748/    33A6 : 23                  	INC	HL
     749/    33A7 : 66                  	LD	H,(HL)		; Get MSB of next line address
     750/    33A8 : 6F                  	LD	L,A		; Next line to HL
     751/    33A9 : 3F                  	CCF
     752/    33AA : C8                  	RET	Z		; Lines found - Exit
     753/    33AB : 3F                  	CCF
     754/    33AC : D0                  	RET	NC		; Line not found,at line after
     755/    33AD : C3 93 33            	JP	SRCHLP		; Keep looking
     756/    33B0 :                     ;
     757/    33B0 : C0                  NEW:	RET	NZ		; Return if any more on line
     758/    33B1 : 2A A3 80            CLRPTR: LD	HL,(BASTXT)	; Point to start of program
     759/    33B4 : AF                  	XOR	A		; Set program area to empty
     760/    33B5 : 77                  	LD	(HL),A		; Save LSB = 00
     761/    33B6 : 23                  	INC	HL
     762/    33B7 : 77                  	LD	(HL),A		; Save MSB = 00
     763/    33B8 : 23                  	INC	HL
     764/    33B9 : 22 1B 81            	LD	(PROGND),HL	; Set program end
     765/    33BC :                     ;
     766/    33BC : 2A A3 80            RUNFST: LD	HL,(BASTXT)	; Clear all variables
     767/    33BF : 2B                  	DEC	HL
     768/    33C0 :                     ;
     769/    33C0 : 22 13 81            INTVAR: LD	(BRKLIN),HL	; Initialise RUN variables
     770/    33C3 : 2A F4 80            	LD	HL,(LSTRAM)	; Get end of RAM
     771/    33C6 : 22 08 81            	LD	(STRBOT),HL	; Clear string space
     772/    33C9 : AF                  	XOR	A
     773/    33CA : CD 0A 37            	CALL	RESTOR		; Reset DATA pointers
     774/    33CD : 2A 1B 81            	LD	HL,(PROGND)	; Get end of program
     775/    33D0 : 22 1D 81            	LD	(VAREND),HL	; Clear variables
     776/    33D3 : 22 1F 81            	LD	(ARREND),HL	; Clear arrays
     777/    33D6 :                     ;
     778/    33D6 : C1                  CLREG:	POP	BC		; Save return address
     779/    33D7 : 2A 9F 80            	LD	HL,(STRSPC)	; Get end of working RAN
     780/    33DA : F9                  	LD	SP,HL		; Set stack
     781/    33DB : 21 F8 80            	LD	HL,TMSTPL	; Temporary string pool
     782/    33DE : 22 F6 80            	LD	(TMSTPT),HL	; Reset temporary string ptr
     783/    33E1 : AF                  	XOR	A		; A = 00
     784/    33E2 : 6F                  	LD	L,A		; HL = 0000
     785/    33E3 : 67                  	LD	H,A
     786/    33E4 : 22 19 81            	LD	(CONTAD),HL	; No CONTinue
     787/    33E7 : 32 10 81            	LD	(FORFLG),A	; Clear FOR flag
     788/    33EA : 22 23 81            	LD	(FNRGNM),HL	; Clear FN argument
     789/    33ED : E5                  	PUSH	HL		; HL = 0000
     790/    33EE : C5                  	PUSH	BC		; Put back return
     791/    33EF : 2A 13 81            DOAGN:	LD	HL,(BRKLIN)	; Get address of code to RUN
     792/    33F2 : C9                  	RET			; Return to execution driver
     793/    33F3 :                     ;
     794/    33F3 : 3E 3F               PROMPT: LD	A,'?'		; '?'
     795/    33F5 : CD 7D 35            	CALL	OUTC		; Output character
     796/    33F8 : 3E 20               	LD	A,' '		; Space
     797/    33FA : CD 7D 35            	CALL	OUTC		; Output character
     798/    33FD : C3 93 80            	JP	RINPUT		; Get input line
     799/    3400 :                     ;
     800/    3400 : AF                  CRUNCH: XOR	A		; Tokenise line @ HL to BUFFER
     801/    3401 : 32 F3 80            	LD	(DATFLG),A	; Reset literal flag
     802/    3404 : 0E 05               	LD	C,2+3		; 2 byte number and 3 nulls
     803/    3406 : 11 A6 80            	LD	DE,BUFFER	; Start of input buffer
     804/    3409 : 7E                  CRNCLP: LD	A,(HL)		; Get byte
     805/    340A : FE 20               	CP	' '		; Is it a space?
     806/    340C : CA 88 34            	JP	Z,MOVDIR	; Yes - Copy direct
     807/    340F : 47                  	LD	B,A		; Save character
     808/    3410 : FE 22               	CP	'"'		; Is it a quote?
     809/    3412 : CA A8 34            	JP	Z,CPYLIT	; Yes - Copy literal string
     810/    3415 : B7                  	OR	A		; Is it end of buffer?
     811/    3416 : CA AF 34            	JP	Z,ENDBUF	; Yes - End buffer
     812/    3419 : 3A F3 80            	LD	A,(DATFLG)	; Get data type
     813/    341C : B7                  	OR	A		; Literal?
     814/    341D : 7E                  	LD	A,(HL)		; Get byte to copy
     815/    341E : C2 88 34            	JP	NZ,MOVDIR	; Literal - Copy direct
     816/    3421 : FE 3F               	CP	'?'		; Is it '?' short for PRINT
     817/    3423 : 3E 9E               	LD	A,ZPRINT	; "PRINT" token
     818/    3425 : CA 88 34            	JP	Z,MOVDIR	; Yes - replace it
     819/    3428 : 7E                  	LD	A,(HL)		; Get byte again
     820/    3429 : FE 30               	CP	'0'		; Is it less than '0'
     821/    342B : DA 33 34            	JP	C,FNDWRD	; Yes - Look for reserved words
     822/    342E : FE 3C               	CP	60		; ";"+1; Is it "0123456789:;" ?
     823/    3430 : DA 88 34            	JP	C,MOVDIR	; Yes - copy it direct
     824/    3433 : D5                  FNDWRD: PUSH	DE		; Look for reserved words
     825/    3434 : 11 2C 30            	LD	DE,WORDS-1	; Point to table
     826/    3437 : C5                  	PUSH	BC		; Save count
     827/    3438 : 01 84 34            	LD	BC,RETNAD	; Where to return to
     828/    343B : C5                  	PUSH	BC		; Save return address
     829/    343C : 06 7F               	LD	B,ZEND-1	; First token value -1
     830/    343E : 7E                  	LD	A,(HL)		; Get byte
     831/    343F : FE 61               	CP	'a'		; Less than 'a' ?
     832/    3441 : DA 4C 34            	JP	C,SEARCH	; Yes - search for words
     833/    3444 : FE 7B               	CP	'z'+1		; Greater than 'z' ?
     834/    3446 : D2 4C 34            	JP	NC,SEARCH	; Yes - search for words
     835/    3449 : E6 5F               	AND	01011111B	; Force upper case
     836/    344B : 77                  	LD	(HL),A		; Replace byte
     837/    344C : 4E                  SEARCH: LD	C,(HL)		; Search for a word
     838/    344D : EB                  	EX	DE,HL
     839/    344E : 23                  GETNXT: INC	HL		; Get next reserved word
     840/    344F : B6                  	OR	(HL)		; Start of word?
     841/    3450 : F2 4E 34            	JP	P,GETNXT	; No - move on
     842/    3453 : 04                  	INC	B		; Increment token value
     843/    3454 : 7E                  	LD	A, (HL)		; Get byte from table
     844/    3455 : E6 7F               	AND	01111111B	; Strip bit 7
     845/    3457 : C8                  	RET	Z		; Return if end of list
     846/    3458 : B9                  	CP	C		; Same character as in buffer?
     847/    3459 : C2 4E 34            	JP	NZ,GETNXT	; No - get next word
     848/    345C : EB                  	EX	DE,HL
     849/    345D : E5                  	PUSH	HL		; Save start of word
     850/    345E :                     ;
     851/    345E : 13                  NXTBYT: INC	DE		; Look through rest of word
     852/    345F : 1A                  	LD	A,(DE)		; Get byte from table
     853/    3460 : B7                  	OR	A		; End of word ?
     854/    3461 : FA 80 34            	JP	M,MATCH		; Yes - Match found
     855/    3464 : 4F                  	LD	C,A		; Save it
     856/    3465 : 78                  	LD	A,B		; Get token value
     857/    3466 : FE 88               	CP	ZGOTO		; Is it "GOTO" token ?
     858/    3468 : C2 6F 34            	JP	NZ,NOSPC	; No - Don't allow spaces
     859/    346B : CD FA 36            	CALL	GETCHR		; Get next character
     860/    346E : 2B                  	DEC	HL		; Cancel increment from GETCHR
     861/    346F : 23                  NOSPC:	INC	HL		; Next byte
     862/    3470 : 7E                  	LD	A,(HL)		; Get byte
     863/    3471 : FE 61               	CP	'a'		; Less than 'a' ?
     864/    3473 : DA 78 34            	JP	C,NOCHNG	; Yes - don't change
     865/    3476 : E6 5F               	AND	01011111B	; Make upper case
     866/    3478 : B9                  NOCHNG: CP	C		; Same as in buffer ?
     867/    3479 : CA 5E 34            	JP	Z,NXTBYT	; Yes - keep testing
     868/    347C : E1                  	POP	HL		; Get back start of word
     869/    347D : C3 4C 34            	JP	SEARCH		; Look at next word
     870/    3480 :                     ;
     871/    3480 : 48                  MATCH:	LD	C,B		; Word found - Save token value
     872/    3481 : F1                  	POP	AF		; Throw away return
     873/    3482 : EB                  	EX	DE,HL
     874/    3483 : C9                  	RET			; Return to "RETNAD"
     875/    3484 : EB                  RETNAD: EX	DE,HL		; Get address in string
     876/    3485 : 79                  	LD	A,C		; Get token value
     877/    3486 : C1                  	POP	BC		; Restore buffer length
     878/    3487 : D1                  	POP	DE		; Get destination address
     879/    3488 : 23                  MOVDIR: INC	HL		; Next source in buffer
     880/    3489 : 12                  	LD	(DE),A		; Put byte in buffer
     881/    348A : 13                  	INC	DE		; Move up buffer
     882/    348B : 0C                  	INC	C		; Increment length of buffer
     883/    348C : D6 3A               	SUB	':'		; End of statement?
     884/    348E : CA 96 34            	JP	Z,SETLIT	; Jump if multi-statement line
     885/    3491 : FE 49               	CP	ZDATA-3AH	; Is it DATA statement ?
     886/    3493 : C2 99 34            	JP	NZ,TSTREM	; No - see if REM
     887/    3496 : 32 F3 80            SETLIT: LD	(DATFLG),A	; Set literal flag
     888/    3499 : D6 54               TSTREM: SUB	ZREM-3AH	; Is it REM?
     889/    349B : C2 09 34            	JP	NZ,CRNCLP	; No - Leave flag
     890/    349E : 47                  	LD	B,A		; Copy rest of buffer
     891/    349F : 7E                  NXTCHR: LD	A,(HL)		; Get byte
     892/    34A0 : B7                  	OR	A		; End of line ?
     893/    34A1 : CA AF 34            	JP	Z,ENDBUF	; Yes - Terminate buffer
     894/    34A4 : B8                  	CP	B		; End of statement ?
     895/    34A5 : CA 88 34            	JP	Z,MOVDIR	; Yes - Get next one
     896/    34A8 : 23                  CPYLIT: INC	HL		; Move up source string
     897/    34A9 : 12                  	LD	(DE),A		; Save in destination
     898/    34AA : 0C                  	INC	C		; Increment length
     899/    34AB : 13                  	INC	DE		; Move up destination
     900/    34AC : C3 9F 34            	JP	NXTCHR		; Repeat
     901/    34AF :                     ;
     902/    34AF : 21 A5 80            ENDBUF: LD	HL,BUFFER-1	; Point to start of buffer
     903/    34B2 : 12                  	LD	(DE),A		; Mark end of buffer (A = 00)
     904/    34B3 : 13                  	INC	DE
     905/    34B4 : 12                  	LD	(DE),A		; A = 00
     906/    34B5 : 13                  	INC	DE
     907/    34B6 : 12                  	LD	(DE),A		; A = 00
     908/    34B7 : C9                  	RET
     909/    34B8 :                     ;
     910/    34B8 : 3A 89 80            DODEL:	LD	A,(NULFLG)	; Get null flag status
     911/    34BB : B7                  	OR	A		; Is it zero?
     912/    34BC : 3E 00               	LD	A,0		; Zero A - Leave flags
     913/    34BE : 32 89 80            	LD	(NULFLG),A	; Zero null flag
     914/    34C1 : C2 CC 34            	JP	NZ,ECHDEL	; Set - Echo it
     915/    34C4 : 05                  	DEC	B		; Decrement length
     916/    34C5 : CA E9 34            	JP	Z,GETLIN	; Get line again if empty
     917/    34C8 : CD 7D 35            	CALL	OUTC		; Output null character
     918/    34CB : 3E                  	DB	3EH		; Skip "DEC B"
     919/    34CC : 05                  ECHDEL: DEC	B		; Count bytes in buffer
     920/    34CD : 2B                  	DEC	HL		; Back space buffer
     921/    34CE : CA E0 34            	JP	Z,OTKLN		; No buffer - Try again
     922/    34D1 : 7E                  	LD	A,(HL)		; Get deleted byte
     923/    34D2 : CD 7D 35            	CALL	OUTC		; Echo it
     924/    34D5 : C3 F2 34            	JP	MORINP		; Get more input
     925/    34D8 :                     ;
     926/    34D8 : 05                  DELCHR: DEC	B		; Count bytes in buffer
     927/    34D9 : 2B                  	DEC	HL		; Back space buffer
     928/    34DA : CD 7D 35            	CALL	OUTC		; Output character in A
     929/    34DD : C2 F2 34            	JP	NZ,MORINP	; Not end - Get more
     930/    34E0 : CD 7D 35            OTKLN:	CALL	OUTC		; Output character in A
     931/    34E3 : CD A2 39            KILIN:	CALL	PRCRLF		; Output CRLF
     932/    34E6 : C3 E9 34            	JP	TTYLIN		; Get line again
     933/    34E9 :                     ;
     934/    34E9 :                     GETLIN:
     935/    34E9 : 21 A6 80            TTYLIN: LD	HL,BUFFER	; Get a line by character
     936/    34EC : 06 01               	LD	B,1		; Set buffer as empty
     937/    34EE : AF                  	XOR	A
     938/    34EF : 32 89 80            	LD	(NULFLG),A	; Clear null flag
     939/    34F2 : CD A5 35            MORINP: CALL	CLOTST		; Get character and test ^O
     940/    34F5 : 4F                  	LD	C,A		; Save character in C
     941/    34F6 : FE 7F               	CP	DEL		; Delete character?
     942/    34F8 : CA B8 34            	JP	Z,DODEL	; Yes - Process it
     943/    34FB : 3A 89 80            	LD	A,(NULFLG)	; Get null flag
     944/    34FE : B7                  	OR	A		; Test null flag status
     945/    34FF : CA 0B 35            	JP	Z,PROCES	; Reset - Process character
     946/    3502 : 3E 00               	LD	A,0		; Set a null
     947/    3504 : CD 7D 35            	CALL	OUTC		; Output null
     948/    3507 : AF                  	XOR	A		; Clear A
     949/    3508 : 32 89 80            	LD	(NULFLG),A	; Reset null flag
     950/    350B : 79                  PROCES: LD	A,C		; Get character
     951/    350C : FE 07               	CP	CTRLG		; Bell?
     952/    350E : CA 4F 35            	JP	Z,PUTCTL	; Yes - Save it
     953/    3511 : FE 03               	CP	CTRLC		; Is it control "C"?
     954/    3513 : CC A2 39            	CALL	Z,PRCRLF	; Yes - Output CRLF
     955/    3516 : 37                  	SCF			; Flag break
     956/    3517 : C8                  	RET	Z		; Return if control "C"
     957/    3518 : FE 0D               	CP	CR		; Is it enter?
     958/    351A : CA 9D 39            	JP	Z,ENDINP	; Yes - Terminate input
     959/    351D : FE 15               	CP	CTRLU		; Is it control "U"?
     960/    351F : CA E3 34            	JP	Z,KILIN		; Yes - Get another line
     961/    3522 : FE 40               	CP	'@'		; Is it "kill line"?
     962/    3524 : CA E0 34            	JP	Z,OTKLN		; Yes - Kill line
     963/    3527 : FE 5F               	CP	'_'		; Is it delete?
     964/    3529 : CA D8 34            	JP	Z,DELCHR	; Yes - Delete character
     965/    352C : FE 08               	CP	BKSP		; Is it backspace?
     966/    352E : CA D8 34            	JP	Z,DELCHR	; Yes - Delete character
     967/    3531 : FE 12               	CP	CTRLR		; Is it control "R"?
     968/    3533 : C2 4A 35            	JP	NZ,PUTBUF	; No - Put in buffer
     969/    3536 : C5                  	PUSH	BC		; Save buffer length
     970/    3537 : D5                  	PUSH	DE		; Save DE
     971/    3538 : E5                  	PUSH	HL		; Save buffer address
     972/    3539 : 36 00               	LD	(HL),0		; Mark end of buffer
     973/    353B : CD 46 4B            	CALL	OUTNCR		; Output and do CRLF
     974/    353E : 21 A6 80            	LD	HL,BUFFER	; Point to buffer start
     975/    3541 : CD 40 40            	CALL	PRS		; Output buffer
     976/    3544 : E1                  	POP	HL		; Restore buffer address
     977/    3545 : D1                  	POP	DE		; Restore DE
     978/    3546 : C1                  	POP	BC		; Restore buffer length
     979/    3547 : C3 F2 34            	JP	MORINP		; Get another character
     980/    354A :                     ;
     981/    354A : FE 20               PUTBUF: CP	' '		; Is it a control code?
     982/    354C : DA F2 34            	JP	C,MORINP	; Yes - Ignore
     983/    354F : 78                  PUTCTL: LD	A,B		; Get number of bytes in buffer
     984/    3550 : FE 49               	CP	72+1		; Test for line overflow
     985/    3552 : 3E 07               	LD	A,CTRLG		; Set a bell
     986/    3554 : D2 64 35            	JP	NC,OUTNBS	; Ring bell if buffer full
     987/    3557 : 79                  	LD	A,C		; Get character
     988/    3558 : 71                  	LD	(HL),C		; Save in buffer
     989/    3559 : 32 11 81            	LD	(LSTBIN),A	; Save last input byte
     990/    355C : 23                  	INC	HL		; Move up buffer
     991/    355D : 04                  	INC	B		; Increment length
     992/    355E : CD 7D 35            OUTIT:	CALL	OUTC		; Output the character entered
     993/    3561 : C3 F2 34            	JP	MORINP		; Get another character
     994/    3564 :                     ;
     995/    3564 : CD 7D 35            OUTNBS: CALL	OUTC		; Output bell and back over it
     996/    3567 : 3E 08               	LD	A,BKSP		; Set back space
     997/    3569 : C3 5E 35            	JP	OUTIT		; Output it and get more
     998/    356C :                     ;
     999/    356C : 7C                  CPDEHL: LD	A,H		; Get H
    1000/    356D : 92                  	SUB	D		; Compare with D
    1001/    356E : C0                  	RET	NZ		; Different - Exit
    1002/    356F : 7D                  	LD	A,L		; Get L
    1003/    3570 : 93                  	SUB	E		; Compare with E
    1004/    3571 : C9                  	RET			; Return status
    1005/    3572 :                     ;
    1006/    3572 : 7E                  CHKSYN: LD	A,(HL)		; Check syntax of character
    1007/    3573 : E3                  	EX	(SP),HL		; Address of test byte
    1008/    3574 : BE                  	CP	(HL)		; Same as in code string?
    1009/    3575 : 23                  	INC	HL		; Return address
    1010/    3576 : E3                  	EX	(SP),HL		; Put it back
    1011/    3577 : CA FA 36            	JP	Z,GETCHR	; Yes - Get next character
    1012/    357A : C3 A4 32            	JP	SNERR		; Different - ?SN Error
    1013/    357D :                     ;
    1014/    357D : F5                  OUTC:	PUSH	AF		; Save character
    1015/    357E : 3A 8A 80            	LD	A,(CTLOFG)	; Get control "O" flag
    1016/    3581 : B7                  	OR	A		; Is it set?
    1017/    3582 : C2 75 40            	JP	NZ,POPAF	; Yes - don't output
    1018/    3585 : F1                  	POP	AF		; Restore character
    1019/    3586 : C5                  	PUSH	BC		; Save buffer length
    1020/    3587 : F5                  	PUSH	AF		; Save character
    1021/    3588 : FE 20               	CP	' '		; Is it a control code?
    1022/    358A : DA A1 35            	JP	C,DINPOS	; Yes - Don't INC POS(X)
    1023/    358D : 3A 87 80            	LD	A,(LWIDTH)	; Get line width
    1024/    3590 : 47                  	LD	B,A		; To B
    1025/    3591 : 3A F0 80            	LD	A,(CURPOS)	; Get cursor position
    1026/    3594 : 04                  	INC	B		; Width 255?
    1027/    3595 : CA 9D 35            	JP	Z,INCLEN	; Yes - No width limit
    1028/    3598 : 05                  	DEC	B		; Restore width
    1029/    3599 : B8                  	CP	B		; At end of line?
    1030/    359A : CC A2 39            	CALL	Z,PRCRLF	; Yes - output CRLF
    1031/    359D : 3C                  INCLEN: INC	A		; Move on one character
    1032/    359E : 32 F0 80            	LD	(CURPOS),A	; Save new position
    1033/    35A1 : F1                  DINPOS: POP	AF		; Restore character
    1034/    35A2 : C1                  	POP	BC		; Restore buffer length
    1035/    35A3 :                     ;	CALL	MONOUT		; Send it
    1036/    35A3 : CF                  	rst	08h
    1037/    35A4 : C9                  	RET
    1038/    35A5 :                     ;
    1039/    35A5 : CD FF 49            CLOTST: CALL	GETINP		; Get input character
    1040/    35A8 : E6 7F               	AND	01111111B	; Strip bit 7
    1041/    35AA : FE 0F               	CP	CTRLO		; Is it control "O"?
    1042/    35AC : C0                  	RET	NZ		; No don't flip flag
    1043/    35AD : 3A 8A 80            	LD	A,(CTLOFG)	; Get flag
    1044/    35B0 : 2F                  	CPL			; Flip it
    1045/    35B1 : 32 8A 80            	LD	(CTLOFG),A	; Put it back
    1046/    35B4 : AF                  	XOR	A		; Null character
    1047/    35B5 : C9                  	RET
    1048/    35B6 :                     ;
    1049/    35B6 : CD C6 37            LIST:	CALL	ATOH		; ASCII number to DE
    1050/    35B9 : C0                  	RET	NZ		; Return if anything extra
    1051/    35BA : C1                  	POP	BC		; Rubbish - Not needed
    1052/    35BB : CD 90 33            	CALL	SRCHLN		; Search for line number in DE
    1053/    35BE : C5                  	PUSH	BC		; Save address of line
    1054/    35BF : CD 0C 36            	CALL	SETLIN		; Set up lines counter
    1055/    35C2 : E1                  LISTLP: POP	HL		; Restore address of line
    1056/    35C3 : 4E                  	LD	C,(HL)		; Get LSB of next line
    1057/    35C4 : 23                  	INC	HL
    1058/    35C5 : 46                  	LD	B,(HL)		; Get MSB of next line
    1059/    35C6 : 23                  	INC	HL
    1060/    35C7 : 78                  	LD	A,B		; BC = 0 (End of program)?
    1061/    35C8 : B1                  	OR	C
    1062/    35C9 : CA EF 32            	JP	Z,PRNTOK	; Yes - Go to command mode
    1063/    35CC : CD 15 36            	CALL	COUNT		; Count lines
    1064/    35CF : CD 25 37            	CALL	TSTBRK		; Test for break key
    1065/    35D2 : C5                  	PUSH	BC		; Save address of next line
    1066/    35D3 : CD A2 39            	CALL	PRCRLF		; Output CRLF
    1067/    35D6 : 5E                  	LD	E,(HL)		; Get LSB of line number
    1068/    35D7 : 23                  	INC	HL
    1069/    35D8 : 56                  	LD	D,(HL)		; Get MSB of line number
    1070/    35D9 : 23                  	INC	HL
    1071/    35DA : E5                  	PUSH	HL		; Save address of line start
    1072/    35DB : EB                  	EX	DE,HL		; Line number to HL
    1073/    35DC : CD E3 46            	CALL	PRNTHL		; Output line number in decimal
    1074/    35DF : 3E 20               	LD	A,' '		; Space after line number
    1075/    35E1 : E1                  	POP	HL		; Restore start of line address
    1076/    35E2 : CD 7D 35            LSTLP2: CALL	OUTC		; Output character in A
    1077/    35E5 : 7E                  LSTLP3: LD	A,(HL)		; Get next byte in line
    1078/    35E6 : B7                  	OR	A		; End of line?
    1079/    35E7 : 23                  	INC	HL		; To next byte in line
    1080/    35E8 : CA C2 35            	JP	Z,LISTLP	; Yes - get next line
    1081/    35EB : F2 E2 35            	JP	P,LSTLP2	; No token - output it
    1082/    35EE : D6 7F               	SUB	ZEND-1		; Find and output word
    1083/    35F0 : 4F                  	LD	C,A		; Token offset+1 to C
    1084/    35F1 : 11 2D 30            	LD	DE,WORDS	; Reserved word list
    1085/    35F4 : 1A                  FNDTOK: LD	A,(DE)		; Get character in list
    1086/    35F5 : 13                  	INC	DE		; Move on to next
    1087/    35F6 : B7                  	OR	A		; Is it start of word?
    1088/    35F7 : F2 F4 35            	JP	P,FNDTOK	; No - Keep looking for word
    1089/    35FA : 0D                  	DEC	C		; Count words
    1090/    35FB : C2 F4 35            	JP	NZ,FNDTOK	; Not there - keep looking
    1091/    35FE : E6 7F               OUTWRD: AND	01111111B	; Strip bit 7
    1092/    3600 : CD 7D 35            	CALL	OUTC		; Output first character
    1093/    3603 : 1A                  	LD	A,(DE)		; Get next character
    1094/    3604 : 13                  	INC	DE		; Move on to next
    1095/    3605 : B7                  	OR	A		; Is it end of word?
    1096/    3606 : F2 FE 35            	JP	P,OUTWRD	; No - output the rest
    1097/    3609 : C3 E5 35            	JP	LSTLP3		; Next byte in line
    1098/    360C :                     ;
    1099/    360C : E5                  SETLIN: PUSH	HL		; Set up LINES counter
    1100/    360D : 2A 8D 80            	LD	HL,(LINESN)	; Get LINES number
    1101/    3610 : 22 8B 80            	LD	(LINESC),HL	; Save in LINES counter
    1102/    3613 : E1                  	POP	HL
    1103/    3614 : C9                  	RET
    1104/    3615 :                     ;
    1105/    3615 : E5                  COUNT:	PUSH	HL		; Save code string address
    1106/    3616 : D5                  	PUSH	DE
    1107/    3617 : 2A 8B 80            	LD	HL,(LINESC)	; Get LINES counter
    1108/    361A : 11 FF FF            	LD	DE,-1
    1109/    361D : ED 5A               	ADC	HL,DE		; Decrement
    1110/    361F : 22 8B 80            	LD	(LINESC),HL	; Put it back
    1111/    3622 : D1                  	POP	DE
    1112/    3623 : E1                  	POP	HL		; Restore code string address
    1113/    3624 : F0                  	RET	P		; Return if more lines to go
    1114/    3625 : E5                  	PUSH	HL		; Save code string address
    1115/    3626 : 2A 8D 80            	LD	HL,(LINESN)	; Get LINES number
    1116/    3629 : 22 8B 80            	LD	(LINESC),HL	; Reset LINES counter
    1117/    362C : CD FF 49            	CALL	GETINP		; Get input character
    1118/    362F : FE 03               	CP	CTRLC		; Is it control "C"?
    1119/    3631 : CA 38 36            	JP	Z,RSLNBK	; Yes - Reset LINES and break
    1120/    3634 : E1                  	POP	HL		; Restore code string address
    1121/    3635 : C3 15 36            	JP	COUNT		; Keep on counting
    1122/    3638 :                     ;
    1123/    3638 : 2A 8D 80            RSLNBK: LD	HL,(LINESN)	; Get LINES number
    1124/    363B : 22 8B 80            	LD	(LINESC),HL	; Reset LINES counter
    1125/    363E : C3 6E 2F            	JP	BRKRET		; Go and output "Break"
    1126/    3641 :                     ;
    1127/    3641 : 3E 64               FOR:	LD	A,64H		; Flag "FOR" assignment
    1128/    3643 : 32 10 81            	LD	(FORFLG),A	; Save "FOR" flag
    1129/    3646 : CD A8 38            	CALL	LET		; Set up initial index
    1130/    3649 : C1                  	POP	BC		; Drop RETurn address
    1131/    364A : E5                  	PUSH	HL		; Save code string address
    1132/    364B : CD 91 38            	CALL	DATA		; Get next statement address
    1133/    364E : 22 0C 81            	LD	(LOOPST),HL	; Save it for start of loop
    1134/    3651 : 21 02 00            	LD	HL,2		; Offset for "FOR" block
    1135/    3654 : 39                  	ADD	HL,SP		; Point to it
    1136/    3655 : CD 51 32            FORSLP: CALL	LOKFOR		; Look for existing "FOR" block
    1137/    3658 : D1                  	POP	DE		; Get code string address
    1138/    3659 : C2 71 36            	JP	NZ,FORFND	; No nesting found
    1139/    365C : 09                  	ADD	HL,BC		; Move into "FOR" block
    1140/    365D : D5                  	PUSH	DE		; Save code string address
    1141/    365E : 2B                  	DEC	HL
    1142/    365F : 56                  	LD	D,(HL)		; Get MSB of loop statement
    1143/    3660 : 2B                  	DEC	HL
    1144/    3661 : 5E                  	LD	E,(HL)		; Get LSB of loop statement
    1145/    3662 : 23                  	INC	HL
    1146/    3663 : 23                  	INC	HL
    1147/    3664 : E5                  	PUSH	HL		; Save block address
    1148/    3665 : 2A 0C 81            	LD	HL,(LOOPST)	; Get address of loop statement
    1149/    3668 : CD 6C 35            	CALL	CPDEHL		; Compare the FOR loops
    1150/    366B : E1                  	POP	HL		; Restore block address
    1151/    366C : C2 55 36            	JP	NZ,FORSLP	; Different FORs - Find another
    1152/    366F : D1                  	POP	DE		; Restore code string address
    1153/    3670 : F9                  	LD	SP,HL		; Remove all nested loops
    1154/    3671 :                     ;
    1155/    3671 : EB                  FORFND: EX	DE,HL		; Code string address to HL
    1156/    3672 : 0E 08               	LD	C,8
    1157/    3674 : CD 81 32            	CALL	CHKSTK		; Check for 8 levels of stack
    1158/    3677 : E5                  	PUSH	HL		; Save code string address
    1159/    3678 : 2A 0C 81            	LD	HL,(LOOPST)	; Get first statement of loop
    1160/    367B : E3                  	EX	(SP),HL		; Save and restore code string
    1161/    367C : E5                  	PUSH	HL		; Re-save code string address
    1162/    367D : 2A A1 80            	LD	HL,(LINEAT)	; Get current line number
    1163/    3680 : E3                  	EX	(SP),HL		; Save and restore code string
    1164/    3681 : CD 6A 3B            	CALL	TSTNUM		; Make sure it's a number
    1165/    3684 : CD 72 35            	CALL	CHKSYN		; Make sure "TO" is next
    1166/    3687 : A6                  	DB	ZTO		; "TO" token
    1167/    3688 : CD 67 3B            	CALL	GETNUM		; Get "TO" expression value
    1168/    368B : E5                  	PUSH	HL		; Save code string address
    1169/    368C : CD 95 45            	CALL	BCDEFP		; Move "TO" value to BCDE
    1170/    368F : E1                  	POP	HL		; Restore code string address
    1171/    3690 : C5                  	PUSH	BC		; Save "TO" value in block
    1172/    3691 : D5                  	PUSH	DE
    1173/    3692 : 01 00 81            	LD	BC,8100H	; BCDE - 1 (default STEP)
    1174/    3695 : 51                  	LD	D,C		; C=0
    1175/    3696 : 5A                  	LD	E,D		; D=0
    1176/    3697 : 7E                  	LD	A,(HL)		; Get next byte in code string
    1177/    3698 : FE AB               	CP	ZSTEP		; See if "STEP" is stated
    1178/    369A : 3E 01               	LD	A,1		; Sign of step = 1
    1179/    369C : C2 AD 36            	JP	NZ,SAVSTP	; No STEP given - Default to 1
    1180/    369F : CD FA 36            	CALL	GETCHR		; Jump over "STEP" token
    1181/    36A2 : CD 67 3B            	CALL	GETNUM		; Get step value
    1182/    36A5 : E5                  	PUSH	HL		; Save code string address
    1183/    36A6 : CD 95 45            	CALL	BCDEFP		; Move STEP to BCDE
    1184/    36A9 : CD 49 45            	CALL	TSTSGN		; Test sign of FPREG
    1185/    36AC : E1                  	POP	HL		; Restore code string address
    1186/    36AD : C5                  SAVSTP: PUSH	BC		; Save the STEP value in block
    1187/    36AE : D5                  	PUSH	DE
    1188/    36AF : F5                  	PUSH	AF		; Save sign of STEP
    1189/    36B0 : 33                  	INC	SP		; Don't save flags
    1190/    36B1 : E5                  	PUSH	HL		; Save code string address
    1191/    36B2 : 2A 13 81            	LD	HL,(BRKLIN)	; Get address of index variable
    1192/    36B5 : E3                  	EX	(SP),HL		; Save and restore code string
    1193/    36B6 : 06 81               PUTFID: LD	B,ZFOR		; "FOR" block marker
    1194/    36B8 : C5                  	PUSH	BC		; Save it
    1195/    36B9 : 33                  	INC	SP		; Don't save C
    1196/    36BA :                     ;
    1197/    36BA : CD 25 37            RUNCNT: CALL	TSTBRK		; Execution driver - Test break
    1198/    36BD : 22 13 81            	LD	(BRKLIN),HL	; Save code address for break
    1199/    36C0 : 7E                  	LD	A,(HL)		; Get next byte in code string
    1200/    36C1 : FE 3A               	CP	':'		; Multi statement line?
    1201/    36C3 : CA DA 36            	JP	Z,EXCUTE	; Yes - Execute it
    1202/    36C6 : B7                  	OR	A		; End of line?
    1203/    36C7 : C2 A4 32            	JP	NZ,SNERR	; No - Syntax error
    1204/    36CA : 23                  	INC	HL		; Point to address of next line
    1205/    36CB : 7E                  	LD	A,(HL)		; Get LSB of line pointer
    1206/    36CC : 23                  	INC	HL
    1207/    36CD : B6                  	OR	(HL)		; Is it zero (End of prog)?
    1208/    36CE : CA 4C 37            	JP	Z,ENDPRG	; Yes - Terminate execution
    1209/    36D1 : 23                  	INC	HL		; Point to line number
    1210/    36D2 : 5E                  	LD	E,(HL)		; Get LSB of line number
    1211/    36D3 : 23                  	INC	HL
    1212/    36D4 : 56                  	LD	D,(HL)		; Get MSB of line number
    1213/    36D5 : EB                  	EX	DE,HL		; Line number to HL
    1214/    36D6 : 22 A1 80            	LD	(LINEAT),HL	; Save as current line number
    1215/    36D9 : EB                  	EX	DE,HL		; Line number back to DE
    1216/    36DA : CD FA 36            EXCUTE: CALL	GETCHR		; Get key word
    1217/    36DD : 11 BA 36            	LD	DE,RUNCNT	; Where to RETurn to
    1218/    36E0 : D5                  	PUSH	DE		; Save for RETurn
    1219/    36E1 : C8                  IFJMP:	RET	Z		; Go to RUNCNT if end of STMT
    1220/    36E2 : D6 80               ONJMP:	SUB	ZEND		; Is it a token?
    1221/    36E4 : DA A8 38            	JP	C,LET		; No - try to assign it
    1222/    36E7 : FE 25               	CP	ZNEW+1-ZEND	; END to NEW ?
    1223/    36E9 : D2 A4 32            	JP	NC,SNERR	; Not a key word - ?SN Error
    1224/    36EC : 07                  	RLCA			; Double it
    1225/    36ED : 4F                  	LD	C,A		; BC = Offset into table
    1226/    36EE : 06 00               	LD	B,0
    1227/    36F0 : EB                  	EX	DE,HL		; Save code string address
    1228/    36F1 : 21 4C 31            	LD	HL,WORDTB	; Keyword address table
    1229/    36F4 : 09                  	ADD	HL,BC		; Point to routine address
    1230/    36F5 : 4E                  	LD	C,(HL)		; Get LSB of routine address
    1231/    36F6 : 23                  	INC	HL
    1232/    36F7 : 46                  	LD	B,(HL)		; Get MSB of routine address
    1233/    36F8 : C5                  	PUSH	BC		; Save routine address
    1234/    36F9 : EB                  	EX	DE,HL		; Restore code string address
    1235/    36FA :                     ;
    1236/    36FA : 23                  GETCHR: INC	HL		; Point to next character
    1237/    36FB : 7E                  	LD	A,(HL)		; Get next code string byte
    1238/    36FC : FE 3A               	CP	':'		; Z if ':'
    1239/    36FE : D0                  	RET	NC		; NC if > "9"
    1240/    36FF : FE 20               	CP	' '
    1241/    3701 : CA FA 36            	JP	Z,GETCHR	; Skip over spaces
    1242/    3704 : FE 30               	CP	'0'
    1243/    3706 : 3F                  	CCF			; NC if < '0'
    1244/    3707 : 3C                  	INC	A		; Test for zero - Leave carry
    1245/    3708 : 3D                  	DEC	A		; Z if Null
    1246/    3709 : C9                  	RET
    1247/    370A :                     ;
    1248/    370A : EB                  RESTOR: EX	DE,HL		; Save code string address
    1249/    370B : 2A A3 80            	LD	HL,(BASTXT)	; Point to start of program
    1250/    370E : CA 1F 37            	JP	Z,RESTNL	; Just RESTORE - reset pointer
    1251/    3711 : EB                  	EX	DE,HL		; Restore code string address
    1252/    3712 : CD C6 37            	CALL	ATOH		; Get line number to DE
    1253/    3715 : E5                  	PUSH	HL		; Save code string address
    1254/    3716 : CD 90 33            	CALL	SRCHLN		; Search for line number in DE
    1255/    3719 : 60                  	LD	H,B		; HL = Address of line
    1256/    371A : 69                  	LD	L,C
    1257/    371B : D1                  	POP	DE		; Restore code string address
    1258/    371C : D2 67 38            	JP	NC,ULERR	; ?UL Error if not found
    1259/    371F : 2B                  RESTNL: DEC	HL		; Byte before DATA statement
    1260/    3720 : 22 21 81            UPDATA: LD	(NXTDAT),HL	; Update DATA pointer
    1261/    3723 : EB                  	EX	DE,HL		; Restore code string address
    1262/    3724 : C9                  	RET
    1263/    3725 :                     ;
    1264/    3725 :                     
    1265/    3725 : DF                  TSTBRK: RST	18H		; Check input status
    1266/    3726 : C8                  	RET	Z		; No key, go back
    1267/    3727 : D7                  	RST	10H		; Get the key into A
    1268/    3728 : FE 1B               	CP	ESC		; Escape key?
    1269/    372A : 28 11               	JR	Z,BRK		; Yes, break
    1270/    372C : FE 03               	CP	CTRLC		; <Ctrl-C>
    1271/    372E : 28 0D               	JR	Z,BRK		; Yes, break
    1272/    3730 : FE 13               	CP	CTRLS		; Stop scrolling?
    1273/    3732 : C0                  	RET	NZ		; Other key, ignore
    1274/    3733 :                     ;
    1275/    3733 :                     
    1276/    3733 : D7                  STALL:	RST	10H		; Wait for key
    1277/    3734 : FE 11               	CP	CTRLQ		; Resume scrolling?
    1278/    3736 : C8                  	RET	Z		; Release the chokehold
    1279/    3737 : FE 03               	CP	CTRLC		; Second break?
    1280/    3739 : 28 07               	JR	Z,STOP		; Break during hold exits prog
    1281/    373B : 18 F6               	JR	STALL		; Loop until <Ctrl-Q> or <brk>
    1282/    373D :                     ;
    1283/    373D : 3E FF               BRK:	LD	A,0FFH		; Set BRKFLG
    1284/    373F : 32 92 80            	LD	(BRKFLG),A	; Store it
    1285/    3742 :                     ;
    1286/    3742 :                     
    1287/    3742 : C0                  STOP:	RET	NZ		; Exit if anything else
    1288/    3743 : F6                  	DB	0F6H		; Flag "STOP"
    1289/    3744 : C0                  PEND:	RET	NZ		; Exit if anything else
    1290/    3745 : 22 13 81            	LD	(BRKLIN),HL	; Save point of break
    1291/    3748 : 21                  	DB	21H		; Skip "OR 11111111B"
    1292/    3749 : F6 FF               INPBRK: OR	11111111B	; Flag "Break" wanted
    1293/    374B : C1                  	POP	BC		; Return not needed and more
    1294/    374C : 2A A1 80            ENDPRG: LD	HL,(LINEAT)	; Get current line number
    1295/    374F : F5                  	PUSH	AF		; Save STOP / END status
    1296/    3750 : 7D                  	LD	A,L		; Is it direct break?
    1297/    3751 : A4                  	AND	H
    1298/    3752 : 3C                  	INC	A		; Line is -1 if direct break
    1299/    3753 : CA 5F 37            	JP	Z,NOLIN		; Yes - No line number
    1300/    3756 : 22 17 81            	LD	(ERRLIN),HL	; Save line of break
    1301/    3759 : 2A 13 81            	LD	HL,(BRKLIN)	; Get point of break
    1302/    375C : 22 19 81            	LD	(CONTAD),HL	; Save point to CONTinue
    1303/    375F : AF                  NOLIN:	XOR	A
    1304/    3760 : 32 8A 80            	LD	(CTLOFG),A	; Enable output
    1305/    3763 : CD 95 39            	CALL	STTLIN		; Start a new line
    1306/    3766 : F1                  	POP	AF		; Restore STOP / END status
    1307/    3767 : 21 47 32            	LD	HL,BRKMSG	; "Break" message
    1308/    376A : C2 D8 32            	JP	NZ,ERRIN	; "in line" wanted?
    1309/    376D : C3 EF 32            	JP	PRNTOK		; Go to command mode
    1310/    3770 :                     ;
    1311/    3770 : 2A 19 81            CONT:	LD	HL,(CONTAD)	; Get CONTinue address
    1312/    3773 : 7C                  	LD	A,H		; Is it zero?
    1313/    3774 : B5                  	OR	L
    1314/    3775 : 1E 20               	LD	E,CN		; ?CN Error
    1315/    3777 : CA B8 32            	JP	Z,ERROR_	; Yes - output "?CN Error"
    1316/    377A : EB                  	EX	DE,HL		; Save code string address
    1317/    377B : 2A 17 81            	LD	HL,(ERRLIN)	; Get line of last break
    1318/    377E : 22 A1 80            	LD	(LINEAT),HL	; Set up current line number
    1319/    3781 : EB                  	EX	DE,HL		; Restore code string address
    1320/    3782 : C9                  	RET			; CONTinue where left off
    1321/    3783 :                     ;
    1322/    3783 : CD C8 42            NULL:	CALL	GETINT		; Get integer 0-255
    1323/    3786 : C0                  	RET	NZ		; Return if bad value
    1324/    3787 : 32 86 80            	LD	(NULLS),A	; Set nulls number
    1325/    378A : C9                  	RET
    1326/    378B :                     ;
    1327/    378B :                     
    1328/    378B : E5                  ACCSUM: PUSH	HL		; Save address in array
    1329/    378C : 2A 8F 80            	LD	HL,(CHKSUM)	; Get check sum
    1330/    378F : 06 00               	LD	B,0		; BC - Value of byte
    1331/    3791 : 4F                  	LD	C,A
    1332/    3792 : 09                  	ADD	HL,BC		; Add byte to check sum
    1333/    3793 : 22 8F 80            	LD	(CHKSUM),HL	; Re-save check sum
    1334/    3796 : E1                  	POP	HL		; Restore address in array
    1335/    3797 : C9                  	RET
    1336/    3798 :                     ;
    1337/    3798 : 7E                  CHKLTR: LD	A,(HL)		; Get byte
    1338/    3799 : FE 41               	CP	'A'		; < 'a' ?
    1339/    379B : D8                  	RET	C		; Carry set if not letter
    1340/    379C : FE 5B               	CP	'Z'+1		; > 'z' ?
    1341/    379E : 3F                  	CCF
    1342/    379F : C9                  	RET			; Carry set if not letter
    1343/    37A0 :                     ;
    1344/    37A0 : CD FA 36            FPSINT: CALL	GETCHR		; Get next character
    1345/    37A3 : CD 67 3B            POSINT: CALL	GETNUM		; Get integer 0 to 32767
    1346/    37A6 : CD 49 45            DEPINT: CALL	TSTSGN		; Test sign of FPREG
    1347/    37A9 : FA C1 37            	JP	M,FCERR		; Negative - ?FC Error
    1348/    37AC : 3A 2C 81            DEINT:	LD	A,(FPEXP)	; Get integer value to DE
    1349/    37AF : FE 90               	CP	80H+16		; Exponent in range (16 bits)?
    1350/    37B1 : DA F1 45            	JP	C,FPINT		; Yes - convert it
    1351/    37B4 : 01 80 90            	LD	BC,9080H	; BCDE = -32768
    1352/    37B7 : 11 00 00            	LD	DE,0000
    1353/    37BA : E5                  	PUSH	HL		; Save code string address
    1354/    37BB : CD C4 45            	CALL	CMPNUM		; Compare FPREG with BCDE
    1355/    37BE : E1                  	POP	HL		; Restore code string address
    1356/    37BF : 51                  	LD	D,C		; MSB to D
    1357/    37C0 : C8                  	RET	Z		; Return if in range
    1358/    37C1 : 1E 08               FCERR:	LD	E,FC		; ?FC Error
    1359/    37C3 : C3 B8 32            	JP	ERROR_		; Output error-
    1360/    37C6 :                     ;
    1361/    37C6 : 2B                  ATOH:	DEC	HL		; ASCII number to DE binary
    1362/    37C7 : 11 00 00            GETLN:	LD	DE,0		; Get number to DE
    1363/    37CA : CD FA 36            GTLNLP: CALL	GETCHR		; Get next character
    1364/    37CD : D0                  	RET	NC		; Exit if not a digit
    1365/    37CE : E5                  	PUSH	HL		; Save code string address
    1366/    37CF : F5                  	PUSH	AF		; Save digit
    1367/    37D0 : 21 98 19            	LD	HL,65529/10	; Largest number 65529
    1368/    37D3 : CD 6C 35            	CALL	CPDEHL		; Number in range?
    1369/    37D6 : DA A4 32            	JP	C,SNERR		; No - ?SN Error
    1370/    37D9 : 62                  	LD	H,D		; HL = Number
    1371/    37DA : 6B                  	LD	L,E
    1372/    37DB : 19                  	ADD	HL,DE		; Times 2
    1373/    37DC : 29                  	ADD	HL,HL		; Times 4
    1374/    37DD : 19                  	ADD	HL,DE		; Times 5
    1375/    37DE : 29                  	ADD	HL,HL		; Times 10
    1376/    37DF : F1                  	POP	AF		; Restore digit
    1377/    37E0 : D6 30               	SUB	'0'		; Make it 0 to 9
    1378/    37E2 : 5F                  	LD	E,A		; DE = Value of digit
    1379/    37E3 : 16 00               	LD	D,0
    1380/    37E5 : 19                  	ADD	HL,DE		; Add to number
    1381/    37E6 : EB                  	EX	DE,HL		; Number to DE
    1382/    37E7 : E1                  	POP	HL		; Restore code string address
    1383/    37E8 : C3 CA 37            	JP	GTLNLP		; Go to next character
    1384/    37EB :                     ;
    1385/    37EB : CA C0 33            CLEAR:	JP	Z,INTVAR	; Just "CLEAR" Keep parameters
    1386/    37EE : CD A3 37            	CALL	POSINT		; Get integer 0 to 32767 to DE
    1387/    37F1 : 2B                  	DEC	HL		; Cancel increment
    1388/    37F2 : CD FA 36            	CALL	GETCHR		; Get next character
    1389/    37F5 : E5                  	PUSH	HL		; Save code string address
    1390/    37F6 : 2A F4 80            	LD	HL,(LSTRAM)	; Get end of RAM
    1391/    37F9 : CA 0E 38            	JP	Z,STORED	; No value given - Use stored
    1392/    37FC : E1                  	POP	HL		; Restore code string address
    1393/    37FD : CD 72 35            	CALL	CHKSYN		; Check for comma
    1394/    3800 : 2C                  	DB	','
    1395/    3801 : D5                  	PUSH	DE		; Save number
    1396/    3802 : CD A3 37            	CALL	POSINT		; Get integer 0 to 32767
    1397/    3805 : 2B                  	DEC	HL		; Cancel increment
    1398/    3806 : CD FA 36            	CALL	GETCHR		; Get next character
    1399/    3809 : C2 A4 32            	JP	NZ,SNERR	; ?SN Error if more on line
    1400/    380C : E3                  	EX	(SP),HL		; Save code string address
    1401/    380D : EB                  	EX	DE,HL		; Number to DE
    1402/    380E : 7D                  STORED: LD	A,L		; Get LSB of new RAM top
    1403/    380F : 93                  	SUB	E		; Subtract LSB of string space
    1404/    3810 : 5F                  	LD	E,A		; Save LSB
    1405/    3811 : 7C                  	LD	A,H		; Get MSB of new RAM top
    1406/    3812 : 9A                  	SBC	A,D		; Subtract MSB of string space
    1407/    3813 : 57                  	LD	D,A		; Save MSB
    1408/    3814 : DA 99 32            	JP	C,OMERR		; ?OM Error if not enough mem
    1409/    3817 : E5                  	PUSH	HL		; Save RAM top
    1410/    3818 : 2A 1B 81            	LD	HL,(PROGND)	; Get program end
    1411/    381B : 01 28 00            	LD	BC,40		; 40 Bytes minimum working RAM
    1412/    381E : 09                  	ADD	HL,BC		; Get lowest address
    1413/    381F : CD 6C 35            	CALL	CPDEHL		; Enough memory?
    1414/    3822 : D2 99 32            	JP	NC,OMERR	; No - ?OM Error
    1415/    3825 : EB                  	EX	DE,HL		; RAM top to HL
    1416/    3826 : 22 9F 80            	LD	(STRSPC),HL	; Set new string space
    1417/    3829 : E1                  	POP	HL		; End of memory to use
    1418/    382A : 22 F4 80            	LD	(LSTRAM),HL	; Set new top of RAM
    1419/    382D : E1                  	POP	HL		; Restore code string address
    1420/    382E : C3 C0 33            	JP	INTVAR		; Initialise variables
    1421/    3831 :                     ;
    1422/    3831 : CA BC 33            RUN:	JP	Z,RUNFST	; RUN from start if just RUN
    1423/    3834 : CD C0 33            	CALL	INTVAR		; Initialise variables
    1424/    3837 : 01 BA 36            	LD	BC,RUNCNT	; Execution driver loop
    1425/    383A : C3 4D 38            	JP	RUNLIN		; RUN from line number
    1426/    383D :                     ;
    1427/    383D : 0E 03               GOSUB:	LD	C,3		; 3 Levels of stack needed
    1428/    383F : CD 81 32            	CALL	CHKSTK		; Check for 3 levels of stack
    1429/    3842 : C1                  	POP	BC		; Get return address
    1430/    3843 : E5                  	PUSH	HL		; Save code string for RETURN
    1431/    3844 : E5                  	PUSH	HL		; And for GOSUB routine
    1432/    3845 : 2A A1 80            	LD	HL,(LINEAT)	; Get current line
    1433/    3848 : E3                  	EX	(SP),HL		; Into stack - Code string out
    1434/    3849 : 3E 8C               	LD	A,ZGOSUB	; "GOSUB" token
    1435/    384B : F5                  	PUSH	AF		; Save token
    1436/    384C : 33                  	INC	SP		; Don't save flags
    1437/    384D :                     ;
    1438/    384D : C5                  RUNLIN: PUSH	BC		; Save return address
    1439/    384E : CD C6 37            GOTO:	CALL	ATOH		; ASCII number to DE binary
    1440/    3851 : CD 93 38            	CALL	REM		; Get end of line
    1441/    3854 : E5                  	PUSH	HL		; Save end of line
    1442/    3855 : 2A A1 80            	LD	HL,(LINEAT)	; Get current line
    1443/    3858 : CD 6C 35            	CALL	CPDEHL		; Line after current?
    1444/    385B : E1                  	POP	HL		; Restore end of line
    1445/    385C : 23                  	INC	HL		; Start of next line
    1446/    385D : DC 93 33            	CALL	C,SRCHLP	; Line is after current line
    1447/    3860 : D4 90 33            	CALL	NC,SRCHLN	; Line is before current line
    1448/    3863 : 60                  	LD	H,B		; Set up code string address
    1449/    3864 : 69                  	LD	L,C
    1450/    3865 : 2B                  	DEC	HL		; Incremented after
    1451/    3866 : D8                  	RET	C		; Line found
    1452/    3867 : 1E 0E               ULERR:	LD	E,UL		; ?UL Error
    1453/    3869 : C3 B8 32            	JP	ERROR_		; Output error message
    1454/    386C :                     ;
    1455/    386C : C0                  RETURN: RET	NZ		; Return if not just RETURN
    1456/    386D : 16 FF               	LD	D,-1		; Flag "GOSUB" search
    1457/    386F : CD 4D 32            	CALL	BAKSTK		; Look "GOSUB" block
    1458/    3872 : F9                  	LD	SP,HL		; Kill all FORs in subroutine
    1459/    3873 : FE 8C               	CP	ZGOSUB		; Test for "GOSUB" token
    1460/    3875 : 1E 04               	LD	E,RG		; ?RG Error
    1461/    3877 : C2 B8 32            	JP	NZ,ERROR_	; Error if no "GOSUB" found
    1462/    387A : E1                  	POP	HL		; Get RETURN line number
    1463/    387B : 22 A1 80            	LD	(LINEAT),HL	; Save as current
    1464/    387E : 23                  	INC	HL		; Was it from direct statement?
    1465/    387F : 7C                  	LD	A,H
    1466/    3880 : B5                  	OR	L		; Return to line
    1467/    3881 : C2 8B 38            	JP	NZ,RETLIN	; No - Return to line
    1468/    3884 : 3A 11 81            	LD	A,(LSTBIN)	; Any INPUT in subroutine?
    1469/    3887 : B7                  	OR	A		; If so buffer is corrupted
    1470/    3888 : C2 EE 32            	JP	NZ,POPNOK	; Yes - Go to command mode
    1471/    388B : 21 BA 36            RETLIN: LD	HL,RUNCNT	; Execution driver loop
    1472/    388E : E3                  	EX	(SP),HL		; Into stack - Code string out
    1473/    388F : 3E                  	DB	3EH		; Skip "POP HL"
    1474/    3890 : E1                  NXTDTA: POP	HL		; Restore code string address
    1475/    3891 :                     ;
    1476/    3891 : 01 3A               DATA:	DB	01H,3AH		; ':' End of statement
    1477/    3893 : 0E 00               REM:	LD	C,0		; 00	End of statement
    1478/    3895 : 06 00               	LD	B,0
    1479/    3897 : 79                  NXTSTL: LD	A,C		; Statement and byte
    1480/    3898 : 48                  	LD	C,B
    1481/    3899 : 47                  	LD	B,A		; Statement end byte
    1482/    389A : 7E                  NXTSTT: LD	A,(HL)		; Get byte
    1483/    389B : B7                  	OR	A		; End of line?
    1484/    389C : C8                  	RET	Z		; Yes - Exit
    1485/    389D : B8                  	CP	B		; End of statement?
    1486/    389E : C8                  	RET	Z		; Yes - Exit
    1487/    389F : 23                  	INC	HL		; Next byte
    1488/    38A0 : FE 22               	CP	'"'		; Literal string?
    1489/    38A2 : CA 97 38            	JP	Z,NXTSTL	; Yes - Look for another '"'
    1490/    38A5 : C3 9A 38            	JP	NXTSTT		; Keep looking
    1491/    38A8 :                     ;
    1492/    38A8 : CD 5D 3D            LET:	CALL	GETVAR		; Get variable name
    1493/    38AB : CD 72 35            	CALL	CHKSYN		; Make sure "=" follows
    1494/    38AE : B4                  	DB	ZEQUAL		; "=" token
    1495/    38AF : D5                  	PUSH	DE		; Save address of variable
    1496/    38B0 : 3A F2 80            	LD	A,(TYPE)	; Get data type
    1497/    38B3 : F5                  	PUSH	AF		; Save type
    1498/    38B4 : CD 79 3B            	CALL	EVAL		; Evaluate expression
    1499/    38B7 : F1                  	POP	AF		; Restore type
    1500/    38B8 : E3                  	EX	(SP),HL		; Save code - Get var addr
    1501/    38B9 : 22 13 81            	LD	(BRKLIN),HL	; Save address of variable
    1502/    38BC : 1F                  	RRA			; Adjust type
    1503/    38BD : CD 6C 3B            	CALL	CHKTYP		; Check types are the same
    1504/    38C0 : CA FB 38            	JP	Z,LETNUM	; Numeric - Move value
    1505/    38C3 : E5                  LETSTR: PUSH	HL		; Save address of string var
    1506/    38C4 : 2A 29 81            	LD	HL,(FPREG)	; Pointer to string entry
    1507/    38C7 : E5                  	PUSH	HL		; Save it on stack
    1508/    38C8 : 23                  	INC	HL		; Skip over length
    1509/    38C9 : 23                  	INC	HL
    1510/    38CA : 5E                  	LD	E,(HL)		; LSB of string address
    1511/    38CB : 23                  	INC	HL
    1512/    38CC : 56                  	LD	D,(HL)		; MSB of string address
    1513/    38CD : 2A A3 80            	LD	HL,(BASTXT)	; Point to start of program
    1514/    38D0 : CD 6C 35            	CALL	CPDEHL		; Is string before program?
    1515/    38D3 : D2 EA 38            	JP	NC,CRESTR	; Yes - Create string entry
    1516/    38D6 : 2A 9F 80            	LD	HL,(STRSPC)	; Point to string space
    1517/    38D9 : CD 6C 35            	CALL	CPDEHL		; Is string literal in program?
    1518/    38DC : D1                  	POP	DE		; Restore address of string
    1519/    38DD : D2 F2 38            	JP	NC,MVSTPT	; Yes - Set up pointer
    1520/    38E0 : 21 04 81            	LD	HL,TMPSTR	; Temporary string pool
    1521/    38E3 : CD 6C 35            	CALL	CPDEHL		; Is string in temporary pool?
    1522/    38E6 : D2 F2 38            	JP	NC,MVSTPT	; No - Set up pointer
    1523/    38E9 : 3E                  	DB	3EH		; Skip "POP DE"
    1524/    38EA : D1                  CRESTR: POP	DE		; Restore address of string
    1525/    38EB : CD A1 41            	CALL	BAKTMP		; Back to last tmp-str entry
    1526/    38EE : EB                  	EX	DE,HL		; Address of string entry
    1527/    38EF : CD DA 3F            	CALL	SAVSTR		; Save string in string area
    1528/    38F2 : CD A1 41            MVSTPT: CALL	BAKTMP		; Back to last tmp-str entry
    1529/    38F5 : E1                  	POP	HL		; Get string pointer
    1530/    38F6 : CD A4 45            	CALL	DETHL4		; Move string pointer to var
    1531/    38F9 : E1                  	POP	HL		; Restore code string address
    1532/    38FA : C9                  	RET
    1533/    38FB :                     ;
    1534/    38FB : E5                  LETNUM: PUSH	HL		; Save address of variable
    1535/    38FC : CD A1 45            	CALL	FPTHL		; Move value to variable
    1536/    38FF : D1                  	POP	DE		; Restore address of variable
    1537/    3900 : E1                  	POP	HL		; Restore code string address
    1538/    3901 : C9                  	RET
    1539/    3902 :                     ;
    1540/    3902 : CD C8 42            ON:	CALL	GETINT		; Get integer 0-255
    1541/    3905 : 7E                  	LD	A,(HL)		; Get "GOTO" or "GOSUB" token
    1542/    3906 : 47                  	LD	B,A		; Save in B
    1543/    3907 : FE 8C               	CP	ZGOSUB		; "GOSUB" token?
    1544/    3909 : CA 11 39            	JP	Z,ONGO		; Yes - Find line number
    1545/    390C : CD 72 35            	CALL	CHKSYN		; Make sure it's "GOTO"
    1546/    390F : 88                  	DB	ZGOTO		; "GOTO" token
    1547/    3910 : 2B                  	DEC	HL		; Cancel increment
    1548/    3911 : 4B                  ONGO:	LD	C,E		; Integer of branch value
    1549/    3912 : 0D                  ONGOLP: DEC	C		; Count branches
    1550/    3913 : 78                  	LD	A,B		; Get "GOTO" or "GOSUB" token
    1551/    3914 : CA E2 36            	JP	Z,ONJMP		; Go to that line if right one
    1552/    3917 : CD C7 37            	CALL	GETLN		; Get line number to DE
    1553/    391A : FE 2C               	CP	','		; Another line number?
    1554/    391C : C0                  	RET	NZ		; No - Drop through
    1555/    391D : C3 12 39            	JP	ONGOLP		; Yes - loop
    1556/    3920 :                     ;
    1557/    3920 : CD 79 3B            IF_:	CALL	EVAL		; Evaluate expression
    1558/    3923 : 7E                  	LD	A,(HL)		; Get token
    1559/    3924 : FE 88               	CP	ZGOTO		; "GOTO" token?
    1560/    3926 : CA 2E 39            	JP	Z,IFGO		; Yes - Get line
    1561/    3929 : CD 72 35            	CALL	CHKSYN		; Make sure it's "THEN"
    1562/    392C : A9                  	DB	ZTHEN		; "THEN" token
    1563/    392D : 2B                  	DEC	HL		; Cancel increment
    1564/    392E : CD 6A 3B            IFGO:	CALL	TSTNUM		; Make sure it's numeric
    1565/    3931 : CD 49 45            	CALL	TSTSGN		; Test state of expression
    1566/    3934 : CA 93 38            	JP	Z,REM		; False - Drop through
    1567/    3937 : CD FA 36            	CALL	GETCHR		; Get next character
    1568/    393A : DA 4E 38            	JP	C,GOTO		; Number - GOTO that line
    1569/    393D : C3 E1 36            	JP	IFJMP		; Otherwise do statement
    1570/    3940 :                     ;
    1571/    3940 : 2B                  MRPRNT: DEC	HL		; DEC 'cos GETCHR INCs
    1572/    3941 : CD FA 36            	CALL	GETCHR		; Get next character
    1573/    3944 : CA A2 39            PRINT:	JP	Z,PRCRLF	; CRLF if just PRINT
    1574/    3947 : C8                  PRNTLP: RET	Z		; End of list - Exit
    1575/    3948 : FE A5               	CP	ZTAB		; "TAB(" token?
    1576/    394A : CA D5 39            	JP	Z,DOTAB		; Yes - Do TAB routine
    1577/    394D : FE A8               	CP	ZSPC		; "SPC(" token?
    1578/    394F : CA D5 39            	JP	Z,DOTAB		; Yes - Do SPC routine
    1579/    3952 : E5                  	PUSH	HL		; Save code string address
    1580/    3953 : FE 2C               	CP	','		; Comma?
    1581/    3955 : CA BE 39            	JP	Z,DOCOM		; Yes - Move to next zone
    1582/    3958 : FE 3B               	CP	59;";"		; Semi-colon?
    1583/    395A : CA F8 39            	JP	Z,NEXITM	; Do semi-colon routine
    1584/    395D : C1                  	POP	BC		; Code string address to BC
    1585/    395E : CD 79 3B            	CALL	EVAL		; Evaluate expression
    1586/    3961 : E5                  	PUSH	HL		; Save code string address
    1587/    3962 : 3A F2 80            	LD	A,(TYPE)	; Get variable type
    1588/    3965 : B7                  	OR	A		; Is it a string variable?
    1589/    3966 : C2 8E 39            	JP	NZ,PRNTST	; Yes - Output string contents
    1590/    3969 : CD EE 46            	CALL	NUMASC		; Convert number to text
    1591/    396C : CD FE 3F            	CALL	CRTST		; Create temporary string
    1592/    396F : 36 20               	LD	(HL),' '	; Followed by a space
    1593/    3971 : 2A 29 81            	LD	HL,(FPREG)	; Get length of output
    1594/    3974 : 34                  	INC	(HL)		; Plus 1 for the space
    1595/    3975 : 2A 29 81            	LD	HL,(FPREG)	; < Not needed >
    1596/    3978 : 3A 87 80            	LD	A,(LWIDTH)	; Get width of line
    1597/    397B : 47                  	LD	B,A		; To B
    1598/    397C : 04                  	INC	B		; Width 255 (No limit)?
    1599/    397D : CA 8A 39            	JP	Z,PRNTNB	; Yes - Output number string
    1600/    3980 : 04                  	INC	B		; Adjust it
    1601/    3981 : 3A F0 80            	LD	A,(CURPOS)	; Get cursor position
    1602/    3984 : 86                  	ADD	A,(HL)		; Add length of string
    1603/    3985 : 3D                  	DEC	A		; Adjust it
    1604/    3986 : B8                  	CP	B		; Will output fit on this line?
    1605/    3987 : D4 A2 39            	CALL	NC,PRCRLF	; No - CRLF first
    1606/    398A : CD 43 40            PRNTNB: CALL	PRS1		; Output string at (HL)
    1607/    398D : AF                  	XOR	A		; Skip CALL by setting 'z' flag
    1608/    398E : C4 43 40            PRNTST: CALL	NZ,PRS1		; Output string at (HL)
    1609/    3991 : E1                  	POP	HL		; Restore code string address
    1610/    3992 : C3 40 39            	JP	MRPRNT		; See if more to PRINT
    1611/    3995 :                     ;
    1612/    3995 : 3A F0 80            STTLIN: LD	A,(CURPOS)	; Make sure on new line
    1613/    3998 : B7                  	OR	A		; Already at start?
    1614/    3999 : C8                  	RET	Z		; Yes - Do nothing
    1615/    399A : C3 A2 39            	JP	PRCRLF		; Start a new line
    1616/    399D :                     ;
    1617/    399D : 36 00               ENDINP: LD	(HL),0		; Mark end of buffer
    1618/    399F : 21 A5 80            	LD	HL,BUFFER-1	; Point to buffer
    1619/    39A2 : 3E 0D               PRCRLF: LD	A,CR		; Load a CR
    1620/    39A4 : CD 7D 35            	CALL	OUTC		; Output character
    1621/    39A7 : 3E 0A               	LD	A,LF		; Load a LF
    1622/    39A9 : CD 7D 35            	CALL	OUTC		; Output character
    1623/    39AC : AF                  DONULL: XOR	A		; Set to position 0
    1624/    39AD : 32 F0 80            	LD	(CURPOS),A	; Store it
    1625/    39B0 : 3A 86 80            	LD	A,(NULLS)	; Get number of nulls
    1626/    39B3 : 3D                  NULLP:	DEC	A		; Count them
    1627/    39B4 : C8                  	RET	Z		; Return if done
    1628/    39B5 : F5                  	PUSH	AF		; Save count
    1629/    39B6 : AF                  	XOR	A		; Load a null
    1630/    39B7 : CD 7D 35            	CALL	OUTC		; Output it
    1631/    39BA : F1                  	POP	AF		; Restore count
    1632/    39BB : C3 B3 39            	JP	NULLP		; Keep counting
    1633/    39BE :                     ;
    1634/    39BE : 3A 88 80            DOCOM:	LD	A,(COMMAN)	; Get comma width
    1635/    39C1 : 47                  	LD	B,A		; Save in B
    1636/    39C2 : 3A F0 80            	LD	A,(CURPOS)	; Get current position
    1637/    39C5 : B8                  	CP	B		; Within the limit?
    1638/    39C6 : D4 A2 39            	CALL	NC,PRCRLF	; No - output CRLF
    1639/    39C9 : D2 F8 39            	JP	NC,NEXITM	; Get next item
    1640/    39CC : D6 0E               ZONELP: SUB	14		; Next zone of 14 characters
    1641/    39CE : D2 CC 39            	JP	NC,ZONELP	; Repeat if more zones
    1642/    39D1 : 2F                  	CPL			; Number of spaces to output
    1643/    39D2 : C3 ED 39            	JP	ASPCS		; Output them
    1644/    39D5 :                     ;
    1645/    39D5 : F5                  DOTAB:	PUSH	AF		; Save token
    1646/    39D6 : CD C5 42            	CALL	FNDNUM		; Evaluate expression
    1647/    39D9 : CD 72 35            	CALL	CHKSYN		; Make sure ")" follows
    1648/    39DC : 29                  	DB	")"
    1649/    39DD : 2B                  	DEC	HL		; Back space on to ")"
    1650/    39DE : F1                  	POP	AF		; Restore token
    1651/    39DF : D6 A8               	SUB	ZSPC		; Was it "SPC(" ?
    1652/    39E1 : E5                  	PUSH	HL		; Save code string address
    1653/    39E2 : CA E8 39            	JP	Z,DOSPC	; Yes - Do 'E' spaces
    1654/    39E5 : 3A F0 80            	LD	A,(CURPOS)	; Get current position
    1655/    39E8 : 2F                  DOSPC:	CPL			; Number of spaces to print to
    1656/    39E9 : 83                  	ADD	A,E		; Total number to print
    1657/    39EA : D2 F8 39            	JP	NC,NEXITM	; TAB < Current POS(X)
    1658/    39ED : 3C                  ASPCS:	INC	A		; Output A spaces
    1659/    39EE : 47                  	LD	B,A		; Save number to print
    1660/    39EF : 3E 20               	LD	A,' '		; Space
    1661/    39F1 : CD 7D 35            SPCLP:	CALL	OUTC		; Output character in A
    1662/    39F4 : 05                  	DEC	B		; Count them
    1663/    39F5 : C2 F1 39            	JP	NZ,SPCLP	; Repeat if more
    1664/    39F8 : E1                  NEXITM: POP	HL		; Restore code string address
    1665/    39F9 : CD FA 36            	CALL	GETCHR		; Get next character
    1666/    39FC : C3 47 39            	JP	PRNTLP		; More to print
    1667/    39FF :                     ;
    1668/    39FF : 3F 52 65 64 6F 20   REDO:	DB	"?Redo from start",CR,LF,0
             3A05 : 66 72 6F 6D 20 73 
             3A0B : 74 61 72 74 0D 0A 
             3A11 : 00                
    1669/    3A12 :                     ;
    1670/    3A12 : 3A 12 81            BADINP: LD	A,(READFG)	; READ or INPUT?
    1671/    3A15 : B7                  	OR	A
    1672/    3A16 : C2 9E 32            	JP	NZ,DATSNR	; READ - ?SN Error
    1673/    3A19 : C1                  	POP	BC		; Throw away code string addr
    1674/    3A1A : 21 FF 39            	LD	HL,REDO		; "Redo from start" message
    1675/    3A1D : CD 40 40            	CALL	PRS		; Output string
    1676/    3A20 : C3 EF 33            	JP	DOAGN		; Do last INPUT again
    1677/    3A23 :                     ;
    1678/    3A23 : CD AB 3F            INPUT:	CALL	IDTEST		; Test for illegal direct
    1679/    3A26 : 7E                  	LD	A,(HL)		; Get character after "INPUT"
    1680/    3A27 : FE 22               	CP	'"'		; Is there a prompt string?
    1681/    3A29 : 3E 00               	LD	A,0		; Clear A and leave flags
    1682/    3A2B : 32 8A 80            	LD	(CTLOFG),A	; Enable output
    1683/    3A2E : C2 3D 3A            	JP	NZ,NOPMPT	; No prompt - get input
    1684/    3A31 : CD FF 3F            	CALL	QTSTR		; Get string terminated by '"'
    1685/    3A34 : CD 72 35            	CALL	CHKSYN		; Check for ';' after prompt
    1686/    3A37 : 3B                  	DB	';'
    1687/    3A38 : E5                  	PUSH	HL		; Save code string address
    1688/    3A39 : CD 43 40            	CALL	PRS1		; Output prompt string
    1689/    3A3C : 3E                  	DB	3EH		; Skip "PUSH HL"
    1690/    3A3D : E5                  NOPMPT: PUSH	HL		; Save code string address
    1691/    3A3E : CD F3 33            	CALL	PROMPT		; Get input with "? " prompt
    1692/    3A41 : C1                  	POP	BC		; Restore code string address
    1693/    3A42 : DA 49 37            	JP	C,INPBRK	; Break pressed - Exit
    1694/    3A45 : 23                  	INC	HL		; Next byte
    1695/    3A46 : 7E                  	LD	A,(HL)		; Get it
    1696/    3A47 : B7                  	OR	A		; End of line?
    1697/    3A48 : 2B                  	DEC	HL		; Back again
    1698/    3A49 : C5                  	PUSH	BC		; Re-save code string address
    1699/    3A4A : CA 90 38            	JP	Z,NXTDTA	; Yes - Find next DATA stmt
    1700/    3A4D : 36 2C               	LD	(HL),','	; Store comma as separator
    1701/    3A4F : C3 57 3A            	JP	NXTITM		; Get next item
    1702/    3A52 :                     ;
    1703/    3A52 : E5                  READ:	PUSH	HL		; Save code string address
    1704/    3A53 : 2A 21 81            	LD	HL,(NXTDAT)	; Next DATA statement
    1705/    3A56 : F6                  	DB	0F6H		; Flag "READ"
    1706/    3A57 : AF                  NXTITM: XOR	A		; Flag "INPUT"
    1707/    3A58 : 32 12 81            	LD	(READFG),A	; Save "READ"/"INPUT" flag
    1708/    3A5B : E3                  	EX	(SP),HL		; Get code str' , Save pointer
    1709/    3A5C : C3 63 3A            	JP	GTVLUS		; Get values
    1710/    3A5F :                     ;
    1711/    3A5F : CD 72 35            NEDMOR: CALL	CHKSYN		; Check for comma between items
    1712/    3A62 : 2C                  	DB	','
    1713/    3A63 : CD 5D 3D            GTVLUS: CALL	GETVAR		; Get variable name
    1714/    3A66 : E3                  	EX	(SP),HL		; Save code str" , Get pointer
    1715/    3A67 : D5                  	PUSH	DE		; Save variable address
    1716/    3A68 : 7E                  	LD	A,(HL)		; Get next "INPUT"/"DATA" byte
    1717/    3A69 : FE 2C               	CP	','		; Comma?
    1718/    3A6B : CA 8B 3A            	JP	Z,ANTVLU	; Yes - Get another value
    1719/    3A6E : 3A 12 81            	LD	A,(READFG)	; Is it READ?
    1720/    3A71 : B7                  	OR	A
    1721/    3A72 : C2 F8 3A            	JP	NZ,FDTLP	; Yes - Find next DATA stmt
    1722/    3A75 : 3E 3F               	LD	A,'?'		; More INPUT needed
    1723/    3A77 : CD 7D 35            	CALL	OUTC		; Output character
    1724/    3A7A : CD F3 33            	CALL	PROMPT		; Get INPUT with prompt
    1725/    3A7D : D1                  	POP	DE		; Variable address
    1726/    3A7E : C1                  	POP	BC		; Code string address
    1727/    3A7F : DA 49 37            	JP	C,INPBRK	; Break pressed
    1728/    3A82 : 23                  	INC	HL		; Point to next DATA byte
    1729/    3A83 : 7E                  	LD	A,(HL)		; Get byte
    1730/    3A84 : B7                  	OR	A		; Is it zero (No input) ?
    1731/    3A85 : 2B                  	DEC	HL		; Back space INPUT pointer
    1732/    3A86 : C5                  	PUSH	BC		; Save code string address
    1733/    3A87 : CA 90 38            	JP	Z,NXTDTA	; Find end of buffer
    1734/    3A8A : D5                  	PUSH	DE		; Save variable address
    1735/    3A8B : 3A F2 80            ANTVLU: LD	A,(TYPE)	; Check data type
    1736/    3A8E : B7                  	OR	A		; Is it numeric?
    1737/    3A8F : CA B5 3A            	JP	Z,INPBIN	; Yes - Convert to binary
    1738/    3A92 : CD FA 36            	CALL	GETCHR		; Get next character
    1739/    3A95 : 57                  	LD	D,A		; Save input character
    1740/    3A96 : 47                  	LD	B,A		; Again
    1741/    3A97 : FE 22               	CP	'"'		; Start of literal sting?
    1742/    3A99 : CA A9 3A            	JP	Z,STRENT	; Yes - Create string entry
    1743/    3A9C : 3A 12 81            	LD	A,(READFG)	; "READ" or "INPUT" ?
    1744/    3A9F : B7                  	OR	A
    1745/    3AA0 : 57                  	LD	D,A		; Save 00 if "INPUT"
    1746/    3AA1 : CA A6 3A            	JP	Z,ITMSEP	; "INPUT" - End with 00
    1747/    3AA4 : 16 3A               	LD	D,':'		; "DATA" - End with 00 or ':'
    1748/    3AA6 : 06 2C               ITMSEP: LD	B,','		; Item separator
    1749/    3AA8 : 2B                  	DEC	HL		; Back space for DTSTR
    1750/    3AA9 : CD 02 40            STRENT: CALL	DTSTR		; Get string terminated by D
    1751/    3AAC : EB                  	EX	DE,HL		; String address to DE
    1752/    3AAD : 21 C0 3A            	LD	HL,LTSTND	; Where to go after LETSTR
    1753/    3AB0 : E3                  	EX	(SP),HL		; Save HL , get input pointer
    1754/    3AB1 : D5                  	PUSH	DE		; Save address of string
    1755/    3AB2 : C3 C3 38            	JP	LETSTR		; Assign string to variable
    1756/    3AB5 :                     ;
    1757/    3AB5 : CD FA 36            INPBIN: CALL	GETCHR		; Get next character
    1758/    3AB8 : CD 50 46            	CALL	ASCTFP		; Convert ASCII to FP number
    1759/    3ABB : E3                  	EX	(SP),HL		; Save input ptr, Get var addr
    1760/    3ABC : CD A1 45            	CALL	FPTHL		; Move FPREG to variable
    1761/    3ABF : E1                  	POP	HL		; Restore input pointer
    1762/    3AC0 : 2B                  LTSTND: DEC	HL		; DEC 'cos GETCHR INCs
    1763/    3AC1 : CD FA 36            	CALL	GETCHR		; Get next character
    1764/    3AC4 : CA CC 3A            	JP	Z,MORDT		; End of line - More needed?
    1765/    3AC7 : FE 2C               	CP	','		; Another value?
    1766/    3AC9 : C2 12 3A            	JP	NZ,BADINP	; No - Bad input
    1767/    3ACC : E3                  MORDT:	EX	(SP),HL		; Get code string address
    1768/    3ACD : 2B                  	DEC	HL		; DEC 'cos GETCHR INCs
    1769/    3ACE : CD FA 36            	CALL	GETCHR		; Get next character
    1770/    3AD1 : C2 5F 3A            	JP	NZ,NEDMOR	; More needed - Get it
    1771/    3AD4 : D1                  	POP	DE		; Restore DATA pointer
    1772/    3AD5 : 3A 12 81            	LD	A,(READFG)	; "READ" or "INPUT" ?
    1773/    3AD8 : B7                  	OR	A
    1774/    3AD9 : EB                  	EX	DE,HL		; DATA pointer to HL
    1775/    3ADA : C2 20 37            	JP	NZ,UPDATA	; Update DATA pointer if "READ"
    1776/    3ADD : D5                  	PUSH	DE		; Save code string address
    1777/    3ADE : B6                  	OR	(HL)		; More input given?
    1778/    3ADF : 21 E7 3A            	LD	HL,EXTIG	; "?Extra ignored" message
    1779/    3AE2 : C4 40 40            	CALL	NZ,PRS		; Output string if extra given
    1780/    3AE5 : E1                  	POP	HL		; Restore code string address
    1781/    3AE6 : C9                  	RET
    1782/    3AE7 :                     ;
    1783/    3AE7 : 3F 45 78 74 72 61   EXTIG:	DB	"?Extra ignored",CR,LF,0
             3AED : 20 69 67 6E 6F 72 
             3AF3 : 65 64 0D 0A 00    
    1784/    3AF8 :                     ;
    1785/    3AF8 : CD 91 38            FDTLP:	CALL	DATA		; Get next statement
    1786/    3AFB : B7                  	OR	A		; End of line?
    1787/    3AFC : C2 11 3B            	JP	NZ,FANDT	; No - See if DATA statement
    1788/    3AFF : 23                  	INC	HL
    1789/    3B00 : 7E                  	LD	A,(HL)		; End of program?
    1790/    3B01 : 23                  	INC	HL
    1791/    3B02 : B6                  	OR	(HL)		; 00 00 Ends program
    1792/    3B03 : 1E 06               	LD	E,OD		; ?OD Error
    1793/    3B05 : CA B8 32            	JP	Z,ERROR_	; Yes - Out of DATA
    1794/    3B08 : 23                  	INC	HL
    1795/    3B09 : 5E                  	LD	E,(HL)		; LSB of line number
    1796/    3B0A : 23                  	INC	HL
    1797/    3B0B : 56                  	LD	D,(HL)		; MSB of line number
    1798/    3B0C : EB                  	EX	DE,HL
    1799/    3B0D : 22 0E 81            	LD	(DATLIN),HL	; Set line of current DATA item
    1800/    3B10 : EB                  	EX	DE,HL
    1801/    3B11 : CD FA 36            FANDT:	CALL	GETCHR		; Get next character
    1802/    3B14 : FE 83               	CP	ZDATA		; "DATA" token
    1803/    3B16 : C2 F8 3A            	JP	NZ,FDTLP	; No "DATA" - Keep looking
    1804/    3B19 : C3 8B 3A            	JP	ANTVLU		; Found - Convert input
    1805/    3B1C :                     ;
    1806/    3B1C : 11 00 00            NEXT:	LD	DE,0		; In case no index given
    1807/    3B1F : C4 5D 3D            NEXT1:	CALL	NZ,GETVAR	; Get index address
    1808/    3B22 : 22 13 81            	LD	(BRKLIN),HL	; Save code string address
    1809/    3B25 : CD 4D 32            	CALL	BAKSTK		; Look for "FOR" block
    1810/    3B28 : C2 AA 32            	JP	NZ,NFERR	; No "FOR" - ?NF Error
    1811/    3B2B : F9                  	LD	SP,HL		; Clear nested loops
    1812/    3B2C : D5                  	PUSH	DE		; Save index address
    1813/    3B2D : 7E                  	LD	A,(HL)		; Get sign of STEP
    1814/    3B2E : 23                  	INC	HL
    1815/    3B2F : F5                  	PUSH	AF		; Save sign of STEP
    1816/    3B30 : D5                  	PUSH	DE		; Save index address
    1817/    3B31 : CD 87 45            	CALL	PHLTFP		; Move index value to FPREG
    1818/    3B34 : E3                  	EX	(SP),HL		; Save address of TO value
    1819/    3B35 : E5                  	PUSH	HL		; Save address of index
    1820/    3B36 : CD F4 42            	CALL	ADDPHL		; Add STEP to index value
    1821/    3B39 : E1                  	POP	HL		; Restore address of index
    1822/    3B3A : CD A1 45            	CALL	FPTHL		; Move value to index variable
    1823/    3B3D : E1                  	POP	HL		; Restore address of TO value
    1824/    3B3E : CD 98 45            	CALL	LOADFP		; Move TO value to BCDE
    1825/    3B41 : E5                  	PUSH	HL		; Save address of line of FOR
    1826/    3B42 : CD C4 45            	CALL	CMPNUM		; Compare index with TO value
    1827/    3B45 : E1                  	POP	HL		; Restore address of line num
    1828/    3B46 : C1                  	POP	BC		; Address of sign of STEP
    1829/    3B47 : 90                  	SUB	B		; Compare with expected sign
    1830/    3B48 : CD 98 45            	CALL	LOADFP		; BC = Loop stmt,DE = Line num
    1831/    3B4B : CA 57 3B            	JP	Z,KILFOR	; Loop finished - Terminate it
    1832/    3B4E : EB                  	EX	DE,HL		; Loop statement line number
    1833/    3B4F : 22 A1 80            	LD	(LINEAT),HL	; Set loop line number
    1834/    3B52 : 69                  	LD	L,C		; Set code string to loop
    1835/    3B53 : 60                  	LD	H,B
    1836/    3B54 : C3 B6 36            	JP	PUTFID		; Put back "FOR" and continue
    1837/    3B57 :                     ;
    1838/    3B57 : F9                  KILFOR: LD	SP,HL		; Remove "FOR" block
    1839/    3B58 : 2A 13 81            	LD	HL,(BRKLIN)	; Code string after "NEXT"
    1840/    3B5B : 7E                  	LD	A,(HL)		; Get next byte in code string
    1841/    3B5C : FE 2C               	CP	','		; More NEXTs ?
    1842/    3B5E : C2 BA 36            	JP	NZ,RUNCNT	; No - Do next statement
    1843/    3B61 : CD FA 36            	CALL	GETCHR		; Position to index name
    1844/    3B64 : CD 1F 3B            	CALL	NEXT1		; Re-enter NEXT routine
    1845/    3B67 :                     ; < will not RETurn to here , Exit to RUNCNT or Loop >
    1846/    3B67 :                     ;
    1847/    3B67 : CD 79 3B            GETNUM: CALL	EVAL		; Get a numeric expression
    1848/    3B6A : F6                  TSTNUM: DB	0F6H		; Clear carry (numeric)
    1849/    3B6B : 37                  TSTSTR: SCF			; Set carry (string)
    1850/    3B6C : 3A F2 80            CHKTYP: LD	A,(TYPE)	; Check types match
    1851/    3B6F : 8F                  	ADC	A,A		; Expected + actual
    1852/    3B70 : B7                  	OR	A		; Clear carry , set parity
    1853/    3B71 : E8                  	RET	PE		; Even parity - Types match
    1854/    3B72 : C3 B6 32            	JP	TMERR		; Different types - Error
    1855/    3B75 :                     ;
    1856/    3B75 : CD 72 35            OPNPAR: CALL	CHKSYN		; Make sure "(" follows
    1857/    3B78 : 28                  	DB	"("
    1858/    3B79 : 2B                  EVAL:	DEC	HL		; Evaluate expression & save
    1859/    3B7A : 16 00               	LD	D,0		; Precedence value
    1860/    3B7C : D5                  EVAL1:	PUSH	DE		; Save precedence
    1861/    3B7D : 0E 01               	LD	C,1
    1862/    3B7F : CD 81 32            	CALL	CHKSTK		; Check for 1 level of stack
    1863/    3B82 : CD F0 3B            	CALL	OPRND		; Get next expression value
    1864/    3B85 : 22 15 81            EVAL2:	LD	(NXTOPR),HL	; Save address of next operator
    1865/    3B88 : 2A 15 81            EVAL3:	LD	HL,(NXTOPR)	; Restore address of next opr
    1866/    3B8B : C1                  	POP	BC		; Precedence value and operator
    1867/    3B8C : 78                  	LD	A,B		; Get precedence value
    1868/    3B8D : FE 78               	CP	78H		; "AND" or "OR" ?
    1869/    3B8F : D4 6A 3B            	CALL	NC,TSTNUM	; No - Make sure it's a number
    1870/    3B92 : 7E                  	LD	A,(HL)		; Get next operator / function
    1871/    3B93 : 16 00               	LD	D,0		; Clear Last relation
    1872/    3B95 : D6 B3               RLTLP:	SUB	ZGTR		; ">" Token
    1873/    3B97 : DA B1 3B            	JP	C,FOPRND	; + - * / ^ AND OR - Test it
    1874/    3B9A : FE 03               	CP	ZLTH+1-ZGTR	; < = >
    1875/    3B9C : D2 B1 3B            	JP	NC,FOPRND	; Function - Call it
    1876/    3B9F : FE 01               	CP	ZEQUAL-ZGTR	; "="
    1877/    3BA1 : 17                  	RLA			; <- Test for legal
    1878/    3BA2 : AA                  	XOR	D		; <- combinations of < = >
    1879/    3BA3 : BA                  	CP	D		; <- by combining last token
    1880/    3BA4 : 57                  	LD	D,A		; <- with current one
    1881/    3BA5 : DA A4 32            	JP	C,SNERR		; Error if "<<' '==" or ">>"
    1882/    3BA8 : 22 0A 81            	LD	(CUROPR),HL	; Save address of current token
    1883/    3BAB : CD FA 36            	CALL	GETCHR		; Get next character
    1884/    3BAE : C3 95 3B            	JP	RLTLP		; Treat the two as one
    1885/    3BB1 :                     ;
    1886/    3BB1 : 7A                  FOPRND: LD	A,D		; < = > found ?
    1887/    3BB2 : B7                  	OR	A
    1888/    3BB3 : C2 D8 3C            	JP	NZ,TSTRED	; Yes - Test for reduction
    1889/    3BB6 : 7E                  	LD	A,(HL)		; Get operator token
    1890/    3BB7 : 22 0A 81            	LD	(CUROPR),HL	; Save operator address
    1891/    3BBA : D6 AC               	SUB	ZPLUS		; Operator or function?
    1892/    3BBC : D8                  	RET	C		; Neither - Exit
    1893/    3BBD : FE 07               	CP	ZOR+1-ZPLUS	; Is it + - * / ^ AND OR ?
    1894/    3BBF : D0                  	RET	NC		; No - Exit
    1895/    3BC0 : 5F                  	LD	E,A		; Coded operator
    1896/    3BC1 : 3A F2 80            	LD	A,(TYPE)	; Get data type
    1897/    3BC4 : 3D                  	DEC	A		; FF = numeric , 00 = string
    1898/    3BC5 : B3                  	OR	E		; Combine with coded operator
    1899/    3BC6 : 7B                  	LD	A,E		; Get coded operator
    1900/    3BC7 : CA 36 41            	JP	Z,CONCAT	; String concatenation
    1901/    3BCA : 07                  	RLCA			; Times 2
    1902/    3BCB : 83                  	ADD	A,E		; Times 3
    1903/    3BCC : 5F                  	LD	E,A		; To DE (D is 0)
    1904/    3BCD : 21 96 31            	LD	HL,PRITAB	; Precedence table
    1905/    3BD0 : 19                  	ADD	HL,DE		; To the operator concerned
    1906/    3BD1 : 78                  	LD	A,B		; Last operator precedence
    1907/    3BD2 : 56                  	LD	D,(HL)		; Get evaluation precedence
    1908/    3BD3 : BA                  	CP	D		; Compare with eval precedence
    1909/    3BD4 : D0                  	RET	NC		; Exit if higher precedence
    1910/    3BD5 : 23                  	INC	HL		; Point to routine address
    1911/    3BD6 : CD 6A 3B            	CALL	TSTNUM		; Make sure it's a number
    1912/    3BD9 :                     ;
    1913/    3BD9 : C5                  STKTHS: PUSH	BC		; Save last precedence & token
    1914/    3BDA : 01 88 3B            	LD	BC,EVAL3	; Where to go on prec' break
    1915/    3BDD : C5                  	PUSH	BC		; Save on stack for return
    1916/    3BDE : 43                  	LD	B,E		; Save operator
    1917/    3BDF : 4A                  	LD	C,D		; Save precedence
    1918/    3BE0 : CD 7A 45            	CALL	STAKFP		; Move value to stack
    1919/    3BE3 : 58                  	LD	E,B		; Restore operator
    1920/    3BE4 : 51                  	LD	D,C		; Restore precedence
    1921/    3BE5 : 4E                  	LD	C,(HL)		; Get LSB of routine address
    1922/    3BE6 : 23                  	INC	HL
    1923/    3BE7 : 46                  	LD	B,(HL)		; Get MSB of routine address
    1924/    3BE8 : 23                  	INC	HL
    1925/    3BE9 : C5                  	PUSH	BC		; Save routine address
    1926/    3BEA : 2A 0A 81            	LD	HL,(CUROPR)	; Address of current operator
    1927/    3BED : C3 7C 3B            	JP	EVAL1		; Loop until prec' break
    1928/    3BF0 :                     ;
    1929/    3BF0 : AF                  OPRND:	XOR	A		; Get operand routine
    1930/    3BF1 : 32 F2 80            	LD	(TYPE),A	; Set numeric expected
    1931/    3BF4 : CD FA 36            	CALL	GETCHR		; Get next character
    1932/    3BF7 : 1E 24               	LD	E,MO		; ?MO Error
    1933/    3BF9 : CA B8 32            	JP	Z,ERROR_	; No operand - Error
    1934/    3BFC : DA 50 46            	JP	C,ASCTFP	; Number - Get value
    1935/    3BFF : CD 98 37            	CALL	CHKLTR		; See if a letter
    1936/    3C02 : D2 57 3C            	JP	NC,CONVAR	; Letter - Find variable
    1937/    3C05 : FE 26               	CP	'&'		; &H = HEX, &B = BINARY
    1938/    3C07 : 20 12               	JR	NZ, NOTAMP
    1939/    3C09 : CD FA 36            	CALL	GETCHR		; Get next character
    1940/    3C0C : FE 48               	CP	'H'		; Hex number indicated? [function added]
    1941/    3C0E : CA 93 4A            	JP	Z,HEXTFP	; Convert Hex to FPREG
    1942/    3C11 : FE 42               	CP	'B'		; Binary number indicated? [function added]
    1943/    3C13 : CA 03 4B            	JP	Z,BINTFP	; Convert Bin to FPREG
    1944/    3C16 : 1E 02               	LD	E,SN		; If neither then a ?SN Error
    1945/    3C18 : CA B8 32            	JP	Z,ERROR_
    1946/    3C1B : FE AC               NOTAMP: CP	ZPLUS		; '+' Token ?
    1947/    3C1D : CA F0 3B            	JP	Z,OPRND		; Yes - Look for operand
    1948/    3C20 : FE 2E               	CP	'.'		; '.' ?
    1949/    3C22 : CA 50 46            	JP	Z,ASCTFP	; Yes - Create FP number
    1950/    3C25 : FE AD               	CP	ZMINUS		; '-' Token ?
    1951/    3C27 : CA 46 3C            	JP	Z,MINUS		; Yes - Do minus
    1952/    3C2A : FE 22               	CP	'"'		; Literal string ?
    1953/    3C2C : CA FF 3F            	JP	Z,QTSTR		; Get string terminated by '"'
    1954/    3C2F : FE AA               	CP	ZNOT		; "NOT" Token ?
    1955/    3C31 : CA 38 3D            	JP	Z,EVNOT		; Yes - Eval NOT expression
    1956/    3C34 : FE A7               	CP	ZFN		; "FN" Token ?
    1957/    3C36 : CA 63 3F            	JP	Z,DOFN		; Yes - Do FN routine
    1958/    3C39 : D6 B6               	SUB	ZSGN		; Is it a function?
    1959/    3C3B : D2 68 3C            	JP	NC,FNOFST	; Yes - Evaluate function
    1960/    3C3E : CD 75 3B            EVLPAR: CALL	OPNPAR		; Evaluate expression in "()"
    1961/    3C41 : CD 72 35            	CALL	CHKSYN		; Make sure ")" follows
    1962/    3C44 : 29                  	DB	")"
    1963/    3C45 : C9                  	RET
    1964/    3C46 :                     ;
    1965/    3C46 : 16 7D               MINUS:	LD	D,7DH		; '-' precedence
    1966/    3C48 : CD 7C 3B            	CALL	EVAL1		; Evaluate until prec' break
    1967/    3C4B : 2A 15 81            	LD	HL,(NXTOPR)	; Get next operator address
    1968/    3C4E : E5                  	PUSH	HL		; Save next operator address
    1969/    3C4F : CD 72 45            	CALL	INVSGN		; Negate value
    1970/    3C52 : CD 6A 3B            RETNUM: CALL	TSTNUM		; Make sure it's a number
    1971/    3C55 : E1                  	POP	HL		; Restore next operator address
    1972/    3C56 : C9                  	RET
    1973/    3C57 :                     ;
    1974/    3C57 : CD 5D 3D            CONVAR: CALL	GETVAR		; Get variable address to DE
    1975/    3C5A : E5                  FRMEVL: PUSH	HL		; Save code string address
    1976/    3C5B : EB                  	EX	DE,HL		; Variable address to HL
    1977/    3C5C : 22 29 81            	LD	(FPREG),HL	; Save address of variable
    1978/    3C5F : 3A F2 80            	LD	A,(TYPE)	; Get type
    1979/    3C62 : B7                  	OR	A		; Numeric?
    1980/    3C63 : CC 87 45            	CALL	Z,PHLTFP	; Yes - Move contents to FPREG
    1981/    3C66 : E1                  	POP	HL		; Restore code string address
    1982/    3C67 : C9                  	RET
    1983/    3C68 :                     ;
    1984/    3C68 : 06 00               FNOFST: LD	B,0		; Get address of function
    1985/    3C6A : 07                  	RLCA			; Double function offset
    1986/    3C6B : 4F                  	LD	C,A		; BC = Offset in function table
    1987/    3C6C : C5                  	PUSH	BC		; Save adjusted token value
    1988/    3C6D : CD FA 36            	CALL	GETCHR		; Get next character
    1989/    3C70 : 79                  	LD	A,C		; Get adjusted token value
    1990/    3C71 : FE 31               	CP	2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
    1991/    3C73 : DA 8F 3C            	JP	C,FNVAL		; No - Do function
    1992/    3C76 : CD 75 3B            	CALL	OPNPAR		; Evaluate expression	(X,...
    1993/    3C79 : CD 72 35            	CALL	CHKSYN		; Make sure ',' follows
    1994/    3C7C : 2C                  	DB	','
    1995/    3C7D : CD 6B 3B            	CALL	TSTSTR		; Make sure it's a string
    1996/    3C80 : EB                  	EX	DE,HL		; Save code string address
    1997/    3C81 : 2A 29 81            	LD	HL,(FPREG)	; Get address of string
    1998/    3C84 : E3                  	EX	(SP),HL		; Save address of string
    1999/    3C85 : E5                  	PUSH	HL		; Save adjusted token value
    2000/    3C86 : EB                  	EX	DE,HL		; Restore code string address
    2001/    3C87 : CD C8 42            	CALL	GETINT		; Get integer 0-255
    2002/    3C8A : EB                  	EX	DE,HL		; Save code string address
    2003/    3C8B : E3                  	EX	(SP),HL		; Save integer,HL = adj' token
    2004/    3C8C : C3 97 3C            	JP	GOFUNC		; Jump to string function
    2005/    3C8F :                     ;
    2006/    3C8F : CD 3E 3C            FNVAL:	CALL	EVLPAR		; Evaluate expression
    2007/    3C92 : E3                  	EX	(SP),HL		; HL = Adjusted token value
    2008/    3C93 : 11 52 3C            	LD	DE,RETNUM	; Return number from function
    2009/    3C96 : D5                  	PUSH	DE		; Save on stack
    2010/    3C97 : 01 F5 2F            GOFUNC: LD	BC,FNCTAB	; Function routine addresses
    2011/    3C9A : 09                  	ADD	HL,BC		; Point to right address
    2012/    3C9B : 4E                  	LD	C,(HL)		; Get LSB of address
    2013/    3C9C : 23                  	INC	HL		;
    2014/    3C9D : 66                  	LD	H,(HL)		; Get MSB of address
    2015/    3C9E : 69                  	LD	L,C		; Address to HL
    2016/    3C9F : E9                  	JP	(HL)		; Jump to function
    2017/    3CA0 :                     ;
    2018/    3CA0 : 15                  SGNEXP: DEC	D		; Dee to flag negative exponent
    2019/    3CA1 : FE AD               	CP	ZMINUS		; '-' token ?
    2020/    3CA3 : C8                  	RET	Z		; Yes - Return
    2021/    3CA4 : FE 2D               	CP	'-'		; '-' ASCII ?
    2022/    3CA6 : C8                  	RET	Z		; Yes - Return
    2023/    3CA7 : 14                  	INC	D		; Inc to flag positive exponent
    2024/    3CA8 : FE 2B               	CP	'+'		; '+' ASCII ?
    2025/    3CAA : C8                  	RET	Z		; Yes - Return
    2026/    3CAB : FE AC               	CP	ZPLUS		; '+' token ?
    2027/    3CAD : C8                  	RET	Z		; Yes - Return
    2028/    3CAE : 2B                  	DEC	HL		; DEC 'cos GETCHR INCs
    2029/    3CAF : C9                  	RET			; Return "NZ"
    2030/    3CB0 :                     ;
    2031/    3CB0 : F6                  POR:	DB	0F6H		; Flag "OR"
    2032/    3CB1 : AF                  PAND:	XOR	A		; Flag "AND"
    2033/    3CB2 : F5                  	PUSH	AF		; Save "AND" / "OR" flag
    2034/    3CB3 : CD 6A 3B            	CALL	TSTNUM		; Make sure it's a number
    2035/    3CB6 : CD AC 37            	CALL	DEINT		; Get integer -32768 to 32767
    2036/    3CB9 : F1                  	POP	AF		; Restore "AND" / "OR" flag
    2037/    3CBA : EB                  	EX	DE,HL		; <- Get last
    2038/    3CBB : C1                  	POP	BC		; <- value
    2039/    3CBC : E3                  	EX	(SP),HL		; <- from
    2040/    3CBD : EB                  	EX	DE,HL		; <- stack
    2041/    3CBE : CD 8A 45            	CALL	FPBCDE		; Move last value to FPREG
    2042/    3CC1 : F5                  	PUSH	AF		; Save "AND" / "OR" flag
    2043/    3CC2 : CD AC 37            	CALL	DEINT		; Get integer -32768 to 32767
    2044/    3CC5 : F1                  	POP	AF		; Restore "AND" / "OR" flag
    2045/    3CC6 : C1                  	POP	BC		; Get value
    2046/    3CC7 : 79                  	LD	A,C		; Get LSB
    2047/    3CC8 : 21 21 3F            	LD	HL,ACPASS	; Address of save AC as current
    2048/    3CCB : C2 D3 3C            	JP	NZ,POR1		; Jump if OR
    2049/    3CCE : A3                  	AND	E		; "AND" LSBs
    2050/    3CCF : 4F                  	LD	C,A		; Save LSB
    2051/    3CD0 : 78                  	LD	A,B		; Get MBS
    2052/    3CD1 : A2                  	AND	D		; "AND" MSBs
    2053/    3CD2 : E9                  	JP	(HL)		; Save AC as current (ACPASS)
    2054/    3CD3 :                     ;
    2055/    3CD3 : B3                  POR1:	OR	E		; "OR" LSBs
    2056/    3CD4 : 4F                  	LD	C,A		; Save LSB
    2057/    3CD5 : 78                  	LD	A,B		; Get MSB
    2058/    3CD6 : B2                  	OR	D		; "OR" MSBs
    2059/    3CD7 : E9                  	JP	(HL)		; Save AC as current (ACPASS)
    2060/    3CD8 :                     ;
    2061/    3CD8 : 21 EA 3C            TSTRED: LD	HL,CMPLOG	; Logical compare routine
    2062/    3CDB : 3A F2 80            	LD	A,(TYPE)	; Get data type
    2063/    3CDE : 1F                  	RRA			; Carry set = string
    2064/    3CDF : 7A                  	LD	A,D		; Get last precedence value
    2065/    3CE0 : 17                  	RLA			; Times 2 plus carry
    2066/    3CE1 : 5F                  	LD	E,A		; To E
    2067/    3CE2 : 16 64               	LD	D,64H		; Relational precedence
    2068/    3CE4 : 78                  	LD	A,B		; Get current precedence
    2069/    3CE5 : BA                  	CP	D		; Compare with last
    2070/    3CE6 : D0                  	RET	NC		; Eval if last was rel' or log'
    2071/    3CE7 : C3 D9 3B            	JP	STKTHS		; Stack this one and get next
    2072/    3CEA :                     ;
    2073/    3CEA : EC 3C               CMPLOG: DW	CMPLG1		; Compare two values / strings
    2074/    3CEC : 79                  CMPLG1: LD	A,C		; Get data type
    2075/    3CED : B7                  	OR	A
    2076/    3CEE : 1F                  	RRA
    2077/    3CEF : C1                  	POP	BC		; Get last expression to BCDE
    2078/    3CF0 : D1                  	POP	DE
    2079/    3CF1 : F5                  	PUSH	AF		; Save status
    2080/    3CF2 : CD 6C 3B            	CALL	CHKTYP		; Check that types match
    2081/    3CF5 : 21 2E 3D            	LD	HL,CMPRES	; Result to comparison
    2082/    3CF8 : E5                  	PUSH	HL		; Save for RETurn
    2083/    3CF9 : CA C4 45            	JP	Z,CMPNUM	; Compare values if numeric
    2084/    3CFC : AF                  	XOR	A		; Compare two strings
    2085/    3CFD : 32 F2 80            	LD	(TYPE),A	; Set type to numeric
    2086/    3D00 : D5                  	PUSH	DE		; Save string name
    2087/    3D01 : CD 83 41            	CALL	GSTRCU		; Get current string
    2088/    3D04 : 7E                  	LD	A,(HL)		; Get length of string
    2089/    3D05 : 23                  	INC	HL
    2090/    3D06 : 23                  	INC	HL
    2091/    3D07 : 4E                  	LD	C,(HL)		; Get LSB of address
    2092/    3D08 : 23                  	INC	HL
    2093/    3D09 : 46                  	LD	B,(HL)		; Get MSB of address
    2094/    3D0A : D1                  	POP	DE		; Restore string name
    2095/    3D0B : C5                  	PUSH	BC		; Save address of string
    2096/    3D0C : F5                  	PUSH	AF		; Save length of string
    2097/    3D0D : CD 87 41            	CALL	GSTRDE		; Get second string
    2098/    3D10 : CD 98 45            	CALL	LOADFP		; Get address of second string
    2099/    3D13 : F1                  	POP	AF		; Restore length of string 1
    2100/    3D14 : 57                  	LD	D,A		; Length to D
    2101/    3D15 : E1                  	POP	HL		; Restore address of string 1
    2102/    3D16 : 7B                  CMPSTR: LD	A,E		; Bytes of string 2 to do
    2103/    3D17 : B2                  	OR	D		; Bytes of string 1 to do
    2104/    3D18 : C8                  	RET	Z		; Exit if all bytes compared
    2105/    3D19 : 7A                  	LD	A,D		; Get bytes of string 1 to do
    2106/    3D1A : D6 01               	SUB	1
    2107/    3D1C : D8                  	RET	C		; Exit if end of string 1
    2108/    3D1D : AF                  	XOR	A
    2109/    3D1E : BB                  	CP	E		; Bytes of string 2 to do
    2110/    3D1F : 3C                  	INC	A
    2111/    3D20 : D0                  	RET	NC		; Exit if end of string 2
    2112/    3D21 : 15                  	DEC	D		; Count bytes in string 1
    2113/    3D22 : 1D                  	DEC	E		; Count bytes in string 2
    2114/    3D23 : 0A                  	LD	A,(BC)		; Byte in string 2
    2115/    3D24 : BE                  	CP	(HL)		; Compare to byte in string 1
    2116/    3D25 : 23                  	INC	HL		; Move up string 1
    2117/    3D26 : 03                  	INC	BC		; Move up string 2
    2118/    3D27 : CA 16 3D            	JP	Z,CMPSTR	; Same - Try next bytes
    2119/    3D2A : 3F                  	CCF			; Flag difference (">" or "<")
    2120/    3D2B : C3 54 45            	JP	FLGDIF		; "<" gives -1 , ">" gives +1
    2121/    3D2E :                     ;
    2122/    3D2E : 3C                  CMPRES: INC	A		; Increment current value
    2123/    3D2F : 8F                  	ADC	A,A		; Double plus carry
    2124/    3D30 : C1                  	POP	BC		; Get other value
    2125/    3D31 : A0                  	AND	B		; Combine them
    2126/    3D32 : C6 FF               	ADD	A,-1		; Carry set if different
    2127/    3D34 : 9F                  	SBC	A,A		; 00 - Equal , FF - Different
    2128/    3D35 : C3 5B 45            	JP	FLGREL		; Set current value & continue
    2129/    3D38 :                     ;
    2130/    3D38 : 16 5A               EVNOT:	LD	D,5AH		; Precedence value for "NOT"
    2131/    3D3A : CD 7C 3B            	CALL	EVAL1		; Eval until precedence break
    2132/    3D3D : CD 6A 3B            	CALL	TSTNUM		; Make sure it's a number
    2133/    3D40 : CD AC 37            	CALL	DEINT		; Get integer -32768 - 32767
    2134/    3D43 : 7B                  	LD	A,E		; Get LSB
    2135/    3D44 : 2F                  	CPL			; Invert LSB
    2136/    3D45 : 4F                  	LD	C,A		; Save "NOT" of LSB
    2137/    3D46 : 7A                  	LD	A,D		; Get MSB
    2138/    3D47 : 2F                  	CPL			; Invert MSB
    2139/    3D48 : CD 21 3F            	CALL	ACPASS		; Save AC as current
    2140/    3D4B : C1                  	POP	BC		; Clean up stack
    2141/    3D4C : C3 88 3B            	JP	EVAL3		; Continue evaluation
    2142/    3D4F :                     ;
    2143/    3D4F : 2B                  DIMRET: DEC	HL		; DEC 'cos GETCHR INCs
    2144/    3D50 : CD FA 36            	CALL	GETCHR		; Get next character
    2145/    3D53 : C8                  	RET	Z		; End of DIM statement
    2146/    3D54 : CD 72 35            	CALL	CHKSYN		; Make sure ',' follows
    2147/    3D57 : 2C                  	DB	','
    2148/    3D58 : 01 4F 3D            DIM:	LD	BC,DIMRET	; Return to "DIMRET"
    2149/    3D5B : C5                  	PUSH	BC		; Save on stack
    2150/    3D5C : F6                  	DB	0F6H		; Flag "Create" variable
    2151/    3D5D : AF                  GETVAR: XOR	A		; Find variable address,to DE
    2152/    3D5E : 32 F1 80            	LD	(LCRFLG),A	; Set locate / create flag
    2153/    3D61 : 46                  	LD	B,(HL)		; Get First byte of name
    2154/    3D62 : CD 98 37            GTFNAM: CALL	CHKLTR		; See if a letter
    2155/    3D65 : DA A4 32            	JP	C,SNERR		; ?SN Error if not a letter
    2156/    3D68 : AF                  	XOR	A
    2157/    3D69 : 4F                  	LD	C,A		; Clear second byte of name
    2158/    3D6A : 32 F2 80            	LD	(TYPE),A	; Set type to numeric
    2159/    3D6D : CD FA 36            	CALL	GETCHR		; Get next character
    2160/    3D70 : DA 79 3D            	JP	C,SVNAM2	; Numeric - Save in name
    2161/    3D73 : CD 98 37            	CALL	CHKLTR		; See if a letter
    2162/    3D76 : DA 86 3D            	JP	C,CHARTY	; Not a letter - Check type
    2163/    3D79 : 4F                  SVNAM2: LD	C,A		; Save second byte of name
    2164/    3D7A : CD FA 36            ENDNAM: CALL	GETCHR		; Get next character
    2165/    3D7D : DA 7A 3D            	JP	C,ENDNAM	; Numeric - Get another
    2166/    3D80 : CD 98 37            	CALL	CHKLTR		; See if a letter
    2167/    3D83 : D2 7A 3D            	JP	NC,ENDNAM	; Letter - Get another
    2168/    3D86 : D6 24               CHARTY: SUB	'$'		; String variable?
    2169/    3D88 : C2 95 3D            	JP	NZ,NOTSTR	; No - Numeric variable
    2170/    3D8B : 3C                  	INC	A		; A = 1 (string type)
    2171/    3D8C : 32 F2 80            	LD	(TYPE),A	; Set type to string
    2172/    3D8F : 0F                  	RRCA			; A = 80H , Flag for string
    2173/    3D90 : 81                  	ADD	A,C		; 2nd byte of name has bit 7 on
    2174/    3D91 : 4F                  	LD	C,A		; Resave second byte on name
    2175/    3D92 : CD FA 36            	CALL	GETCHR		; Get next character
    2176/    3D95 : 3A 10 81            NOTSTR: LD	A,(FORFLG)	; Array name needed ?
    2177/    3D98 : 3D                  	DEC	A
    2178/    3D99 : CA 42 3E            	JP	Z,ARLDSV	; Yes - Get array name
    2179/    3D9C : F2 A5 3D            	JP	P,NSCFOR	; No array with "FOR" or "FN"
    2180/    3D9F : 7E                  	LD	A,(HL)		; Get byte again
    2181/    3DA0 : D6 28               	SUB	'('		; Subscripted variable?
    2182/    3DA2 : CA 1A 3E            	JP	Z,SBSCPT	; Yes - Sort out subscript
    2183/    3DA5 :                     ;
    2184/    3DA5 : AF                  NSCFOR: XOR	A		; Simple variable
    2185/    3DA6 : 32 10 81            	LD	(FORFLG),A	; Clear "FOR" flag
    2186/    3DA9 : E5                  	PUSH	HL		; Save code string address
    2187/    3DAA : 50                  	LD	D,B		; DE = Variable name to find
    2188/    3DAB : 59                  	LD	E,C
    2189/    3DAC : 2A 23 81            	LD	HL,(FNRGNM)	; FN argument name
    2190/    3DAF : CD 6C 35            	CALL	CPDEHL		; Is it the FN argument?
    2191/    3DB2 : 11 25 81            	LD	DE,FNARG	; Point to argument value
    2192/    3DB5 : CA 8A 44            	JP	Z,POPHRT	; Yes - Return FN argument value
    2193/    3DB8 : 2A 1D 81            	LD	HL,(VAREND)	; End of variables
    2194/    3DBB : EB                  	EX	DE,HL		; Address of end of search
    2195/    3DBC : 2A 1B 81            	LD	HL,(PROGND)	; Start of variables address
    2196/    3DBF : CD 6C 35            FNDVAR: CALL	CPDEHL		; End of variable list table?
    2197/    3DC2 : CA D8 3D            	JP	Z,CFEVAL	; Yes - Called from EVAL?
    2198/    3DC5 : 79                  	LD	A,C		; Get second byte of name
    2199/    3DC6 : 96                  	SUB	(HL)		; Compare with name in list
    2200/    3DC7 : 23                  	INC	HL		; Move on to first byte
    2201/    3DC8 : C2 CD 3D            	JP	NZ,FNTHR	; Different - Find another
    2202/    3DCB : 78                  	LD	A,B		; Get first byte of name
    2203/    3DCC : 96                  	SUB	(HL)		; Compare with name in list
    2204/    3DCD : 23                  FNTHR:	INC	HL		; Move on to LSB of value
    2205/    3DCE : CA 0C 3E            	JP	Z,RETADR	; Found - Return address
    2206/    3DD1 : 23                  	INC	HL		; <- Skip
    2207/    3DD2 : 23                  	INC	HL		; <- over
    2208/    3DD3 : 23                  	INC	HL		; <- F.P.
    2209/    3DD4 : 23                  	INC	HL		; <- value
    2210/    3DD5 : C3 BF 3D            	JP	FNDVAR		; Keep looking
    2211/    3DD8 :                     ;
    2212/    3DD8 : E1                  CFEVAL: POP	HL		; Restore code string address
    2213/    3DD9 : E3                  	EX	(SP),HL		; Get return address
    2214/    3DDA : D5                  	PUSH	DE		; Save address of variable
    2215/    3DDB : 11 5A 3C            	LD	DE,FRMEVL	; Return address in EVAL
    2216/    3DDE : CD 6C 35            	CALL	CPDEHL		; Called from EVAL ?
    2217/    3DE1 : D1                  	POP	DE		; Restore address of variable
    2218/    3DE2 : CA 0F 3E            	JP	Z,RETNUL	; Yes - Return null variable
    2219/    3DE5 : E3                  	EX	(SP),HL		; Put back return
    2220/    3DE6 : E5                  	PUSH	HL		; Save code string address
    2221/    3DE7 : C5                  	PUSH	BC		; Save variable name
    2222/    3DE8 : 01 06 00            	LD	BC,6		; 2 byte name plus 4 byte data
    2223/    3DEB : 2A 1F 81            	LD	HL,(ARREND)	; End of arrays
    2224/    3DEE : E5                  	PUSH	HL		; Save end of arrays
    2225/    3DEF : 09                  	ADD	HL,BC		; Move up 6 bytes
    2226/    3DF0 : C1                  	POP	BC		; Source address in BC
    2227/    3DF1 : E5                  	PUSH	HL		; Save new end address
    2228/    3DF2 : CD 70 32            	CALL	MOVUP		; Move arrays up
    2229/    3DF5 : E1                  	POP	HL		; Restore new end address
    2230/    3DF6 : 22 1F 81            	LD	(ARREND),HL	; Set new end address
    2231/    3DF9 : 60                  	LD	H,B		; End of variables to HL
    2232/    3DFA : 69                  	LD	L,C
    2233/    3DFB : 22 1D 81            	LD	(VAREND),HL	; Set new end address
    2234/    3DFE :                     ;
    2235/    3DFE : 2B                  ZEROLP: DEC	HL		; Back through to zero variable
    2236/    3DFF : 36 00               	LD	(HL),0		; Zero byte in variable
    2237/    3E01 : CD 6C 35            	CALL	CPDEHL		; Done them all?
    2238/    3E04 : C2 FE 3D            	JP	NZ,ZEROLP	; No - Keep on going
    2239/    3E07 : D1                  	POP	DE		; Get variable name
    2240/    3E08 : 73                  	LD	(HL),E		; Store second character
    2241/    3E09 : 23                  	INC	HL
    2242/    3E0A : 72                  	LD	(HL),D		; Store first character
    2243/    3E0B : 23                  	INC	HL
    2244/    3E0C : EB                  RETADR: EX	DE,HL		; Address of variable in DE
    2245/    3E0D : E1                  	POP	HL		; Restore code string address
    2246/    3E0E : C9                  	RET
    2247/    3E0F :                     ;
    2248/    3E0F : 32 2C 81            RETNUL: LD	(FPEXP),A	; Set result to zero
    2249/    3E12 : 21 40 32            	LD	HL,ZERBYT	; Also set a null string
    2250/    3E15 : 22 29 81            	LD	(FPREG),HL	; Save for EVAL
    2251/    3E18 : E1                  	POP	HL		; Restore code string address
    2252/    3E19 : C9                  	RET
    2253/    3E1A :                     ;
    2254/    3E1A : E5                  SBSCPT: PUSH	HL		; Save code string address
    2255/    3E1B : 2A F1 80            	LD	HL,(LCRFLG)	; Locate/Create and Type
    2256/    3E1E : E3                  	EX	(SP),HL		; Save and get code string
    2257/    3E1F : 57                  	LD	D,A		; Zero number of dimensions
    2258/    3E20 : D5                  SCPTLP: PUSH	DE		; Save number of dimensions
    2259/    3E21 : C5                  	PUSH	BC		; Save array name
    2260/    3E22 : CD A0 37            	CALL	FPSINT		; Get subscript (0-32767)
    2261/    3E25 : C1                  	POP	BC		; Restore array name
    2262/    3E26 : F1                  	POP	AF		; Get number of dimensions
    2263/    3E27 : EB                  	EX	DE,HL
    2264/    3E28 : E3                  	EX	(SP),HL		; Save subscript value
    2265/    3E29 : E5                  	PUSH	HL		; Save LCRFLG and TYPE
    2266/    3E2A : EB                  	EX	DE,HL
    2267/    3E2B : 3C                  	INC	A		; Count dimensions
    2268/    3E2C : 57                  	LD	D,A		; Save in D
    2269/    3E2D : 7E                  	LD	A,(HL)		; Get next byte in code string
    2270/    3E2E : FE 2C               	CP	','		; Comma (more to come)?
    2271/    3E30 : CA 20 3E            	JP	Z,SCPTLP	; Yes - More subscripts
    2272/    3E33 : CD 72 35            	CALL	CHKSYN		; Make sure ")" follows
    2273/    3E36 : 29                  	DB	")"
    2274/    3E37 : 22 15 81            	LD	(NXTOPR),HL	; Save code string address
    2275/    3E3A : E1                  	POP	HL		; Get LCRFLG and TYPE
    2276/    3E3B : 22 F1 80            	LD	(LCRFLG),HL	; Restore Locate/create & type
    2277/    3E3E : 1E 00               	LD	E,0		; Flag not CSAVE* or CLOAD*
    2278/    3E40 : D5                  	PUSH	DE		; Save number of dimensions (D)
    2279/    3E41 : 11                  	DB	11H		; Skip "PUSH HL" and "PUSH AF'
    2280/    3E42 :                     ;
    2281/    3E42 : E5                  ARLDSV: PUSH	HL		; Save code string address
    2282/    3E43 : F5                  	PUSH	AF		; A = 00 , Flags set = Z,N
    2283/    3E44 : 2A 1D 81            	LD	HL,(VAREND)	; Start of arrays
    2284/    3E47 : 3E                  	DB	3EH		; Skip "ADD HL,DE"
    2285/    3E48 : 19                  FNDARY: ADD	HL,DE		; Move to next array start
    2286/    3E49 : EB                  	EX	DE,HL
    2287/    3E4A : 2A 1F 81            	LD	HL,(ARREND)	; End of arrays
    2288/    3E4D : EB                  	EX	DE,HL		; Current array pointer
    2289/    3E4E : CD 6C 35            	CALL	CPDEHL		; End of arrays found?
    2290/    3E51 : CA 7A 3E            	JP	Z,CREARY	; Yes - Create array
    2291/    3E54 : 7E                  	LD	A,(HL)		; Get second byte of name
    2292/    3E55 : B9                  	CP	C		; Compare with name given
    2293/    3E56 : 23                  	INC	HL		; Move on
    2294/    3E57 : C2 5C 3E            	JP	NZ,NXTARY	; Different - Find next array
    2295/    3E5A : 7E                  	LD	A,(HL)		; Get first byte of name
    2296/    3E5B : B8                  	CP	B		; Compare with name given
    2297/    3E5C : 23                  NXTARY: INC	HL		; Move on
    2298/    3E5D : 5E                  	LD	E,(HL)		; Get LSB of next array address
    2299/    3E5E : 23                  	INC	HL
    2300/    3E5F : 56                  	LD	D,(HL)		; Get MSB of next array address
    2301/    3E60 : 23                  	INC	HL
    2302/    3E61 : C2 48 3E            	JP	NZ,FNDARY	; Not found - Keep looking
    2303/    3E64 : 3A F1 80            	LD	A,(LCRFLG)	; Found Locate or Create it?
    2304/    3E67 : B7                  	OR	A
    2305/    3E68 : C2 AD 32            	JP	NZ,DDERR	; Create - ?DD Error
    2306/    3E6B : F1                  	POP	AF		; Locate - Get number of dim'ns
    2307/    3E6C : 44                  	LD	B,H		; BC Points to array dim'ns
    2308/    3E6D : 4D                  	LD	C,L
    2309/    3E6E : CA 8A 44            	JP	Z,POPHRT	; Jump if array load/save
    2310/    3E71 : 96                  	SUB	(HL)		; Same number of dimensions?
    2311/    3E72 : CA D8 3E            	JP	Z,FINDEL	; Yes - Find element
    2312/    3E75 : 1E 10               BSERR:	LD	E,BS		; ?BS Error
    2313/    3E77 : C3 B8 32            	JP	ERROR_		; Output error
    2314/    3E7A :                     ;
    2315/    3E7A : 11 04 00            CREARY: LD	DE,4		; 4 Bytes per entry
    2316/    3E7D : F1                  	POP	AF		; Array to save or 0 dim'ns?
    2317/    3E7E : CA C1 37            	JP	Z,FCERR		; Yes - ?FC Error
    2318/    3E81 : 71                  	LD	(HL),C		; Save second byte of name
    2319/    3E82 : 23                  	INC	HL
    2320/    3E83 : 70                  	LD	(HL),B		; Save first byte of name
    2321/    3E84 : 23                  	INC	HL
    2322/    3E85 : 4F                  	LD	C,A		; Number of dimensions to C
    2323/    3E86 : CD 81 32            	CALL	CHKSTK		; Check if enough memory
    2324/    3E89 : 23                  	INC	HL		; Point to number of dimensions
    2325/    3E8A : 23                  	INC	HL
    2326/    3E8B : 22 0A 81            	LD	(CUROPR),HL	; Save address of pointer
    2327/    3E8E : 71                  	LD	(HL),C		; Set number of dimensions
    2328/    3E8F : 23                  	INC	HL
    2329/    3E90 : 3A F1 80            	LD	A,(LCRFLG)	; Locate of Create?
    2330/    3E93 : 17                  	RLA			; Carry set = Create
    2331/    3E94 : 79                  	LD	A,C		; Get number of dimensions
    2332/    3E95 : 01 0B 00            CRARLP: LD	BC,10+1		; Default dimension size 10
    2333/    3E98 : D2 9D 3E            	JP	NC,DEFSIZ	; Locate - Set default size
    2334/    3E9B : C1                  	POP	BC		; Get specified dimension size
    2335/    3E9C : 03                  	INC	BC		; Include zero element
    2336/    3E9D : 71                  DEFSIZ: LD	(HL),C		; Save LSB of dimension size
    2337/    3E9E : 23                  	INC	HL
    2338/    3E9F : 70                  	LD	(HL),B		; Save MSB of dimension size
    2339/    3EA0 : 23                  	INC	HL
    2340/    3EA1 : F5                  	PUSH	AF		; Save num' of dim'ns an status
    2341/    3EA2 : E5                  	PUSH	HL		; Save address of dim'n size
    2342/    3EA3 : CD 35 46            	CALL	MLDEBC		; Multiply DE by BC to find
    2343/    3EA6 : EB                  	EX	DE,HL		; amount of mem needed (to DE)
    2344/    3EA7 : E1                  	POP	HL		; Restore address of dimension
    2345/    3EA8 : F1                  	POP	AF		; Restore number of dimensions
    2346/    3EA9 : 3D                  	DEC	A		; Count them
    2347/    3EAA : C2 95 3E            	JP	NZ,CRARLP	; Do next dimension if more
    2348/    3EAD : F5                  	PUSH	AF		; Save locate/create flag
    2349/    3EAE : 42                  	LD	B,D		; MSB of memory needed
    2350/    3EAF : 4B                  	LD	C,E		; LSB of memory needed
    2351/    3EB0 : EB                  	EX	DE,HL
    2352/    3EB1 : 19                  	ADD	HL,DE		; Add bytes to array start
    2353/    3EB2 : DA 99 32            	JP	C,OMERR		; Too big - Error
    2354/    3EB5 : CD 8A 32            	CALL	ENFMEM		; See if enough memory
    2355/    3EB8 : 22 1F 81            	LD	(ARREND),HL	; Save new end of array
    2356/    3EBB :                     ;
    2357/    3EBB : 2B                  ZERARY: DEC	HL		; Back through array data
    2358/    3EBC : 36 00               	LD	(HL),0		; Set array element to zero
    2359/    3EBE : CD 6C 35            	CALL	CPDEHL		; All elements zeroed?
    2360/    3EC1 : C2 BB 3E            	JP	NZ,ZERARY	; No - Keep on going
    2361/    3EC4 : 03                  	INC	BC		; Number of bytes + 1
    2362/    3EC5 : 57                  	LD	D,A		; A=0
    2363/    3EC6 : 2A 0A 81            	LD	HL,(CUROPR)	; Get address of array
    2364/    3EC9 : 5E                  	LD	E,(HL)		; Number of dimensions
    2365/    3ECA : EB                  	EX	DE,HL		; To HL
    2366/    3ECB : 29                  	ADD	HL,HL		; Two bytes per dimension size
    2367/    3ECC : 09                  	ADD	HL,BC		; Add number of bytes
    2368/    3ECD : EB                  	EX	DE,HL		; Bytes needed to DE
    2369/    3ECE : 2B                  	DEC	HL
    2370/    3ECF : 2B                  	DEC	HL
    2371/    3ED0 : 73                  	LD	(HL),E		; Save LSB of bytes needed
    2372/    3ED1 : 23                  	INC	HL
    2373/    3ED2 : 72                  	LD	(HL),D		; Save MSB of bytes needed
    2374/    3ED3 : 23                  	INC	HL
    2375/    3ED4 : F1                  	POP	AF		; Locate / Create?
    2376/    3ED5 : DA FC 3E            	JP	C,ENDDIM	; A is 0 , End if create
    2377/    3ED8 : 47                  FINDEL: LD	B,A		; Find array element
    2378/    3ED9 : 4F                  	LD	C,A
    2379/    3EDA : 7E                  	LD	A,(HL)		; Number of dimensions
    2380/    3EDB : 23                  	INC	HL
    2381/    3EDC : 16                  	DB	16H		; Skip "POP HL"
    2382/    3EDD : E1                  FNDELP: POP	HL		; Address of next dim' size
    2383/    3EDE : 5E                  	LD	E,(HL)		; Get LSB of dim'n size
    2384/    3EDF : 23                  	INC	HL
    2385/    3EE0 : 56                  	LD	D,(HL)		; Get MSB of dim'n size
    2386/    3EE1 : 23                  	INC	HL
    2387/    3EE2 : E3                  	EX	(SP),HL		; Save address - Get index
    2388/    3EE3 : F5                  	PUSH	AF		; Save number of dim'ns
    2389/    3EE4 : CD 6C 35            	CALL	CPDEHL		; Dimension too large?
    2390/    3EE7 : D2 75 3E            	JP	NC,BSERR	; Yes - ?BS Error
    2391/    3EEA : E5                  	PUSH	HL		; Save index
    2392/    3EEB : CD 35 46            	CALL	MLDEBC		; Multiply previous by size
    2393/    3EEE : D1                  	POP	DE		; Index supplied to DE
    2394/    3EEF : 19                  	ADD	HL,DE		; Add index to pointer
    2395/    3EF0 : F1                  	POP	AF		; Number of dimensions
    2396/    3EF1 : 3D                  	DEC	A		; Count them
    2397/    3EF2 : 44                  	LD	B,H		; MSB of pointer
    2398/    3EF3 : 4D                  	LD	C,L		; LSB of pointer
    2399/    3EF4 : C2 DD 3E            	JP	NZ,FNDELP	; More - Keep going
    2400/    3EF7 : 29                  	ADD	HL,HL		; 4 Bytes per element
    2401/    3EF8 : 29                  	ADD	HL,HL
    2402/    3EF9 : C1                  	POP	BC		; Start of array
    2403/    3EFA : 09                  	ADD	HL,BC		; Point to element
    2404/    3EFB : EB                  	EX	DE,HL		; Address of element to DE
    2405/    3EFC : 2A 15 81            ENDDIM: LD	HL,(NXTOPR)	; Got code string address
    2406/    3EFF : C9                  	RET
    2407/    3F00 :                     ;
    2408/    3F00 : 2A 1F 81            FRE:	LD	HL,(ARREND)	; Start of free memory
    2409/    3F03 : EB                  	EX	DE,HL		; To DE
    2410/    3F04 : 21 00 00            	LD	HL,0		; End of free memory
    2411/    3F07 : 39                  	ADD	HL,SP		; Current stack value
    2412/    3F08 : 3A F2 80            	LD	A,(TYPE)	; Dummy argument type
    2413/    3F0B : B7                  	OR	A
    2414/    3F0C : CA 1C 3F            	JP	Z,FRENUM	; Numeric - Free variable space
    2415/    3F0F : CD 83 41            	CALL	GSTRCU		; Current string to pool
    2416/    3F12 : CD 83 40            	CALL	GARBGE		; Garbage collection
    2417/    3F15 : 2A 9F 80            	LD	HL,(STRSPC)	; Bottom of string space in use
    2418/    3F18 : EB                  	EX	DE,HL		; To DE
    2419/    3F19 : 2A 08 81            	LD	HL,(STRBOT)	; Bottom of string space
    2420/    3F1C : 7D                  FRENUM: LD	A,L		; Get LSB of end
    2421/    3F1D : 93                  	SUB	E		; Subtract LSB of beginning
    2422/    3F1E : 4F                  	LD	C,A		; Save difference if C
    2423/    3F1F : 7C                  	LD	A,H		; Get MSB of end
    2424/    3F20 : 9A                  	SBC	A,D		; Subtract MSB of beginning
    2425/    3F21 : 41                  ACPASS: LD	B,C		; Return integer AC
    2426/    3F22 : 50                  ABPASS: LD	D,B		; Return integer AB
    2427/    3F23 : 1E 00               	LD	E,0
    2428/    3F25 : 21 F2 80            	LD	HL,TYPE		; Point to type
    2429/    3F28 : 73                  	LD	(HL),E		; Set type to numeric
    2430/    3F29 : 06 90               	LD	B,80H+16	; 16 bit integer
    2431/    3F2B : C3 60 45            	JP	RETINT		; Return the integr
    2432/    3F2E :                     ;
    2433/    3F2E : 3A F0 80            POS:	LD	A,(CURPOS)	; Get cursor position
    2434/    3F31 : 47                  PASSA:	LD	B,A		; Put A into AB
    2435/    3F32 : AF                  	XOR	A		; Zero A
    2436/    3F33 : C3 22 3F            	JP	ABPASS		; Return integer AB
    2437/    3F36 :                     ;
    2438/    3F36 : CD B9 3F            DEF:	CALL	CHEKFN		; Get "FN" and name
    2439/    3F39 : CD AB 3F            	CALL	IDTEST		; Test for illegal direct
    2440/    3F3C : 01 91 38            	LD	BC,DATA		; To get next statement
    2441/    3F3F : C5                  	PUSH	BC		; Save address for RETurn
    2442/    3F40 : D5                  	PUSH	DE		; Save address of function ptr
    2443/    3F41 : CD 72 35            	CALL	CHKSYN		; Make sure "(" follows
    2444/    3F44 : 28                  	DB	"("
    2445/    3F45 : CD 5D 3D            	CALL	GETVAR		; Get argument variable name
    2446/    3F48 : E5                  	PUSH	HL		; Save code string address
    2447/    3F49 : EB                  	EX	DE,HL		; Argument address to HL
    2448/    3F4A : 2B                  	DEC	HL
    2449/    3F4B : 56                  	LD	D,(HL)		; Get first byte of arg name
    2450/    3F4C : 2B                  	DEC	HL
    2451/    3F4D : 5E                  	LD	E,(HL)		; Get second byte of arg name
    2452/    3F4E : E1                  	POP	HL		; Restore code string address
    2453/    3F4F : CD 6A 3B            	CALL	TSTNUM		; Make sure numeric argument
    2454/    3F52 : CD 72 35            	CALL	CHKSYN		; Make sure ")" follows
    2455/    3F55 : 29                  	DB	")"
    2456/    3F56 : CD 72 35            	CALL	CHKSYN		; Make sure "=" follows
    2457/    3F59 : B4                  	DB	ZEQUAL		; "=" token
    2458/    3F5A : 44                  	LD	B,H		; Code string address to BC
    2459/    3F5B : 4D                  	LD	C,L
    2460/    3F5C : E3                  	EX	(SP),HL		; Save code str , Get FN ptr
    2461/    3F5D : 71                  	LD	(HL),C		; Save LSB of FN code string
    2462/    3F5E : 23                  	INC	HL
    2463/    3F5F : 70                  	LD	(HL),B		; Save MSB of FN code string
    2464/    3F60 : C3 F8 3F            	JP	SVSTAD		; Save address and do function
    2465/    3F63 :                     ;
    2466/    3F63 : CD B9 3F            DOFN:	CALL	CHEKFN		; Make sure FN follows
    2467/    3F66 : D5                  	PUSH	DE		; Save function pointer address
    2468/    3F67 : CD 3E 3C            	CALL	EVLPAR		; Evaluate expression in "()"
    2469/    3F6A : CD 6A 3B            	CALL	TSTNUM		; Make sure numeric result
    2470/    3F6D : E3                  	EX	(SP),HL		; Save code str , Get FN ptr
    2471/    3F6E : 5E                  	LD	E,(HL)		; Get LSB of FN code string
    2472/    3F6F : 23                  	INC	HL
    2473/    3F70 : 56                  	LD	D,(HL)		; Get MSB of FN code string
    2474/    3F71 : 23                  	INC	HL
    2475/    3F72 : 7A                  	LD	A,D		; And function DEFined?
    2476/    3F73 : B3                  	OR	E
    2477/    3F74 : CA B0 32            	JP	Z,UFERR		; No - ?UF Error
    2478/    3F77 : 7E                  	LD	A,(HL)		; Get LSB of argument address
    2479/    3F78 : 23                  	INC	HL
    2480/    3F79 : 66                  	LD	H,(HL)		; Get MSB of argument address
    2481/    3F7A : 6F                  	LD	L,A		; HL = Arg variable address
    2482/    3F7B : E5                  	PUSH	HL		; Save it
    2483/    3F7C : 2A 23 81            	LD	HL,(FNRGNM)	; Get old argument name
    2484/    3F7F : E3                  	EX	(SP),HL;	; Save old , Get new
    2485/    3F80 : 22 23 81            	LD	(FNRGNM),HL	; Set new argument name
    2486/    3F83 : 2A 27 81            	LD	HL,(FNARG+2)	; Get LSB,NLSB of old arg value
    2487/    3F86 : E5                  	PUSH	HL		; Save it
    2488/    3F87 : 2A 25 81            	LD	HL,(FNARG)	; Get MSB,EXP of old arg value
    2489/    3F8A : E5                  	PUSH	HL		; Save it
    2490/    3F8B : 21 25 81            	LD	HL,FNARG	; HL = Value of argument
    2491/    3F8E : D5                  	PUSH	DE		; Save FN code string address
    2492/    3F8F : CD A1 45            	CALL	FPTHL		; Move FPREG to argument
    2493/    3F92 : E1                  	POP	HL		; Get FN code string address
    2494/    3F93 : CD 67 3B            	CALL	GETNUM		; Get value from function
    2495/    3F96 : 2B                  	DEC	HL		; DEC 'cos GETCHR INCs
    2496/    3F97 : CD FA 36            	CALL	GETCHR		; Get next character
    2497/    3F9A : C2 A4 32            	JP	NZ,SNERR	; Bad character in FN - Error
    2498/    3F9D : E1                  	POP	HL		; Get MSB,EXP of old arg
    2499/    3F9E : 22 25 81            	LD	(FNARG),HL	; Restore it
    2500/    3FA1 : E1                  	POP	HL		; Get LSB,NLSB of old arg
    2501/    3FA2 : 22 27 81            	LD	(FNARG+2),HL	; Restore it
    2502/    3FA5 : E1                  	POP	HL		; Get name of old arg
    2503/    3FA6 : 22 23 81            	LD	(FNRGNM),HL	; Restore it
    2504/    3FA9 : E1                  	POP	HL		; Restore code string address
    2505/    3FAA : C9                  	RET
    2506/    3FAB :                     ;
    2507/    3FAB : E5                  IDTEST: PUSH	HL		; Save code string address
    2508/    3FAC : 2A A1 80            	LD	HL,(LINEAT)	; Get current line number
    2509/    3FAF : 23                  	INC	HL		; -1 means direct statement
    2510/    3FB0 : 7C                  	LD	A,H
    2511/    3FB1 : B5                  	OR	L
    2512/    3FB2 : E1                  	POP	HL		; Restore code string address
    2513/    3FB3 : C0                  	RET	NZ		; Return if in program
    2514/    3FB4 : 1E 16               	LD	E,ID		; ?ID Error
    2515/    3FB6 : C3 B8 32            	JP	ERROR_
    2516/    3FB9 :                     ;
    2517/    3FB9 : CD 72 35            CHEKFN: CALL	CHKSYN		; Make sure FN follows
    2518/    3FBC : A7                  	DB	ZFN		; "FN" token
    2519/    3FBD : 3E 80               	LD	A,80H
    2520/    3FBF : 32 10 81            	LD	(FORFLG),A	; Flag FN name to find
    2521/    3FC2 : B6                  	OR	(HL)		; FN name has bit 7 set
    2522/    3FC3 : 47                  	LD	B,A		; in first byte of name
    2523/    3FC4 : CD 62 3D            	CALL	GTFNAM		; Get FN name
    2524/    3FC7 : C3 6A 3B            	JP	TSTNUM		; Make sure numeric function
    2525/    3FCA :                     ;
    2526/    3FCA : CD 6A 3B            STR:	CALL	TSTNUM		; Make sure it's a number
    2527/    3FCD : CD EE 46            	CALL	NUMASC		; Turn number into text
    2528/    3FD0 : CD FE 3F            STR1:	CALL	CRTST		; Create string entry for it
    2529/    3FD3 : CD 83 41            	CALL	GSTRCU		; Current string to pool
    2530/    3FD6 : 01 DE 41            	LD	BC,TOPOOL	; Save in string pool
    2531/    3FD9 : C5                  	PUSH	BC		; Save address on stack
    2532/    3FDA :                     ;
    2533/    3FDA : 7E                  SAVSTR: LD	A,(HL)		; Get string length
    2534/    3FDB : 23                  	INC	HL
    2535/    3FDC : 23                  	INC	HL
    2536/    3FDD : E5                  	PUSH	HL		; Save pointer to string
    2537/    3FDE : CD 59 40            	CALL	TESTR		; See if enough string space
    2538/    3FE1 : E1                  	POP	HL		; Restore pointer to string
    2539/    3FE2 : 4E                  	LD	C,(HL)		; Get LSB of address
    2540/    3FE3 : 23                  	INC	HL
    2541/    3FE4 : 46                  	LD	B,(HL)		; Get MSB of address
    2542/    3FE5 : CD F2 3F            	CALL	CRTMST		; Create string entry
    2543/    3FE8 : E5                  	PUSH	HL		; Save pointer to MSB of addr
    2544/    3FE9 : 6F                  	LD	L,A		; Length of string
    2545/    3FEA : CD 76 41            	CALL	TOSTRA		; Move to string area
    2546/    3FED : D1                  	POP	DE		; Restore pointer to MSB
    2547/    3FEE : C9                  	RET
    2548/    3FEF :                     ;
    2549/    3FEF : CD 59 40            MKTMST: CALL	TESTR		; See if enough string space
    2550/    3FF2 : 21 04 81            CRTMST: LD	HL,TMPSTR	; Temporary string
    2551/    3FF5 : E5                  	PUSH	HL		; Save it
    2552/    3FF6 : 77                  	LD	(HL),A		; Save length of string
    2553/    3FF7 : 23                  	INC	HL
    2554/    3FF8 : 23                  SVSTAD: INC	HL
    2555/    3FF9 : 73                  	LD	(HL),E		; Save LSB of address
    2556/    3FFA : 23                  	INC	HL
    2557/    3FFB : 72                  	LD	(HL),D		; Save MSB of address
    2558/    3FFC : E1                  	POP	HL		; Restore pointer
    2559/    3FFD : C9                  	RET
    2560/    3FFE :                     ;
    2561/    3FFE : 2B                  CRTST:	DEC	HL		; DEC - INCed after
    2562/    3FFF : 06 22               QTSTR:	LD	B,'"'		; Terminating quote
    2563/    4001 : 50                  	LD	D,B		; Quote to D
    2564/    4002 : E5                  DTSTR:	PUSH	HL		; Save start
    2565/    4003 : 0E FF               	LD	C,-1		; Set counter to -1
    2566/    4005 : 23                  QTSTLP: INC	HL		; Move on
    2567/    4006 : 7E                  	LD	A,(HL)		; Get byte
    2568/    4007 : 0C                  	INC	C		; Count bytes
    2569/    4008 : B7                  	OR	A		; End of line?
    2570/    4009 : CA 14 40            	JP	Z,CRTSTE	; Yes - Create string entry
    2571/    400C : BA                  	CP	D		; Terminator D found?
    2572/    400D : CA 14 40            	JP	Z,CRTSTE	; Yes - Create string entry
    2573/    4010 : B8                  	CP	B		; Terminator B found?
    2574/    4011 : C2 05 40            	JP	NZ,QTSTLP	; No - Keep looking
    2575/    4014 : FE 22               CRTSTE: CP	'"'		; End with '"'?
    2576/    4016 : CC FA 36            	CALL	Z,GETCHR	; Yes - Get next character
    2577/    4019 : E3                  	EX	(SP),HL		; Starting quote
    2578/    401A : 23                  	INC	HL		; First byte of string
    2579/    401B : EB                  	EX	DE,HL		; To DE
    2580/    401C : 79                  	LD	A,C		; Get length
    2581/    401D : CD F2 3F            	CALL	CRTMST		; Create string entry
    2582/    4020 : 11 04 81            TSTOPL: LD	DE,TMPSTR	; Temporary string
    2583/    4023 : 2A F6 80            	LD	HL,(TMSTPT)	; Temporary string pool pointer
    2584/    4026 : 22 29 81            	LD	(FPREG),HL	; Save address of string ptr
    2585/    4029 : 3E 01               	LD	A,1
    2586/    402B : 32 F2 80            	LD	(TYPE),A	; Set type to string
    2587/    402E : CD A4 45            	CALL	DETHL4		; Move string to pool
    2588/    4031 : CD 6C 35            	CALL	CPDEHL		; Out of string pool?
    2589/    4034 : 22 F6 80            	LD	(TMSTPT),HL	; Save new pointer
    2590/    4037 : E1                  	POP	HL		; Restore code string address
    2591/    4038 : 7E                  	LD	A,(HL)		; Get next code byte
    2592/    4039 : C0                  	RET	NZ		; Return if pool OK
    2593/    403A : 1E 1E               	LD	E,ST		; ?ST Error
    2594/    403C : C3 B8 32            	JP	ERROR_		; String pool overflow
    2595/    403F :                     ;
    2596/    403F : 23                  PRNUMS: INC	HL		; Skip leading space
    2597/    4040 : CD FE 3F            PRS:	CALL	CRTST		; Create string entry for it
    2598/    4043 : CD 83 41            PRS1:	CALL	GSTRCU		; Current string to pool
    2599/    4046 : CD 98 45            	CALL	LOADFP		; Move string block to BCDE
    2600/    4049 : 1C                  	INC	E		; Length + 1
    2601/    404A : 1D                  PRSLP:	DEC	E		; Count characters
    2602/    404B : C8                  	RET	Z		; End of string
    2603/    404C : 0A                  	LD	A,(BC)		; Get byte to output
    2604/    404D : CD 7D 35            	CALL	OUTC		; Output character in A
    2605/    4050 : FE 0D               	CP	CR		; Return?
    2606/    4052 : CC AC 39            	CALL	Z,DONULL	; Yes - Do nulls
    2607/    4055 : 03                  	INC	BC		; Next byte in string
    2608/    4056 : C3 4A 40            	JP	PRSLP		; More characters to output
    2609/    4059 :                     ;
    2610/    4059 : B7                  TESTR:	OR	A		; Test if enough room
    2611/    405A : 0E                  	DB	0EH		; No garbage collection done
    2612/    405B : F1                  GRBDON: POP	AF		; Garbage collection done
    2613/    405C : F5                  	PUSH	AF		; Save status
    2614/    405D : 2A 9F 80            	LD	HL,(STRSPC)	; Bottom of string space in use
    2615/    4060 : EB                  	EX	DE,HL		; To DE
    2616/    4061 : 2A 08 81            	LD	HL,(STRBOT)	; Bottom of string area
    2617/    4064 : 2F                  	CPL			; Negate length (Top down)
    2618/    4065 : 4F                  	LD	C,A		; -Length to BC
    2619/    4066 : 06 FF               	LD	B,-1		; BC = -ve length of string
    2620/    4068 : 09                  	ADD	HL,BC		; Add to bottom of space in use
    2621/    4069 : 23                  	INC	HL		; Plus one for 2's complement
    2622/    406A : CD 6C 35            	CALL	CPDEHL		; Below string RAM area?
    2623/    406D : DA 77 40            	JP	C,TESTOS	; Tidy up if not done else err
    2624/    4070 : 22 08 81            	LD	(STRBOT),HL	; Save new bottom of area
    2625/    4073 : 23                  	INC	HL		; Point to first byte of string
    2626/    4074 : EB                  	EX	DE,HL		; Address to DE
    2627/    4075 : F1                  POPAF:	POP	AF		; Throw away status push
    2628/    4076 : C9                  	RET
    2629/    4077 :                     ;
    2630/    4077 : F1                  TESTOS: POP	AF		; Garbage collect been done?
    2631/    4078 : 1E 1A               	LD	E,OS		; ?OS Error
    2632/    407A : CA B8 32            	JP	Z,ERROR_	; Yes - Not enough string apace
    2633/    407D : BF                  	CP	A		; Flag garbage collect done
    2634/    407E : F5                  	PUSH	AF		; Save status
    2635/    407F : 01 5B 40            	LD	BC,GRBDON	; Garbage collection done
    2636/    4082 : C5                  	PUSH	BC		; Save for RETurn
    2637/    4083 : 2A F4 80            GARBGE: LD	HL,(LSTRAM)	; Get end of RAM pointer
    2638/    4086 : 22 08 81            GARBLP: LD	(STRBOT),HL	; Reset string pointer
    2639/    4089 : 21 00 00            	LD	HL,0
    2640/    408C : E5                  	PUSH	HL		; Flag no string found
    2641/    408D : 2A 9F 80            	LD	HL,(STRSPC)	; Get bottom of string space
    2642/    4090 : E5                  	PUSH	HL		; Save bottom of string space
    2643/    4091 : 21 F8 80            	LD	HL,TMSTPL	; Temporary string pool
    2644/    4094 : EB                  GRBLP:	EX	DE,HL
    2645/    4095 : 2A F6 80            	LD	HL,(TMSTPT)	; Temporary string pool pointer
    2646/    4098 : EB                  	EX	DE,HL
    2647/    4099 : CD 6C 35            	CALL	CPDEHL		; Temporary string pool done?
    2648/    409C : 01 94 40            	LD	BC,GRBLP	; Loop until string pool done
    2649/    409F : C2 E8 40            	JP	NZ,STPOOL	; No - See if in string area
    2650/    40A2 : 2A 1B 81            	LD	HL,(PROGND)	; Start of simple variables
    2651/    40A5 : EB                  SMPVAR: EX	DE,HL
    2652/    40A6 : 2A 1D 81            	LD	HL,(VAREND)	; End of simple variables
    2653/    40A9 : EB                  	EX	DE,HL
    2654/    40AA : CD 6C 35            	CALL	CPDEHL		; All simple strings done?
    2655/    40AD : CA BB 40            	JP	Z,ARRLP		; Yes - Do string arrays
    2656/    40B0 : 7E                  	LD	A,(HL)		; Get type of variable
    2657/    40B1 : 23                  	INC	HL
    2658/    40B2 : 23                  	INC	HL
    2659/    40B3 : B7                  	OR	A		; "S" flag set if string
    2660/    40B4 : CD EB 40            	CALL	STRADD		; See if string in string area
    2661/    40B7 : C3 A5 40            	JP	SMPVAR		; Loop until simple ones done
    2662/    40BA :                     ;
    2663/    40BA : C1                  GNXARY: POP	BC		; Scrap address of this array
    2664/    40BB : EB                  ARRLP:	EX	DE,HL
    2665/    40BC : 2A 1F 81            	LD	HL,(ARREND)	; End of string arrays
    2666/    40BF : EB                  	EX	DE,HL
    2667/    40C0 : CD 6C 35            	CALL	CPDEHL		; All string arrays done?
    2668/    40C3 : CA 11 41            	JP	Z,SCNEND	; Yes - Move string if found
    2669/    40C6 : CD 98 45            	CALL	LOADFP		; Get array name to BCDE
    2670/    40C9 : 7B                  	LD	A,E		; Get type of array	
    2671/    40CA : E5                  	PUSH	HL		; Save address of num of dim'ns
    2672/    40CB : 09                  	ADD	HL,BC		; Start of next array
    2673/    40CC : B7                  	OR	A		; Test type of array
    2674/    40CD : F2 BA 40            	JP	P,GNXARY	; Numeric array - Ignore it
    2675/    40D0 : 22 0A 81            	LD	(CUROPR),HL	; Save address of next array
    2676/    40D3 : E1                  	POP	HL		; Get address of num of dim'ns
    2677/    40D4 : 4E                  	LD	C,(HL)		; BC = Number of dimensions
    2678/    40D5 : 06 00               	LD	B,0
    2679/    40D7 : 09                  	ADD	HL,BC		; Two bytes per dimension size
    2680/    40D8 : 09                  	ADD	HL,BC
    2681/    40D9 : 23                  	INC	HL		; Plus one for number of dim'ns
    2682/    40DA : EB                  GRBARY: EX	DE,HL
    2683/    40DB : 2A 0A 81            	LD	HL,(CUROPR)	; Get address of next array
    2684/    40DE : EB                  	EX	DE,HL
    2685/    40DF : CD 6C 35            	CALL	CPDEHL		; Is this array finished?
    2686/    40E2 : CA BB 40            	JP	Z,ARRLP		; Yes - Get next one
    2687/    40E5 : 01 DA 40            	LD	BC,GRBARY	; Loop until array all done
    2688/    40E8 : C5                  STPOOL: PUSH	BC		; Save return address
    2689/    40E9 : F6 80               	OR	80H		; Flag string type
    2690/    40EB : 7E                  STRADD: LD	A,(HL)		; Get string length
    2691/    40EC : 23                  	INC	HL
    2692/    40ED : 23                  	INC	HL
    2693/    40EE : 5E                  	LD	E,(HL)		; Get LSB of string address
    2694/    40EF : 23                  	INC	HL
    2695/    40F0 : 56                  	LD	D,(HL)		; Get MSB of string address
    2696/    40F1 : 23                  	INC	HL
    2697/    40F2 : F0                  	RET	P		; Not a string - Return
    2698/    40F3 : B7                  	OR	A		; Set flags on string length
    2699/    40F4 : C8                  	RET	Z		; Null string - Return
    2700/    40F5 : 44                  	LD	B,H		; Save variable pointer
    2701/    40F6 : 4D                  	LD	C,L
    2702/    40F7 : 2A 08 81            	LD	HL,(STRBOT)	; Bottom of new area
    2703/    40FA : CD 6C 35            	CALL	CPDEHL		; String been done?
    2704/    40FD : 60                  	LD	H,B		; Restore variable pointer
    2705/    40FE : 69                  	LD	L,C
    2706/    40FF : D8                  	RET	C		; String done - Ignore
    2707/    4100 : E1                  	POP	HL		; Return address
    2708/    4101 : E3                  	EX	(SP),HL		; Lowest available string area
    2709/    4102 : CD 6C 35            	CALL	CPDEHL		; String within string area?
    2710/    4105 : E3                  	EX	(SP),HL		; Lowest available string area
    2711/    4106 : E5                  	PUSH	HL		; Re-save return address
    2712/    4107 : 60                  	LD	H,B		; Restore variable pointer
    2713/    4108 : 69                  	LD	L,C
    2714/    4109 : D0                  	RET	NC		; Outside string area - Ignore
    2715/    410A : C1                  	POP	BC		; Get return , Throw 2 away
    2716/    410B : F1                  	POP	AF		; 
    2717/    410C : F1                  	POP	AF		; 
    2718/    410D : E5                  	PUSH	HL		; Save variable pointer
    2719/    410E : D5                  	PUSH	DE		; Save address of current
    2720/    410F : C5                  	PUSH	BC		; Put back return address
    2721/    4110 : C9                  	RET			; Go to it
    2722/    4111 :                     ;
    2723/    4111 : D1                  SCNEND: POP	DE		; Addresses of strings
    2724/    4112 : E1                  	POP	HL		; 
    2725/    4113 : 7D                  	LD	A,L		; HL = 0 if no more to do
    2726/    4114 : B4                  	OR	H
    2727/    4115 : C8                  	RET	Z		; No more to do - Return
    2728/    4116 : 2B                  	DEC	HL
    2729/    4117 : 46                  	LD	B,(HL)		; MSB of address of string
    2730/    4118 : 2B                  	DEC	HL
    2731/    4119 : 4E                  	LD	C,(HL)		; LSB of address of string
    2732/    411A : E5                  	PUSH	HL		; Save variable address
    2733/    411B : 2B                  	DEC	HL
    2734/    411C : 2B                  	DEC	HL
    2735/    411D : 6E                  	LD	L,(HL)		; HL = Length of string
    2736/    411E : 26 00               	LD	H,0
    2737/    4120 : 09                  	ADD	HL,BC		; Address of end of string+1
    2738/    4121 : 50                  	LD	D,B		; String address to DE
    2739/    4122 : 59                  	LD	E,C
    2740/    4123 : 2B                  	DEC	HL		; Last byte in string
    2741/    4124 : 44                  	LD	B,H		; Address to BC
    2742/    4125 : 4D                  	LD	C,L
    2743/    4126 : 2A 08 81            	LD	HL,(STRBOT)	; Current bottom of string area
    2744/    4129 : CD 73 32            	CALL	MOVSTR		; Move string to new address
    2745/    412C : E1                  	POP	HL		; Restore variable address
    2746/    412D : 71                  	LD	(HL),C		; Save new LSB of address
    2747/    412E : 23                  	INC	HL
    2748/    412F : 70                  	LD	(HL),B		; Save new MSB of address
    2749/    4130 : 69                  	LD	L,C		; Next string area+1 to HL
    2750/    4131 : 60                  	LD	H,B
    2751/    4132 : 2B                  	DEC	HL		; Next string area address
    2752/    4133 : C3 86 40            	JP	GARBLP		; Look for more strings
    2753/    4136 :                     ;
    2754/    4136 : C5                  CONCAT: PUSH	BC		; Save prec' opr & code string
    2755/    4137 : E5                  	PUSH	HL		; 
    2756/    4138 : 2A 29 81            	LD	HL,(FPREG)	; Get first string
    2757/    413B : E3                  	EX	(SP),HL		; Save first string
    2758/    413C : CD F0 3B            	CALL	OPRND		; Get second string
    2759/    413F : E3                  	EX	(SP),HL		; Restore first string
    2760/    4140 : CD 6B 3B            	CALL	TSTSTR		; Make sure it's a string
    2761/    4143 : 7E                  	LD	A,(HL)		; Get length of second string
    2762/    4144 : E5                  	PUSH	HL		; Save first string
    2763/    4145 : 2A 29 81            	LD	HL,(FPREG)	; Get second string
    2764/    4148 : E5                  	PUSH	HL		; Save second string
    2765/    4149 : 86                  	ADD	A,(HL)		; Add length of second string
    2766/    414A : 1E 1C               	LD	E,LS		; ?LS Error
    2767/    414C : DA B8 32            	JP	C,ERROR_	; String too long - Error
    2768/    414F : CD EF 3F            	CALL	MKTMST		; Make temporary string
    2769/    4152 : D1                  	POP	DE		; Get second string to DE
    2770/    4153 : CD 87 41            	CALL	GSTRDE		; Move to string pool if needed
    2771/    4156 : E3                  	EX	(SP),HL		; Get first string
    2772/    4157 : CD 86 41            	CALL	GSTRHL		; Move to string pool if needed
    2773/    415A : E5                  	PUSH	HL		; Save first string
    2774/    415B : 2A 06 81            	LD	HL,(TMPSTR+2)	; Temporary string address
    2775/    415E : EB                  	EX	DE,HL		; To DE
    2776/    415F : CD 6D 41            	CALL	SSTSA		; First string to string area
    2777/    4162 : CD 6D 41            	CALL	SSTSA		; Second string to string area
    2778/    4165 : 21 85 3B            	LD	HL,EVAL2	; Return to evaluation loop
    2779/    4168 : E3                  	EX	(SP),HL		; Save return,get code string
    2780/    4169 : E5                  	PUSH	HL		; Save code string address
    2781/    416A : C3 20 40            	JP	TSTOPL		; To temporary string to pool
    2782/    416D :                     ;
    2783/    416D : E1                  SSTSA:	POP	HL		; Return address
    2784/    416E : E3                  	EX	(SP),HL		; Get string block,save return
    2785/    416F : 7E                  	LD	A,(HL)		; Get length of string
    2786/    4170 : 23                  	INC	HL
    2787/    4171 : 23                  	INC	HL
    2788/    4172 : 4E                  	LD	C,(HL)		; Get LSB of string address
    2789/    4173 : 23                  	INC	HL
    2790/    4174 : 46                  	LD	B,(HL)		; Get MSB of string address
    2791/    4175 : 6F                  	LD	L,A		; Length to L
    2792/    4176 : 2C                  TOSTRA: INC	L		; INC - DECed after
    2793/    4177 : 2D                  TSALP:	DEC	L		; Count bytes moved
    2794/    4178 : C8                  	RET	Z		; End of string - Return
    2795/    4179 : 0A                  	LD	A,(BC)		; Get source
    2796/    417A : 12                  	LD	(DE),A		; Save destination
    2797/    417B : 03                  	INC	BC		; Next source
    2798/    417C : 13                  	INC	DE		; Next destination
    2799/    417D : C3 77 41            	JP	TSALP		; Loop until string moved
    2800/    4180 :                     ;
    2801/    4180 : CD 6B 3B            GETSTR: CALL	TSTSTR		; Make sure it's a string
    2802/    4183 : 2A 29 81            GSTRCU: LD	HL,(FPREG)	; Get current string
    2803/    4186 : EB                  GSTRHL: EX	DE,HL		; Save DE
    2804/    4187 : CD A1 41            GSTRDE: CALL	BAKTMP		; Was it last tmp-str?
    2805/    418A : EB                  	EX	DE,HL		; Restore DE
    2806/    418B : C0                  	RET	NZ		; No - Return
    2807/    418C : D5                  	PUSH	DE		; Save string
    2808/    418D : 50                  	LD	D,B		; String block address to DE
    2809/    418E : 59                  	LD	E,C
    2810/    418F : 1B                  	DEC	DE		; Point to length
    2811/    4190 : 4E                  	LD	C,(HL)		; Get string length
    2812/    4191 : 2A 08 81            	LD	HL,(STRBOT)	; Current bottom of string area
    2813/    4194 : CD 6C 35            	CALL	CPDEHL		; Last one in string area?
    2814/    4197 : C2 9F 41            	JP	NZ,POPHL	; No - Return
    2815/    419A : 47                  	LD	B,A		; Clear B (A=0)
    2816/    419B : 09                  	ADD	HL,BC		; Remove string from str' area
    2817/    419C : 22 08 81            	LD	(STRBOT),HL	; Save new bottom of str' area
    2818/    419F : E1                  POPHL:	POP	HL		; Restore string
    2819/    41A0 : C9                  	RET
    2820/    41A1 :                     ;
    2821/    41A1 : 2A F6 80            BAKTMP: LD	HL,(TMSTPT)	; Get temporary string pool top
    2822/    41A4 : 2B                  	DEC	HL		; Back
    2823/    41A5 : 46                  	LD	B,(HL)		; Get MSB of address
    2824/    41A6 : 2B                  	DEC	HL		; Back
    2825/    41A7 : 4E                  	LD	C,(HL)		; Get LSB of address
    2826/    41A8 : 2B                  	DEC	HL		; Back
    2827/    41A9 : 2B                  	DEC	HL		; Back
    2828/    41AA : CD 6C 35            	CALL	CPDEHL		; String last in string pool?
    2829/    41AD : C0                  	RET	NZ		; Yes - Leave it
    2830/    41AE : 22 F6 80            	LD	(TMSTPT),HL	; Save new string pool top
    2831/    41B1 : C9                  	RET
    2832/    41B2 :                     ;
    2833/    41B2 : 01 31 3F            LEN:	LD	BC,PASSA	; To return integer A
    2834/    41B5 : C5                  	PUSH	BC		; Save address
    2835/    41B6 : CD 80 41            GETLEN: CALL	GETSTR		; Get string and its length
    2836/    41B9 : AF                  	XOR	A
    2837/    41BA : 57                  	LD	D,A		; Clear D
    2838/    41BB : 32 F2 80            	LD	(TYPE),A	; Set type to numeric
    2839/    41BE : 7E                  	LD	A,(HL)		; Get length of string
    2840/    41BF : B7                  	OR	A		; Set status flags
    2841/    41C0 : C9                  	RET
    2842/    41C1 :                     ;
    2843/    41C1 : 01 31 3F            ASC:	LD	BC,PASSA	; To return integer A
    2844/    41C4 : C5                  	PUSH	BC		; Save address
    2845/    41C5 : CD B6 41            GTFLNM: CALL	GETLEN		; Get length of string
    2846/    41C8 : CA C1 37            	JP	Z,FCERR		; Null string - Error
    2847/    41CB : 23                  	INC	HL
    2848/    41CC : 23                  	INC	HL
    2849/    41CD : 5E                  	LD	E,(HL)		; Get LSB of address
    2850/    41CE : 23                  	INC	HL
    2851/    41CF : 56                  	LD	D,(HL)		; Get MSB of address
    2852/    41D0 : 1A                  	LD	A,(DE)		; Get first byte of string
    2853/    41D1 : C9                  	RET
    2854/    41D2 :                     ;
    2855/    41D2 : 3E 01               CHR:	LD	A,1		; One character string
    2856/    41D4 : CD EF 3F            	CALL	MKTMST		; Make a temporary string
    2857/    41D7 : CD CB 42            	CALL	MAKINT		; Make it integer A
    2858/    41DA : 2A 06 81            	LD	HL,(TMPSTR+2)	; Get address of string
    2859/    41DD : 73                  	LD	(HL),E		; Save character
    2860/    41DE : C1                  TOPOOL: POP	BC		; Clean up stack
    2861/    41DF : C3 20 40            	JP	TSTOPL		; Temporary string to pool
    2862/    41E2 :                     ;
    2863/    41E2 : CD 7B 42            LEFT:	CALL	LFRGNM		; Get number and ending ")"
    2864/    41E5 : AF                  	XOR	A		; Start at first byte in string
    2865/    41E6 : E3                  RIGHT1: EX	(SP),HL		; Save code string,Get string
    2866/    41E7 : 4F                  	LD	C,A		; Starting position in string
    2867/    41E8 : E5                  MID1:	PUSH	HL		; Save string block address
    2868/    41E9 : 7E                  	LD	A,(HL)		; Get length of string
    2869/    41EA : B8                  	CP	B		; Compare with number given
    2870/    41EB : DA F0 41            	JP	C,ALLFOL	; All following bytes required
    2871/    41EE : 78                  	LD	A,B		; Get new length
    2872/    41EF : 11                  	DB	11H		; Skip "LD C,0"
    2873/    41F0 : 0E 00               ALLFOL: LD	C,0		; First byte of string
    2874/    41F2 : C5                  	PUSH	BC		; Save position in string
    2875/    41F3 : CD 59 40            	CALL	TESTR		; See if enough string space
    2876/    41F6 : C1                  	POP	BC		; Get position in string
    2877/    41F7 : E1                  	POP	HL		; Restore string block address
    2878/    41F8 : E5                  	PUSH	HL		; And re-save it
    2879/    41F9 : 23                  	INC	HL
    2880/    41FA : 23                  	INC	HL
    2881/    41FB : 46                  	LD	B,(HL)		; Get LSB of address
    2882/    41FC : 23                  	INC	HL
    2883/    41FD : 66                  	LD	H,(HL)		; Get MSB of address
    2884/    41FE : 68                  	LD	L,B		; HL = address of string
    2885/    41FF : 06 00               	LD	B,0		; BC = starting address
    2886/    4201 : 09                  	ADD	HL,BC		; Point to that byte
    2887/    4202 : 44                  	LD	B,H		; BC = source string
    2888/    4203 : 4D                  	LD	C,L
    2889/    4204 : CD F2 3F            	CALL	CRTMST		; Create a string entry
    2890/    4207 : 6F                  	LD	L,A		; Length of new string
    2891/    4208 : CD 76 41            	CALL	TOSTRA		; Move string to string area
    2892/    420B : D1                  	POP	DE		; Clear stack
    2893/    420C : CD 87 41            	CALL	GSTRDE		; Move to string pool if needed
    2894/    420F : C3 20 40            	JP	TSTOPL		; Temporary string to pool
    2895/    4212 :                     ;
    2896/    4212 : CD 7B 42            RIGHT:	CALL	LFRGNM		; Get number and ending ")"
    2897/    4215 : D1                  	POP	DE		; Get string length
    2898/    4216 : D5                  	PUSH	DE		; And re-save
    2899/    4217 : 1A                  	LD	A,(DE)		; Get length
    2900/    4218 : 90                  	SUB	B		; Move back N bytes
    2901/    4219 : C3 E6 41            	JP	RIGHT1		; Go and get sub-string
    2902/    421C :                     ;
    2903/    421C : EB                  MID:	EX	DE,HL		; Get code string address
    2904/    421D : 7E                  	LD	A,(HL)		; Get next byte ',' or ")"
    2905/    421E : CD 80 42            	CALL	MIDNUM		; Get number supplied
    2906/    4221 : 04                  	INC	B		; Is it character zero?
    2907/    4222 : 05                  	DEC	B
    2908/    4223 : CA C1 37            	JP	Z,FCERR		; Yes - Error
    2909/    4226 : C5                  	PUSH	BC		; Save starting position
    2910/    4227 : 1E FF               	LD	E,255		; All of string
    2911/    4229 : FE 29               	CP	')'		; Any length given?
    2912/    422B : CA 35 42            	JP	Z,RSTSTR	; No - Rest of string
    2913/    422E : CD 72 35            	CALL	CHKSYN		; Make sure ',' follows
    2914/    4231 : 2C                  	DB	','
    2915/    4232 : CD C8 42            	CALL	GETINT		; Get integer 0-255
    2916/    4235 : CD 72 35            RSTSTR: CALL	CHKSYN		; Make sure ")" follows
    2917/    4238 : 29                  	DB	")"
    2918/    4239 : F1                  	POP	AF		; Restore starting position
    2919/    423A : E3                  	EX	(SP),HL		; Get string,8ave code string
    2920/    423B : 01 E8 41            	LD	BC,MID1		; Continuation of MID$ routine
    2921/    423E : C5                  	PUSH	BC		; Save for return
    2922/    423F : 3D                  	DEC	A		; Starting position-1
    2923/    4240 : BE                  	CP	(HL)		; Compare with length
    2924/    4241 : 06 00               	LD	B,0		; Zero bytes length
    2925/    4243 : D0                  	RET	NC		; Null string if start past end
    2926/    4244 : 4F                  	LD	C,A		; Save starting position-1
    2927/    4245 : 7E                  	LD	A,(HL)		; Get length of string
    2928/    4246 : 91                  	SUB	C		; Subtract start
    2929/    4247 : BB                  	CP	E		; Enough string for it?
    2930/    4248 : 47                  	LD	B,A		; Save maximum length available
    2931/    4249 : D8                  	RET	C		; Truncate string if needed
    2932/    424A : 43                  	LD	B,E		; Set specified length
    2933/    424B : C9                  	RET			; Go and create string
    2934/    424C :                     ;
    2935/    424C : CD B6 41            VAL:	CALL	GETLEN		; Get length of string
    2936/    424F : CA 69 43            	JP	Z,RESZER	; Result zero
    2937/    4252 : 5F                  	LD	E,A		; Save length
    2938/    4253 : 23                  	INC	HL
    2939/    4254 : 23                  	INC	HL
    2940/    4255 : 7E                  	LD	A,(HL)		; Get LSB of address
    2941/    4256 : 23                  	INC	HL
    2942/    4257 : 66                  	LD	H,(HL)		; Get MSB of address
    2943/    4258 : 6F                  	LD	L,A		; HL = String address
    2944/    4259 : E5                  	PUSH	HL		; Save string address
    2945/    425A : 19                  	ADD	HL,DE
    2946/    425B : 46                  	LD	B,(HL)		; Get end of string+1 byte
    2947/    425C : 72                  	LD	(HL),D		; Zero it to terminate
    2948/    425D : E3                  	EX	(SP),HL		; Save string end,get start
    2949/    425E : C5                  	PUSH	BC		; Save end+1 byte
    2950/    425F : 7E                  	LD	A,(HL)		; Get starting byte
    2951/    4260 : FE 24               	CP	'$'		; Hex number indicated? [function added]
    2952/    4262 : C2 6A 42            	JP	NZ,VAL1
    2953/    4265 : CD 93 4A            	CALL	HEXTFP		; Convert Hex to FPREG
    2954/    4268 : 18 0D               	JR	VAL3
    2955/    426A : FE 25               VAL1:	CP	'%'		; Binary number indicated? [function added]
    2956/    426C : C2 74 42            	JP	NZ,VAL2
    2957/    426F : CD 03 4B            	CALL	BINTFP		; Convert Bin to FPREG
    2958/    4272 : 18 03               	JR	VAL3
    2959/    4274 : CD 50 46            VAL2:	CALL	ASCTFP		; Convert ASCII string to FP
    2960/    4277 : C1                  VAL3:	POP	BC		; Restore end+1 byte
    2961/    4278 : E1                  	POP	HL		; Restore end+1 address
    2962/    4279 : 70                  	LD	(HL),B		; Put back original byte
    2963/    427A : C9                  	RET
    2964/    427B :                     ;
    2965/    427B : EB                  LFRGNM: EX	DE,HL		; Code string address to HL
    2966/    427C : CD 72 35            	CALL	CHKSYN		; Make sure ")" follows
    2967/    427F : 29                  	DB	")"
    2968/    4280 : C1                  MIDNUM: POP	BC		; Get return address
    2969/    4281 : D1                  	POP	DE		; Get number supplied
    2970/    4282 : C5                  	PUSH	BC		; Re-save return address
    2971/    4283 : 43                  	LD	B,E		; Number to B
    2972/    4284 : C9                  	RET
    2973/    4285 :                     ;
    2974/    4285 : CD CB 42            INP:	CALL	MAKINT		; Make it integer A
    2975/    4288 : 32 84 80            	LD	(INPORT),A	; Set input port
    2976/    428B : CD 83 80            	CALL	INPSUB		; Get input from port
    2977/    428E : C3 31 3F            	JP	PASSA		; Return integer A
    2978/    4291 :                     ;
    2979/    4291 : CD B5 42            POUT:	CALL	SETIO		; Set up port number
    2980/    4294 : C3 4B 80            	JP	OUTSUB		; Output data and return
    2981/    4297 :                     ;
    2982/    4297 : CD B5 42            WAIT:	CALL	SETIO		; Set up port number
    2983/    429A : F5                  	PUSH	AF		; Save AND mask
    2984/    429B : 1E 00               	LD	E,0		; Assume zero if none given
    2985/    429D : 2B                  	DEC	HL		; DEC 'cos GETCHR INCs
    2986/    429E : CD FA 36            	CALL	GETCHR		; Get next character
    2987/    42A1 : CA AB 42            	JP	Z,NOXOR		; No XOR byte given
    2988/    42A4 : CD 72 35            	CALL	CHKSYN		; Make sure ',' follows
    2989/    42A7 : 2C                  	DB	','
    2990/    42A8 : CD C8 42            	CALL	GETINT		; Get integer 0-255 to XOR with
    2991/    42AB : C1                  NOXOR:	POP	BC		; Restore AND mask
    2992/    42AC : CD 83 80            WAITLP: CALL	INPSUB		; Get input
    2993/    42AF : AB                  	XOR	E		; Flip selected bits
    2994/    42B0 : A0                  	AND	B		; Result non-zero?
    2995/    42B1 : CA AC 42            	JP	Z,WAITLP	; No = keep waiting
    2996/    42B4 : C9                  	RET
    2997/    42B5 :                     ;
    2998/    42B5 : CD C8 42            SETIO:	CALL	GETINT		; Get integer 0-255
    2999/    42B8 : 32 84 80            	LD	(INPORT),A	; Set input port
    3000/    42BB : 32 4C 80            	LD	(OTPORT),A	; Set output port
    3001/    42BE : CD 72 35            	CALL	CHKSYN		; Make sure ',' follows
    3002/    42C1 : 2C                  	DB	','
    3003/    42C2 : C3 C8 42            	JP	GETINT		; Get integer 0-255 and return
    3004/    42C5 :                     ;
    3005/    42C5 : CD FA 36            FNDNUM: CALL	GETCHR		; Get next character
    3006/    42C8 : CD 67 3B            GETINT: CALL	GETNUM		; Get a number from 0 to 255
    3007/    42CB : CD A6 37            MAKINT: CALL	DEPINT		; Make sure value 0 - 255
    3008/    42CE : 7A                  	LD	A,D		; Get MSB of number
    3009/    42CF : B7                  	OR	A		; Zero?
    3010/    42D0 : C2 C1 37            	JP	NZ,FCERR	; No - Error
    3011/    42D3 : 2B                  	DEC	HL		; DEC 'cos GETCHR INCs
    3012/    42D4 : CD FA 36            	CALL	GETCHR		; Get next character
    3013/    42D7 : 7B                  	LD	A,E		; Get number to A
    3014/    42D8 : C9                  	RET
    3015/    42D9 :                     ;
    3016/    42D9 : CD AC 37            PEEK:	CALL	DEINT		; Get memory address
    3017/    42DC : 1A                  	LD	A,(DE)		; Get byte in memory
    3018/    42DD : C3 31 3F            	JP	PASSA		; Return integer A
    3019/    42E0 :                     ;
    3020/    42E0 : CD 67 3B            POKE:	CALL	GETNUM		; Get memory address
    3021/    42E3 : CD AC 37            	CALL	DEINT		; Get integer -32768 to 3276
    3022/    42E6 : D5                  	PUSH	DE		; Save memory address
    3023/    42E7 : CD 72 35            	CALL	CHKSYN		; Make sure ',' follows
    3024/    42EA : 2C                  	DB	','
    3025/    42EB : CD C8 42            	CALL	GETINT		; Get integer 0-255
    3026/    42EE : D1                  	POP	DE		; Restore memory address
    3027/    42EF : 12                  	LD	(DE),A		; Load it into memory
    3028/    42F0 : C9                  	RET
    3029/    42F1 :                     ;
    3030/    42F1 : 21 C7 47            ROUND:	LD	HL,HALF		; Add 0.5 to FPREG
    3031/    42F4 : CD 98 45            ADDPHL: CALL	LOADFP		; Load FP at (HL) to BCDE
    3032/    42F7 : C3 03 43            	JP	FPADD		; Add BCDE to FPREG
    3033/    42FA :                     ;
    3034/    42FA : CD 98 45            SUBPHL: CALL	LOADFP		; FPREG = -FPREG + number at HL
    3035/    42FD : 21                  	DB	21H		; Skip "POP BC" and "POP DE"
    3036/    42FE : C1                  PSUB:	POP	BC		; Get FP number from stack
    3037/    42FF : D1                  	POP	DE
    3038/    4300 : CD 72 45            SUBCDE: CALL	INVSGN		; Negate FPREG
    3039/    4303 : 78                  FPADD:	LD	A,B		; Get FP exponent
    3040/    4304 : B7                  	OR	A		; Is number zero?
    3041/    4305 : C8                  	RET	Z		; Yes - Nothing to add
    3042/    4306 : 3A 2C 81            	LD	A,(FPEXP)	; Get FPREG exponent
    3043/    4309 : B7                  	OR	A		; Is this number zero?
    3044/    430A : CA 8A 45            	JP	Z,FPBCDE	; Yes - Move BCDE to FPREG
    3045/    430D : 90                  	SUB	B		; BCDE number larger?
    3046/    430E : D2 1D 43            	JP	NC,NOSWAP	; No - Don't swap them
    3047/    4311 : 2F                  	CPL			; Two's complement
    3048/    4312 : 3C                  	INC	A		;	FP exponent
    3049/    4313 : EB                  	EX	DE,HL
    3050/    4314 : CD 7A 45            	CALL	STAKFP		; Put FPREG on stack
    3051/    4317 : EB                  	EX	DE,HL
    3052/    4318 : CD 8A 45            	CALL	FPBCDE		; Move BCDE to FPREG
    3053/    431B : C1                  	POP	BC		; Restore number from stack
    3054/    431C : D1                  	POP	DE
    3055/    431D : FE 19               NOSWAP: CP	24+1		; Second number insignificant?
    3056/    431F : D0                  	RET	NC		; Yes - First number is result
    3057/    4320 : F5                  	PUSH	AF		; Save number of bits to scale
    3058/    4321 : CD AF 45            	CALL	SIGNS		; Set MSBs & sign of result
    3059/    4324 : 67                  	LD	H,A		; Save sign of result
    3060/    4325 : F1                  	POP	AF		; Restore scaling factor
    3061/    4326 : CD C8 43            	CALL	SCALE		; Scale BCDE to same exponent
    3062/    4329 : B4                  	OR	H		; Result to be positive?
    3063/    432A : 21 29 81            	LD	HL,FPREG	; Point to FPREG
    3064/    432D : F2 43 43            	JP	P,MINCDE	; No - Subtract FPREG from CDE
    3065/    4330 : CD A8 43            	CALL	PLUCDE		; Add FPREG to CDE
    3066/    4333 : D2 89 43            	JP	NC,RONDUP	; No overflow - Round it up
    3067/    4336 : 23                  	INC	HL		; Point to exponent
    3068/    4337 : 34                  	INC	(HL)		; Increment it
    3069/    4338 : CA B3 32            	JP	Z,OVERR		; Number overflowed - Error
    3070/    433B : 2E 01               	LD	L,1		; 1 bit to shift right
    3071/    433D : CD DE 43            	CALL	SHRT1		; Shift result right
    3072/    4340 : C3 89 43            	JP	RONDUP		; Round it up
    3073/    4343 :                     ;
    3074/    4343 : AF                  MINCDE: XOR	A		; Clear A and carry
    3075/    4344 : 90                  	SUB	B		; Negate exponent
    3076/    4345 : 47                  	LD	B,A		; Re-save exponent
    3077/    4346 : 7E                  	LD	A,(HL)		; Get LSB of FPREG
    3078/    4347 : 9B                  	SBC	A, E		; Subtract LSB of BCDE
    3079/    4348 : 5F                  	LD	E,A		; Save LSB of BCDE
    3080/    4349 : 23                  	INC	HL
    3081/    434A : 7E                  	LD	A,(HL)		; Get NMSB of FPREG
    3082/    434B : 9A                  	SBC	A,D		; Subtract NMSB of BCDE
    3083/    434C : 57                  	LD	D,A		; Save NMSB of BCDE
    3084/    434D : 23                  	INC	HL
    3085/    434E : 7E                  	LD	A,(HL)		; Get MSB of FPREG
    3086/    434F : 99                  	SBC	A,C		; Subtract MSB of BCDE
    3087/    4350 : 4F                  	LD	C,A		; Save MSB of BCDE
    3088/    4351 : DC B4 43            CONPOS: CALL	C,COMPL		; Overflow - Make it positive
    3089/    4354 :                     ;
    3090/    4354 : 68                  BNORM:	LD	L,B		; L = Exponent
    3091/    4355 : 63                  	LD	H,E		; H = LSB
    3092/    4356 : AF                  	XOR	A
    3093/    4357 : 47                  BNRMLP: LD	B,A		; Save bit count
    3094/    4358 : 79                  	LD	A,C		; Get MSB
    3095/    4359 : B7                  	OR	A		; Is it zero?
    3096/    435A : C2 76 43            	JP	NZ,PNORM	; No - Do it bit at a time
    3097/    435D : 4A                  	LD	C,D		; MSB = NMSB
    3098/    435E : 54                  	LD	D,H		; NMSB= LSB
    3099/    435F : 65                  	LD	H,L		; LSB = VLSB
    3100/    4360 : 6F                  	LD	L,A		; VLSB= 0
    3101/    4361 : 78                  	LD	A,B		; Get exponent
    3102/    4362 : D6 08               	SUB	8		; Count 8 bits
    3103/    4364 : FE E0               	CP	0E0H		; -24-8 Was number zero?
    3104/    4366 : C2 57 43            	JP	NZ,BNRMLP	; No - Keep normalising
    3105/    4369 : AF                  RESZER: XOR	A		; Result is zero
    3106/    436A : 32 2C 81            SAVEXP: LD	(FPEXP),A	; Save result as zero
    3107/    436D : C9                  	RET
    3108/    436E :                     ;
    3109/    436E : 05                  NORMAL: DEC	B		; Count bits
    3110/    436F : 29                  	ADD	HL,HL		; Shift HL left
    3111/    4370 : 7A                  	LD	A,D		; Get NMSB
    3112/    4371 : 17                  	RLA			; Shift left with last bit
    3113/    4372 : 57                  	LD	D,A		; Save NMSB
    3114/    4373 : 79                  	LD	A,C		; Get MSB
    3115/    4374 : 8F                  	ADC	A,A		; Shift left with last bit
    3116/    4375 : 4F                  	LD	C,A		; Save MSB
    3117/    4376 : F2 6E 43            PNORM:	JP	P,NORMAL	; Not done - Keep going
    3118/    4379 : 78                  	LD	A,B		; Number of bits shifted
    3119/    437A : 5C                  	LD	E,H		; Save HL in EB
    3120/    437B : 45                  	LD	B,L
    3121/    437C : B7                  	OR	A		; Any shifting done?
    3122/    437D : CA 89 43            	JP	Z,RONDUP	; No - Round it up
    3123/    4380 : 21 2C 81            	LD	HL,FPEXP	; Point to exponent
    3124/    4383 : 86                  	ADD	A,(HL)		; Add shifted bits
    3125/    4384 : 77                  	LD	(HL),A		; Re-save exponent
    3126/    4385 : D2 69 43            	JP	NC,RESZER	; Underflow - Result is zero
    3127/    4388 : C8                  	RET	Z		; Result is zero
    3128/    4389 : 78                  RONDUP: LD	A,B		; Get VLSB of number
    3129/    438A : 21 2C 81            RONDB:	LD	HL,FPEXP	; Point to exponent
    3130/    438D : B7                  	OR	A		; Any rounding?
    3131/    438E : FC 9B 43            	CALL	M,FPROND	; Yes - Round number up
    3132/    4391 : 46                  	LD	B,(HL)		; B = Exponent
    3133/    4392 : 23                  	INC	HL
    3134/    4393 : 7E                  	LD	A,(HL)		; Get sign of result
    3135/    4394 : E6 80               	AND	10000000B	; Only bit 7 needed
    3136/    4396 : A9                  	XOR	C		; Set correct sign
    3137/    4397 : 4F                  	LD	C,A		; Save correct sign in number
    3138/    4398 : C3 8A 45            	JP	FPBCDE		; Move BCDE to FPREG
    3139/    439B :                     ;
    3140/    439B : 1C                  FPROND: INC	E		; Round LSB
    3141/    439C : C0                  	RET	NZ		; Return if ok
    3142/    439D : 14                  	INC	D		; Round NMSB
    3143/    439E : C0                  	RET	NZ		; Return if ok
    3144/    439F : 0C                  	INC	C		; Round MSB
    3145/    43A0 : C0                  	RET	NZ		; Return if ok
    3146/    43A1 : 0E 80               	LD	C,80H		; Set normal value
    3147/    43A3 : 34                  	INC	(HL)		; Increment exponent
    3148/    43A4 : C0                  	RET	NZ		; Return if ok
    3149/    43A5 : C3 B3 32            	JP	OVERR		; Overflow error
    3150/    43A8 :                     ;
    3151/    43A8 : 7E                  PLUCDE: LD	A,(HL)		; Get LSB of FPREG
    3152/    43A9 : 83                  	ADD	A,E		; Add LSB of BCDE
    3153/    43AA : 5F                  	LD	E,A		; Save LSB of BCDE
    3154/    43AB : 23                  	INC	HL
    3155/    43AC : 7E                  	LD	A,(HL)		; Get NMSB of FPREG
    3156/    43AD : 8A                  	ADC	A,D		; Add NMSB of BCDE
    3157/    43AE : 57                  	LD	D,A		; Save NMSB of BCDE
    3158/    43AF : 23                  	INC	HL
    3159/    43B0 : 7E                  	LD	A,(HL)		; Get MSB of FPREG
    3160/    43B1 : 89                  	ADC	A,C		; Add MSB of BCDE
    3161/    43B2 : 4F                  	LD	C,A		; Save MSB of BCDE
    3162/    43B3 : C9                  	RET
    3163/    43B4 :                     ;
    3164/    43B4 : 21 2D 81            COMPL:	LD	HL,SGNRES	; Sign of result
    3165/    43B7 : 7E                  	LD	A,(HL)		; Get sign of result
    3166/    43B8 : 2F                  	CPL			; Negate it
    3167/    43B9 : 77                  	LD	(HL),A		; Put it back
    3168/    43BA : AF                  	XOR	A
    3169/    43BB : 6F                  	LD	L,A		; Set L to zero
    3170/    43BC : 90                  	SUB	B		; Negate exponent,set carry
    3171/    43BD : 47                  	LD	B,A		; Re-save exponent
    3172/    43BE : 7D                  	LD	A,L		; Load zero
    3173/    43BF : 9B                  	SBC	A,E		; Negate LSB
    3174/    43C0 : 5F                  	LD	E,A		; Re-save LSB
    3175/    43C1 : 7D                  	LD	A,L		; Load zero
    3176/    43C2 : 9A                  	SBC	A,D		; Negate NMSB
    3177/    43C3 : 57                  	LD	D,A		; Re-save NMSB
    3178/    43C4 : 7D                  	LD	A,L		; Load zero
    3179/    43C5 : 99                  	SBC	A,C		; Negate MSB
    3180/    43C6 : 4F                  	LD	C,A		; Re-save MSB
    3181/    43C7 : C9                  	RET
    3182/    43C8 :                     ;
    3183/    43C8 : 06 00               SCALE:	LD	B,0		; Clear underflow
    3184/    43CA : D6 08               SCALLP: SUB	8		; 8 bits (a whole byte)?
    3185/    43CC : DA D7 43            	JP	C,SHRITE	; No - Shift right A bits
    3186/    43CF : 43                  	LD	B,E		; <- Shift
    3187/    43D0 : 5A                  	LD	E,D		; <- right
    3188/    43D1 : 51                  	LD	D,C		; <- eight
    3189/    43D2 : 0E 00               	LD	C,0		; <- bits
    3190/    43D4 : C3 CA 43            	JP	SCALLP		; More bits to shift
    3191/    43D7 :                     ;
    3192/    43D7 : C6 09               SHRITE: ADD	A,8+1		; Adjust count
    3193/    43D9 : 6F                  	LD	L,A		; Save bits to shift
    3194/    43DA : AF                  SHRLP:	XOR	A		; Flag for all done
    3195/    43DB : 2D                  	DEC	L		; All shifting done?
    3196/    43DC : C8                  	RET	Z		; Yes - Return
    3197/    43DD : 79                  	LD	A,C		; Get MSB
    3198/    43DE : 1F                  SHRT1:	RRA			; Shift it right
    3199/    43DF : 4F                  	LD	C,A		; Re-save
    3200/    43E0 : 7A                  	LD	A,D		; Get NMSB
    3201/    43E1 : 1F                  	RRA			; Shift right with last bit
    3202/    43E2 : 57                  	LD	D,A		; Re-save it
    3203/    43E3 : 7B                  	LD	A,E		; Get LSB
    3204/    43E4 : 1F                  	RRA			; Shift right with last bit
    3205/    43E5 : 5F                  	LD	E,A		; Re-save it
    3206/    43E6 : 78                  	LD	A,B		; Get underflow
    3207/    43E7 : 1F                  	RRA			; Shift right with last bit
    3208/    43E8 : 47                  	LD	B,A		; Re-save underflow
    3209/    43E9 : C3 DA 43            	JP	SHRLP		; More bits to do
    3210/    43EC :                     ;
    3211/    43EC : 00 00 00 81         UNITY:	DB	 000H,000H,000H,081H	; 1.00000
    3212/    43F0 :                     ;
    3213/    43F0 : 03                  LOGTAB: DB	3			; Table used by LOG
    3214/    43F1 : AA 56 19 80         	DB	0AAH,056H,019H,080H	; 0.59898
    3215/    43F5 : F1 22 76 80         	DB	0F1H,022H,076H,080H	; 0.96147
    3216/    43F9 : 45 AA 38 82         	DB	045H,0AAH,038H,082H	; 2.88539
    3217/    43FD :                     ;
    3218/    43FD : CD 49 45            LOG:	CALL	TSTSGN		; Test sign of value
    3219/    4400 : B7                  	OR	A
    3220/    4401 : EA C1 37            	JP	PE,FCERR	; ?FC Error if <= zero
    3221/    4404 : 21 2C 81            	LD	HL,FPEXP	; Point to exponent
    3222/    4407 : 7E                  	LD	A,(HL)		; Get exponent
    3223/    4408 : 01 35 80            	LD	BC,8035H	; BCDE = SQR(1/2)
    3224/    440B : 11 F3 04            	LD	DE,04F3H
    3225/    440E : 90                  	SUB	B		; Scale value to be < 1
    3226/    440F : F5                  	PUSH	AF		; Save scale factor
    3227/    4410 : 70                  	LD	(HL),B		; Save new exponent
    3228/    4411 : D5                  	PUSH	DE		; Save SQR(1/2)
    3229/    4412 : C5                  	PUSH	BC
    3230/    4413 : CD 03 43            	CALL	FPADD		; Add SQR(1/2) to value
    3231/    4416 : C1                  	POP	BC		; Restore SQR(1/2)
    3232/    4417 : D1                  	POP	DE
    3233/    4418 : 04                  	INC	B		; Make it SQR(2)
    3234/    4419 : CD 9F 44            	CALL	DVBCDE		; Divide by SQR(2)
    3235/    441C : 21 EC 43            	LD	HL,UNITY	; Point to 1.
    3236/    441F : CD FA 42            	CALL	SUBPHL		; Subtract FPREG from 1
    3237/    4422 : 21 F0 43            	LD	HL,LOGTAB	; Coefficient table
    3238/    4425 : CD 91 48            	CALL	SUMSER		; Evaluate sum of series
    3239/    4428 : 01 80 80            	LD	BC,8080H	; BCDE = -0.5
    3240/    442B : 11 00 00            	LD	DE,0000H
    3241/    442E : CD 03 43            	CALL	FPADD		; Subtract 0.5 from FPREG
    3242/    4431 : F1                  	POP	AF		; Restore scale factor
    3243/    4432 : CD C4 46            	CALL	RSCALE		; Re-scale number
    3244/    4435 : 01 31 80            MULLN2: LD	BC,8031H	; BCDE = Ln(2)
    3245/    4438 : 11 18 72            	LD	DE,7218H
    3246/    443B : 21                  	DB	21H		; Skip "POP BC" and "POP DE"
    3247/    443C :                     ;
    3248/    443C : C1                  MULT:	POP	BC		; Get number from stack
    3249/    443D : D1                  	POP	DE
    3250/    443E : CD 49 45            FPMULT: CALL	TSTSGN		; Test sign of FPREG
    3251/    4441 : C8                  	RET	Z		; Return zero if zero
    3252/    4442 : 2E 00               	LD	L,0		; Flag add exponents
    3253/    4444 : CD 07 45            	CALL	ADDEXP		; Add exponents
    3254/    4447 : 79                  	LD	A,C		; Get MSB of multiplier
    3255/    4448 : 32 3B 81            	LD	(MULVAL),A	; Save MSB of multiplier
    3256/    444B : EB                  	EX	DE,HL
    3257/    444C : 22 3C 81            	LD	(MULVAL+1),HL	; Save rest of multiplier
    3258/    444F : 01 00 00            	LD	BC,0		; Partial product (BCDE) = zero
    3259/    4452 : 50                  	LD	D,B
    3260/    4453 : 58                  	LD	E,B
    3261/    4454 : 21 54 43            	LD	HL,BNORM	; Address of normalise
    3262/    4457 : E5                  	PUSH	HL		; Save for return
    3263/    4458 : 21 60 44            	LD	HL,MULT8	; Address of 8 bit multiply
    3264/    445B : E5                  	PUSH	HL		; Save for NMSB,MSB
    3265/    445C : E5                  	PUSH	HL		; 
    3266/    445D : 21 29 81            	LD	HL,FPREG	; Point to number
    3267/    4460 : 7E                  MULT8:	LD	A,(HL)		; Get LSB of number
    3268/    4461 : 23                  	INC	HL		; Point to NMSB
    3269/    4462 : B7                  	OR	A		; Test LSB
    3270/    4463 : CA 8C 44            	JP	Z,BYTSFT	; Zero - shift to next byte
    3271/    4466 : E5                  	PUSH	HL		; Save address of number
    3272/    4467 : 2E 08               	LD	L,8		; 8 bits to multiply by
    3273/    4469 : 1F                  MUL8LP: RRA			; Shift LSB right
    3274/    446A : 67                  	LD	H,A		; Save LSB
    3275/    446B : 79                  	LD	A,C		; Get MSB
    3276/    446C : D2 7A 44            	JP	NC,NOMADD	; Bit was zero - Don't add
    3277/    446F : E5                  	PUSH	HL		; Save LSB and count
    3278/    4470 : 2A 3C 81            	LD	HL,(MULVAL+1)	; Get LSB and NMSB
    3279/    4473 : 19                  	ADD	HL,DE		; Add NMSB and LSB
    3280/    4474 : EB                  	EX	DE,HL		; Leave sum in DE
    3281/    4475 : E1                  	POP	HL		; Restore MSB and count
    3282/    4476 : 3A 3B 81            	LD	A,(MULVAL)	; Get MSB of multiplier
    3283/    4479 : 89                  	ADC	A,C		; Add MSB
    3284/    447A : 1F                  NOMADD: RRA			; Shift MSB right
    3285/    447B : 4F                  	LD	C,A		; Re-save MSB
    3286/    447C : 7A                  	LD	A,D		; Get NMSB
    3287/    447D : 1F                  	RRA			; Shift NMSB right
    3288/    447E : 57                  	LD	D,A		; Re-save NMSB
    3289/    447F : 7B                  	LD	A,E		; Get LSB
    3290/    4480 : 1F                  	RRA			; Shift LSB right
    3291/    4481 : 5F                  	LD	E,A		; Re-save LSB
    3292/    4482 : 78                  	LD	A,B		; Get VLSB
    3293/    4483 : 1F                  	RRA			; Shift VLSB right
    3294/    4484 : 47                  	LD	B,A		; Re-save VLSB
    3295/    4485 : 2D                  	DEC	L		; Count bits multiplied
    3296/    4486 : 7C                  	LD	A,H		; Get LSB of multiplier
    3297/    4487 : C2 69 44            	JP	NZ,MUL8LP	; More - Do it
    3298/    448A : E1                  POPHRT: POP	HL		; Restore address of number
    3299/    448B : C9                  	RET
    3300/    448C :                     ;
    3301/    448C : 43                  BYTSFT: LD	B,E		; Shift partial product left
    3302/    448D : 5A                  	LD	E,D
    3303/    448E : 51                  	LD	D,C
    3304/    448F : 4F                  	LD	C,A
    3305/    4490 : C9                  	RET
    3306/    4491 :                     ;
    3307/    4491 : CD 7A 45            DIV10:	CALL	STAKFP		; Save FPREG on stack
    3308/    4494 : 01 20 84            	LD	BC,8420H	; BCDE = 10.
    3309/    4497 : 11 00 00            	LD	DE,0000H
    3310/    449A : CD 8A 45            	CALL	FPBCDE		; Move 10 to FPREG
    3311/    449D :                     ;
    3312/    449D : C1                  DIV:	POP	BC		; Get number from stack
    3313/    449E : D1                  	POP	DE
    3314/    449F : CD 49 45            DVBCDE: CALL	TSTSGN		; Test sign of FPREG
    3315/    44A2 : CA A7 32            	JP	Z,DZERR		; Error if division by zero
    3316/    44A5 : 2E FF               	LD	L,-1		; Flag subtract exponents
    3317/    44A7 : CD 07 45            	CALL	ADDEXP		; Subtract exponents
    3318/    44AA : 34                  	INC	(HL)		; Add 2 to exponent to adjust
    3319/    44AB : 34                  	INC	(HL)
    3320/    44AC : 2B                  	DEC	HL		; Point to MSB
    3321/    44AD : 7E                  	LD	A,(HL)		; Get MSB of dividend
    3322/    44AE : 32 57 80            	LD	(DIV3),A	; Save for subtraction
    3323/    44B1 : 2B                  	DEC	HL
    3324/    44B2 : 7E                  	LD	A,(HL)		; Get NMSB of dividend
    3325/    44B3 : 32 53 80            	LD	(DIV2),A	; Save for subtraction
    3326/    44B6 : 2B                  	DEC	HL
    3327/    44B7 : 7E                  	LD	A,(HL)		; Get MSB of dividend
    3328/    44B8 : 32 4F 80            	LD	(DIV1),A	; Save for subtraction
    3329/    44BB : 41                  	LD	B,C		; Get MSB
    3330/    44BC : EB                  	EX	DE,HL		; NMSB,LSB to HL
    3331/    44BD : AF                  	XOR	A
    3332/    44BE : 4F                  	LD	C,A		; Clear MSB of quotient
    3333/    44BF : 57                  	LD	D,A		; Clear NMSB of quotient
    3334/    44C0 : 5F                  	LD	E,A		; Clear LSB of quotient
    3335/    44C1 : 32 5A 80            	LD	(DIV4),A	; Clear overflow count
    3336/    44C4 : E5                  DIVLP:	PUSH	HL		; Save divisor
    3337/    44C5 : C5                  	PUSH	BC
    3338/    44C6 : 7D                  	LD	A,L		; Get LSB of number
    3339/    44C7 : CD 4E 80            	CALL	DIVSUP		; Subt' divisor from dividend
    3340/    44CA : DE 00               	SBC	A,0		; Count for overflows
    3341/    44CC : 3F                  	CCF
    3342/    44CD : D2 D7 44            	JP	NC,RESDIV	; Restore divisor if borrow
    3343/    44D0 : 32 5A 80            	LD	(DIV4),A	; Re-save overflow count
    3344/    44D3 : F1                  	POP	AF		; Scrap divisor
    3345/    44D4 : F1                  	POP	AF
    3346/    44D5 : 37                  	SCF			; Set carry to
    3347/    44D6 : D2                  	DB	0D2H		; Skip "POP BC" and "POP HL"
    3348/    44D7 :                     ;
    3349/    44D7 : C1                  RESDIV: POP	BC		; Restore divisor
    3350/    44D8 : E1                  	POP	HL
    3351/    44D9 : 79                  	LD	A,C		; Get MSB of quotient
    3352/    44DA : 3C                  	INC	A
    3353/    44DB : 3D                  	DEC	A
    3354/    44DC : 1F                  	RRA			; Bit 0 to bit 7
    3355/    44DD : FA 8A 43            	JP	M,RONDB		; Done - Normalise result
    3356/    44E0 : 17                  	RLA			; Restore carry
    3357/    44E1 : 7B                  	LD	A,E		; Get LSB of quotient
    3358/    44E2 : 17                  	RLA			; Double it
    3359/    44E3 : 5F                  	LD	E,A		; Put it back
    3360/    44E4 : 7A                  	LD	A,D		; Get NMSB of quotient
    3361/    44E5 : 17                  	RLA			; Double it
    3362/    44E6 : 57                  	LD	D,A		; Put it back
    3363/    44E7 : 79                  	LD	A,C		; Get MSB of quotient
    3364/    44E8 : 17                  	RLA			; Double it
    3365/    44E9 : 4F                  	LD	C,A		; Put it back
    3366/    44EA : 29                  	ADD	HL,HL		; Double NMSB,LSB of divisor
    3367/    44EB : 78                  	LD	A,B		; Get MSB of divisor
    3368/    44EC : 17                  	RLA			; Double it
    3369/    44ED : 47                  	LD	B,A		; Put it back
    3370/    44EE : 3A 5A 80            	LD	A,(DIV4)	; Get VLSB of quotient
    3371/    44F1 : 17                  	RLA			; Double it
    3372/    44F2 : 32 5A 80            	LD	(DIV4),A	; Put it back
    3373/    44F5 : 79                  	LD	A,C		; Get MSB of quotient
    3374/    44F6 : B2                  	OR	D		; Merge NMSB
    3375/    44F7 : B3                  	OR	E		; Merge LSB
    3376/    44F8 : C2 C4 44            	JP	NZ,DIVLP	; Not done - Keep dividing
    3377/    44FB : E5                  	PUSH	HL		; Save divisor
    3378/    44FC : 21 2C 81            	LD	HL,FPEXP	; Point to exponent
    3379/    44FF : 35                  	DEC	(HL)		; Divide by 2
    3380/    4500 : E1                  	POP	HL		; Restore divisor
    3381/    4501 : C2 C4 44            	JP	NZ,DIVLP	; Ok - Keep going
    3382/    4504 : C3 B3 32            	JP	OVERR		; Overflow error
    3383/    4507 :                     ;
    3384/    4507 : 78                  ADDEXP: LD	A,B		; Get exponent of dividend
    3385/    4508 : B7                  	OR	A		; Test it
    3386/    4509 : CA 2B 45            	JP	Z,OVTST3	; Zero - Result zero
    3387/    450C : 7D                  	LD	A,L		; Get add/subtract flag
    3388/    450D : 21 2C 81            	LD	HL,FPEXP	; Point to exponent
    3389/    4510 : AE                  	XOR	(HL)		; Add or subtract it
    3390/    4511 : 80                  	ADD	A,B		; Add the other exponent
    3391/    4512 : 47                  	LD	B,A		; Save new exponent
    3392/    4513 : 1F                  	RRA			; Test exponent for overflow
    3393/    4514 : A8                  	XOR	B
    3394/    4515 : 78                  	LD	A,B		; Get exponent
    3395/    4516 : F2 2A 45            	JP	P,OVTST2	; Positive - Test for overflow
    3396/    4519 : C6 80               	ADD	A,80H		; Add excess 128
    3397/    451B : 77                  	LD	(HL),A		; Save new exponent
    3398/    451C : CA 8A 44            	JP	Z,POPHRT	; Zero - Result zero
    3399/    451F : CD AF 45            	CALL	SIGNS		; Set MSBs and sign of result
    3400/    4522 : 77                  	LD	(HL),A		; Save new exponent
    3401/    4523 : 2B                  	DEC	HL		; Point to MSB
    3402/    4524 : C9                  	RET
    3403/    4525 :                     ;
    3404/    4525 : CD 49 45            OVTST1: CALL	TSTSGN		; Test sign of FPREG
    3405/    4528 : 2F                  	CPL			; Invert sign
    3406/    4529 : E1                  	POP	HL		; Clean up stack
    3407/    452A : B7                  OVTST2: OR	A		; Test if new exponent zero
    3408/    452B : E1                  OVTST3: POP	HL		; Clear off return address
    3409/    452C : F2 69 43            	JP	P,RESZER	; Result zero
    3410/    452F : C3 B3 32            	JP	OVERR		; Overflow error
    3411/    4532 :                     ;
    3412/    4532 : CD 95 45            MLSP10: CALL	BCDEFP		; Move FPREG to BCDE
    3413/    4535 : 78                  	LD	A,B		; Get exponent
    3414/    4536 : B7                  	OR	A		; Is it zero?
    3415/    4537 : C8                  	RET	Z		; Yes - Result is zero
    3416/    4538 : C6 02               	ADD	A,2		; Multiply by 4
    3417/    453A : DA B3 32            	JP	C,OVERR		; Overflow - ?OV Error
    3418/    453D : 47                  	LD	B,A		; Re-save exponent
    3419/    453E : CD 03 43            	CALL	FPADD		; Add BCDE to FPREG (Times 5)
    3420/    4541 : 21 2C 81            	LD	HL,FPEXP	; Point to exponent
    3421/    4544 : 34                  	INC	(HL)		; Double number (Times 10)
    3422/    4545 : C0                  	RET	NZ		; Ok - Return
    3423/    4546 : C3 B3 32            	JP	OVERR		; Overflow error
    3424/    4549 :                     ;
    3425/    4549 : 3A 2C 81            TSTSGN: LD	A,(FPEXP)	; Get sign of FPREG
    3426/    454C : B7                  	OR	A
    3427/    454D : C8                  	RET	Z		; RETurn if number is zero
    3428/    454E : 3A 2B 81            	LD	A,(FPREG+2)	; Get MSB of FPREG
    3429/    4551 : FE                  	DB	0FEH		; Test sign
    3430/    4552 : 2F                  RETREL: CPL			; Invert sign
    3431/    4553 : 17                  	RLA			; Sign bit to carry
    3432/    4554 : 9F                  FLGDIF: SBC	A,A		; Carry to all bits of A
    3433/    4555 : C0                  	RET	NZ		; Return -1 if negative
    3434/    4556 : 3C                  	INC	A		; Bump to +1
    3435/    4557 : C9                  	RET			; Positive - Return +1
    3436/    4558 :                     ;
    3437/    4558 : CD 49 45            SGN:	CALL	TSTSGN		; Test sign of FPREG
    3438/    455B : 06 88               FLGREL: LD	B,80H+8		; 8 bit integer in exponent
    3439/    455D : 11 00 00            	LD	DE,0		; Zero NMSB and LSB
    3440/    4560 : 21 2C 81            RETINT: LD	HL,FPEXP	; Point to exponent
    3441/    4563 : 4F                  	LD	C,A		; CDE = MSB,NMSB and LSB
    3442/    4564 : 70                  	LD	(HL),B		; Save exponent
    3443/    4565 : 06 00               	LD	B,0		; CDE = integer to normalise
    3444/    4567 : 23                  	INC	HL		; Point to sign of result
    3445/    4568 : 36 80               	LD	(HL),80H	; Set sign of result
    3446/    456A : 17                  	RLA			; Carry = sign of integer
    3447/    456B : C3 51 43            	JP	CONPOS		; Set sign of result
    3448/    456E :                     ;
    3449/    456E : CD 49 45            ABS:	CALL	TSTSGN		; Test sign of FPREG
    3450/    4571 : F0                  	RET	P		; Return if positive
    3451/    4572 : 21 2B 81            INVSGN: LD	HL,FPREG+2	; Point to MSB
    3452/    4575 : 7E                  	LD	A,(HL)		; Get sign of mantissa
    3453/    4576 : EE 80               	XOR	80H		; Invert sign of mantissa
    3454/    4578 : 77                  	LD	(HL),A		; Re-save sign of mantissa
    3455/    4579 : C9                  	RET
    3456/    457A :                     ;
    3457/    457A : EB                  STAKFP: EX	DE,HL		; Save code string address
    3458/    457B : 2A 29 81            	LD	HL,(FPREG)	; LSB,NLSB of FPREG
    3459/    457E : E3                  	EX	(SP),HL		; Stack them,get return
    3460/    457F : E5                  	PUSH	HL		; Re-save return
    3461/    4580 : 2A 2B 81            	LD	HL,(FPREG+2)	; MSB and exponent of FPREG
    3462/    4583 : E3                  	EX	(SP),HL		; Stack them,get return
    3463/    4584 : E5                  	PUSH	HL		; Re-save return
    3464/    4585 : EB                  	EX	DE,HL		; Restore code string address
    3465/    4586 : C9                  	RET
    3466/    4587 :                     ;
    3467/    4587 : CD 98 45            PHLTFP: CALL	LOADFP		; Number at HL to BCDE
    3468/    458A : EB                  FPBCDE: EX	DE,HL		; Save code string address
    3469/    458B : 22 29 81            	LD	(FPREG),HL	; Save LSB,NLSB of number
    3470/    458E : 60                  	LD	H,B		; Exponent of number
    3471/    458F : 69                  	LD	L,C		; MSB of number
    3472/    4590 : 22 2B 81            	LD	(FPREG+2),HL	; Save MSB and exponent
    3473/    4593 : EB                  	EX	DE,HL		; Restore code string address
    3474/    4594 : C9                  	RET
    3475/    4595 :                     ;
    3476/    4595 : 21 29 81            BCDEFP: LD	HL,FPREG	; Point to FPREG
    3477/    4598 : 5E                  LOADFP: LD	E,(HL)		; Get LSB of number
    3478/    4599 : 23                  	INC	HL
    3479/    459A : 56                  	LD	D,(HL)		; Get NMSB of number
    3480/    459B : 23                  	INC	HL
    3481/    459C : 4E                  	LD	C,(HL)		; Get MSB of number
    3482/    459D : 23                  	INC	HL
    3483/    459E : 46                  	LD	B,(HL)		; Get exponent of number
    3484/    459F : 23                  INCHL:	INC	HL		; Used for conditional "INC HL"
    3485/    45A0 : C9                  	RET
    3486/    45A1 :                     ;
    3487/    45A1 : 11 29 81            FPTHL:	LD	DE,FPREG	; Point to FPREG
    3488/    45A4 : 06 04               DETHL4: LD	B,4		; 4 bytes to move
    3489/    45A6 : 1A                  DETHLB: LD	A,(DE)		; Get source
    3490/    45A7 : 77                  	LD	(HL),A		; Save destination
    3491/    45A8 : 13                  	INC	DE		; Next source
    3492/    45A9 : 23                  	INC	HL		; Next destination
    3493/    45AA : 05                  	DEC	B		; Count bytes
    3494/    45AB : C2 A6 45            	JP	NZ,DETHLB	; Loop if more
    3495/    45AE : C9                  	RET
    3496/    45AF :                     ;
    3497/    45AF : 21 2B 81            SIGNS:	LD	HL,FPREG+2	; Point to MSB of FPREG
    3498/    45B2 : 7E                  	LD	A,(HL)		; Get MSB
    3499/    45B3 : 07                  	RLCA			; Old sign to carry
    3500/    45B4 : 37                  	SCF			; Set MSBit
    3501/    45B5 : 1F                  	RRA			; Set MSBit of MSB
    3502/    45B6 : 77                  	LD	(HL),A		; Save new MSB
    3503/    45B7 : 3F                  	CCF			; Complement sign
    3504/    45B8 : 1F                  	RRA			; Old sign to carry
    3505/    45B9 : 23                  	INC	HL
    3506/    45BA : 23                  	INC	HL
    3507/    45BB : 77                  	LD	(HL),A		; Set sign of result
    3508/    45BC : 79                  	LD	A,C		; Get MSB
    3509/    45BD : 07                  	RLCA			; Old sign to carry
    3510/    45BE : 37                  	SCF			; Set MSBit
    3511/    45BF : 1F                  	RRA			; Set MSBit of MSB
    3512/    45C0 : 4F                  	LD	C,A		; Save MSB
    3513/    45C1 : 1F                  	RRA
    3514/    45C2 : AE                  	XOR	(HL)		; New sign of result
    3515/    45C3 : C9                  	RET
    3516/    45C4 :                     ;
    3517/    45C4 : 78                  CMPNUM: LD	A,B		; Get exponent of number
    3518/    45C5 : B7                  	OR	A
    3519/    45C6 : CA 49 45            	JP	Z,TSTSGN	; Zero - Test sign of FPREG
    3520/    45C9 : 21 52 45            	LD	HL,RETREL	; Return relation routine
    3521/    45CC : E5                  	PUSH	HL		; Save for return
    3522/    45CD : CD 49 45            	CALL	TSTSGN		; Test sign of FPREG
    3523/    45D0 : 79                  	LD	A,C		; Get MSB of number
    3524/    45D1 : C8                  	RET	Z		; FPREG zero - Number's MSB
    3525/    45D2 : 21 2B 81            	LD	HL,FPREG+2	; MSB of FPREG
    3526/    45D5 : AE                  	XOR	(HL)		; Combine signs
    3527/    45D6 : 79                  	LD	A,C		; Get MSB of number
    3528/    45D7 : F8                  	RET	M		; Exit if signs different
    3529/    45D8 : CD DE 45            	CALL	CMPFP		; Compare FP numbers
    3530/    45DB : 1F                  	RRA			; Get carry to sign
    3531/    45DC : A9                  	XOR	C		; Combine with MSB of number
    3532/    45DD : C9                  	RET
    3533/    45DE :                     ;
    3534/    45DE : 23                  CMPFP:	INC	HL		; Point to exponent
    3535/    45DF : 78                  	LD	A,B		; Get exponent
    3536/    45E0 : BE                  	CP	(HL)		; Compare exponents
    3537/    45E1 : C0                  	RET	NZ		; Different
    3538/    45E2 : 2B                  	DEC	HL		; Point to MBS
    3539/    45E3 : 79                  	LD	A,C		; Get MSB
    3540/    45E4 : BE                  	CP	(HL)		; Compare MSBs
    3541/    45E5 : C0                  	RET	NZ		; Different
    3542/    45E6 : 2B                  	DEC	HL		; Point to NMSB
    3543/    45E7 : 7A                  	LD	A,D		; Get NMSB
    3544/    45E8 : BE                  	CP	(HL)		; Compare NMSBs
    3545/    45E9 : C0                  	RET	NZ		; Different
    3546/    45EA : 2B                  	DEC	HL		; Point to LSB
    3547/    45EB : 7B                  	LD	A,E		; Get LSB
    3548/    45EC : 96                  	SUB	(HL)		; Compare LSBs
    3549/    45ED : C0                  	RET	NZ		; Different
    3550/    45EE : E1                  	POP	HL		; Drop RETurn
    3551/    45EF : E1                  	POP	HL		; Drop another RETurn
    3552/    45F0 : C9                  	RET
    3553/    45F1 :                     ;
    3554/    45F1 : 47                  FPINT:	LD	B,A		; <- Move
    3555/    45F2 : 4F                  	LD	C,A		; <- exponent
    3556/    45F3 : 57                  	LD	D,A		; <- to all
    3557/    45F4 : 5F                  	LD	E,A		; <- bits
    3558/    45F5 : B7                  	OR	A		; Test exponent
    3559/    45F6 : C8                  	RET	Z		; Zero - Return zero
    3560/    45F7 : E5                  	PUSH	HL		; Save pointer to number
    3561/    45F8 : CD 95 45            	CALL	BCDEFP		; Move FPREG to BCDE
    3562/    45FB : CD AF 45            	CALL	SIGNS		; Set MSBs & sign of result
    3563/    45FE : AE                  	XOR	(HL)		; Combine with sign of FPREG
    3564/    45FF : 67                  	LD	H,A		; Save combined signs
    3565/    4600 : FC 15 46            	CALL	M,DCBCDE	; Negative - Decrement BCDE
    3566/    4603 : 3E 98               	LD	A,80H+24	; 24 bits
    3567/    4605 : 90                  	SUB	B		; Bits to shift
    3568/    4606 : CD C8 43            	CALL	SCALE		; Shift BCDE
    3569/    4609 : 7C                  	LD	A,H		; Get combined sign
    3570/    460A : 17                  	RLA			; Sign to carry
    3571/    460B : DC 9B 43            	CALL	C,FPROND	; Negative - Round number up
    3572/    460E : 06 00               	LD	B,0		; Zero exponent
    3573/    4610 : DC B4 43            	CALL	C,COMPL		; If negative make positive
    3574/    4613 : E1                  	POP	HL		; Restore pointer to number
    3575/    4614 : C9                  	RET
    3576/    4615 :                     ;
    3577/    4615 : 1B                  DCBCDE: DEC	DE		; Decrement BCDE
    3578/    4616 : 7A                  	LD	A,D		; Test LSBs
    3579/    4617 : A3                  	AND	E
    3580/    4618 : 3C                  	INC	A
    3581/    4619 : C0                  	RET	NZ		; Exit if LSBs not FFFF
    3582/    461A : 0B                  	DEC	BC		; Decrement MSBs
    3583/    461B : C9                  	RET
    3584/    461C :                     ;
    3585/    461C : 21 2C 81            INT:	LD	HL,FPEXP	; Point to exponent
    3586/    461F : 7E                  	LD	A,(HL)		; Get exponent
    3587/    4620 : FE 98               	CP	80H+24		; Integer accuracy only?
    3588/    4622 : 3A 29 81            	LD	A,(FPREG)	; Get LSB
    3589/    4625 : D0                  	RET	NC		; Yes - Already integer
    3590/    4626 : 7E                  	LD	A,(HL)		; Get exponent
    3591/    4627 : CD F1 45            	CALL	FPINT		; F.P to integer
    3592/    462A : 36 98               	LD	(HL),80H+24	; Save 24 bit integer
    3593/    462C : 7B                  	LD	A,E		; Get LSB of number
    3594/    462D : F5                  	PUSH	AF		; Save LSB
    3595/    462E : 79                  	LD	A,C		; Get MSB of number
    3596/    462F : 17                  	RLA			; Sign to carry
    3597/    4630 : CD 51 43            	CALL	CONPOS		; Set sign of result
    3598/    4633 : F1                  	POP	AF		; Restore LSB of number
    3599/    4634 : C9                  	RET
    3600/    4635 :                     ;
    3601/    4635 : 21 00 00            MLDEBC: LD	HL,0		; Clear partial product
    3602/    4638 : 78                  	LD	A,B		; Test multiplier
    3603/    4639 : B1                  	OR	C
    3604/    463A : C8                  	RET	Z		; Return zero if zero
    3605/    463B : 3E 10               	LD	A,16		; 16 bits
    3606/    463D : 29                  MLDBLP: ADD	HL,HL		; Shift P.P left
    3607/    463E : DA 75 3E            	JP	C,BSERR		; ?BS Error if overflow
    3608/    4641 : EB                  	EX	DE,HL
    3609/    4642 : 29                  	ADD	HL,HL		; Shift multiplier left
    3610/    4643 : EB                  	EX	DE,HL
    3611/    4644 : D2 4B 46            	JP	NC,NOMLAD	; Bit was zero - No add
    3612/    4647 : 09                  	ADD	HL,BC		; Add multiplicand
    3613/    4648 : DA 75 3E            	JP	C,BSERR		; ?BS Error if overflow
    3614/    464B : 3D                  NOMLAD: DEC	A		; Count bits
    3615/    464C : C2 3D 46            	JP	NZ,MLDBLP	; More
    3616/    464F : C9                  	RET
    3617/    4650 :                     ;
    3618/    4650 : FE 2D               ASCTFP: CP	'-'		; Negative?
    3619/    4652 : F5                  	PUSH	AF		; Save it and flags
    3620/    4653 : CA 5C 46            	JP	Z,CNVNUM	; Yes - Convert number
    3621/    4656 : FE 2B               	CP	'+'		; Positive?
    3622/    4658 : CA 5C 46            	JP	Z,CNVNUM	; Yes - Convert number
    3623/    465B : 2B                  	DEC	HL		; DEC 'cos GETCHR INCs
    3624/    465C : CD 69 43            CNVNUM: CALL	RESZER		; Set result to zero
    3625/    465F : 47                  	LD	B,A		; Digits after point counter
    3626/    4660 : 57                  	LD	D,A		; Sign of exponent
    3627/    4661 : 5F                  	LD	E,A		; Exponent of ten
    3628/    4662 : 2F                  	CPL
    3629/    4663 : 4F                  	LD	C,A		; Before or after point flag
    3630/    4664 : CD FA 36            MANLP:	CALL	GETCHR		; Get next character
    3631/    4667 : DA AD 46            	JP	C,ADDIG		; Digit - Add to number
    3632/    466A : FE 2E               	CP	'.'
    3633/    466C : CA 88 46            	JP	Z,DPOINT	; '.' - Flag point
    3634/    466F : FE 45               	CP	'E'
    3635/    4671 : C2 8C 46            	JP	NZ,CONEXP	; Not 'E' - Scale number
    3636/    4674 : CD FA 36            	CALL	GETCHR		; Get next character
    3637/    4677 : CD A0 3C            	CALL	SGNEXP		; Get sign of exponent
    3638/    467A : CD FA 36            EXPLP:	CALL	GETCHR		; Get next character
    3639/    467D : DA CF 46            	JP	C,EDIGIT	; Digit - Add to exponent
    3640/    4680 : 14                  	INC	D		; Is sign negative?
    3641/    4681 : C2 8C 46            	JP	NZ,CONEXP	; No - Scale number
    3642/    4684 : AF                  	XOR	A
    3643/    4685 : 93                  	SUB	E		; Negate exponent
    3644/    4686 : 5F                  	LD	E,A		; And re-save it
    3645/    4687 : 0C                  	INC	C		; Flag end of number
    3646/    4688 : 0C                  DPOINT: INC	C		; Flag point passed
    3647/    4689 : CA 64 46            	JP	Z,MANLP		; Zero - Get another digit
    3648/    468C : E5                  CONEXP: PUSH	HL		; Save code string address
    3649/    468D : 7B                  	LD	A,E		; Get exponent
    3650/    468E : 90                  	SUB	B		; Subtract digits after point
    3651/    468F : F4 A5 46            SCALMI: CALL	P,SCALPL	; Positive - Multiply number
    3652/    4692 : F2 9B 46            	JP	P,ENDCON	; Positive - All done
    3653/    4695 : F5                  	PUSH	AF		; Save number of times to /10
    3654/    4696 : CD 91 44            	CALL	DIV10		; Divide by 10
    3655/    4699 : F1                  	POP	AF		; Restore count
    3656/    469A : 3C                  	INC	A		; Count divides
    3657/    469B :                     ;
    3658/    469B : C2 8F 46            ENDCON: JP	NZ,SCALMI	; More to do
    3659/    469E : D1                  	POP	DE		; Restore code string address
    3660/    469F : F1                  	POP	AF		; Restore sign of number
    3661/    46A0 : CC 72 45            	CALL	Z,INVSGN	; Negative - Negate number
    3662/    46A3 : EB                  	EX	DE,HL		; Code string address to HL
    3663/    46A4 : C9                  	RET
    3664/    46A5 :                     ;
    3665/    46A5 : C8                  SCALPL: RET	Z		; Exit if no scaling needed
    3666/    46A6 : F5                  MULTEN: PUSH	AF		; Save count
    3667/    46A7 : CD 32 45            	CALL	MLSP10		; Multiply number by 10
    3668/    46AA : F1                  	POP	AF		; Restore count
    3669/    46AB : 3D                  	DEC	A		; Count multiplies
    3670/    46AC : C9                  	RET
    3671/    46AD :                     ;
    3672/    46AD : D5                  ADDIG:	PUSH	DE		; Save sign of exponent
    3673/    46AE : 57                  	LD	D,A		; Save digit
    3674/    46AF : 78                  	LD	A,B		; Get digits after point
    3675/    46B0 : 89                  	ADC	A,C		; Add one if after point
    3676/    46B1 : 47                  	LD	B,A		; Re-save counter
    3677/    46B2 : C5                  	PUSH	BC		; Save point flags
    3678/    46B3 : E5                  	PUSH	HL		; Save code string address
    3679/    46B4 : D5                  	PUSH	DE		; Save digit
    3680/    46B5 : CD 32 45            	CALL	MLSP10		; Multiply number by 10
    3681/    46B8 : F1                  	POP	AF		; Restore digit
    3682/    46B9 : D6 30               	SUB	'0'		; Make it absolute
    3683/    46BB : CD C4 46            	CALL	RSCALE		; Re-scale number
    3684/    46BE : E1                  	POP	HL		; Restore code string address
    3685/    46BF : C1                  	POP	BC		; Restore point flags
    3686/    46C0 : D1                  	POP	DE		; Restore sign of exponent
    3687/    46C1 : C3 64 46            	JP	MANLP		; Get another digit
    3688/    46C4 :                     ;
    3689/    46C4 : CD 7A 45            RSCALE: CALL	STAKFP		; Put number on stack
    3690/    46C7 : CD 5B 45            	CALL	FLGREL		; Digit to add to FPREG
    3691/    46CA : C1                  PADD:	POP	BC		; Restore number
    3692/    46CB : D1                  	POP	DE
    3693/    46CC : C3 03 43            	JP	FPADD		; Add BCDE to FPREG and return
    3694/    46CF :                     ;
    3695/    46CF : 7B                  EDIGIT: LD	A,E		; Get digit
    3696/    46D0 : 07                  	RLCA			; Times 2
    3697/    46D1 : 07                  	RLCA			; Times 4
    3698/    46D2 : 83                  	ADD	A,E		; Times 5
    3699/    46D3 : 07                  	RLCA			; Times 10
    3700/    46D4 : 86                  	ADD	A,(HL)		; Add next digit
    3701/    46D5 : D6 30               	SUB	'0'		; Make it absolute
    3702/    46D7 : 5F                  	LD	E,A		; Save new digit
    3703/    46D8 : C3 7A 46            	JP	EXPLP		; Look for another digit
    3704/    46DB :                     ;
    3705/    46DB : E5                  LINEIN: PUSH	HL		; Save code string address
    3706/    46DC : 21 3C 32            	LD	HL,INMSG	; Output " in "
    3707/    46DF : CD 40 40            	CALL	PRS		; Output string at HL
    3708/    46E2 : E1                  	POP	HL		; Restore code string address
    3709/    46E3 : EB                  PRNTHL: EX	DE,HL		; Code string address to DE
    3710/    46E4 : AF                  	XOR	A
    3711/    46E5 : 06 98               	LD	B,80H+24	; 24 bits
    3712/    46E7 : CD 60 45            	CALL	RETINT		; Return the integer
    3713/    46EA : 21 3F 40            	LD	HL,PRNUMS	; Print number string
    3714/    46ED : E5                  	PUSH	HL		; Save for return
    3715/    46EE : 21 2E 81            NUMASC: LD	HL,PBUFF	; Convert number to ASCII
    3716/    46F1 : E5                  	PUSH	HL		; Save for return
    3717/    46F2 : CD 49 45            	CALL	TSTSGN		; Test sign of FPREG
    3718/    46F5 : 36 20               	LD	(HL),' '	; Space at start
    3719/    46F7 : F2 FC 46            	JP	P,SPCFST	; Positive - Space to start
    3720/    46FA : 36 2D               	LD	(HL),'-'	; '-' sign at start
    3721/    46FC : 23                  SPCFST: INC	HL		; First byte of number
    3722/    46FD : 36 30               	LD	(HL),'0'	; '0' if zero
    3723/    46FF : CA B2 47            	JP	Z,JSTZER	; Return '0' if zero
    3724/    4702 : E5                  	PUSH	HL		; Save buffer address
    3725/    4703 : FC 72 45            	CALL	M,INVSGN	; Negate FPREG if negative
    3726/    4706 : AF                  	XOR	A		; Zero A
    3727/    4707 : F5                  	PUSH	AF		; Save it
    3728/    4708 : CD B8 47            	CALL	RNGTST		; Test number is in range
    3729/    470B : 01 43 91            SIXDIG: LD	BC,9143H	; BCDE - 99999.9
    3730/    470E : 11 F8 4F            	LD	DE,4FF8H
    3731/    4711 : CD C4 45            	CALL	CMPNUM		; Compare numbers
    3732/    4714 : B7                  	OR	A
    3733/    4715 : E2 29 47            	JP	PO,INRNG	; > 99999.9 - Sort it out
    3734/    4718 : F1                  	POP	AF		; Restore count
    3735/    4719 : CD A6 46            	CALL	MULTEN		; Multiply by ten
    3736/    471C : F5                  	PUSH	AF		; Re-save count
    3737/    471D : C3 0B 47            	JP	SIXDIG		; Test it again
    3738/    4720 :                     ;
    3739/    4720 : CD 91 44            GTSIXD: CALL	DIV10		; Divide by 10
    3740/    4723 : F1                  	POP	AF		; Get count
    3741/    4724 : 3C                  	INC	A		; Count divides
    3742/    4725 : F5                  	PUSH	AF		; Re-save count
    3743/    4726 : CD B8 47            	CALL	RNGTST		; Test number is in range
    3744/    4729 : CD F1 42            INRNG:	CALL	ROUND		; Add 0.5 to FPREG
    3745/    472C : 3C                  	INC	A
    3746/    472D : CD F1 45            	CALL	FPINT		; F.P to integer
    3747/    4730 : CD 8A 45            	CALL	FPBCDE		; Move BCDE to FPREG
    3748/    4733 : 01 06 03            	LD	BC,0306H	; 1E+06 to 1E-03 range
    3749/    4736 : F1                  	POP	AF		; Restore count
    3750/    4737 : 81                  	ADD	A,C		; 6 digits before point
    3751/    4738 : 3C                  	INC	A		; Add one
    3752/    4739 : FA 45 47            	JP	M,MAKNUM	; Do it in 'E' form if < 1E-02
    3753/    473C : FE 08               	CP	6+1+1		; More than 999999 ?
    3754/    473E : D2 45 47            	JP	NC,MAKNUM	; Yes - Do it in 'E' form
    3755/    4741 : 3C                  	INC	A		; Adjust for exponent
    3756/    4742 : 47                  	LD	B,A		; Exponent of number
    3757/    4743 : 3E 02               	LD	A,2		; Make it zero after
    3758/    4745 :                     ;
    3759/    4745 : 3D                  MAKNUM: DEC	A		; Adjust for digits to do
    3760/    4746 : 3D                  	DEC	A
    3761/    4747 : E1                  	POP	HL		; Restore buffer address
    3762/    4748 : F5                  	PUSH	AF		; Save count
    3763/    4749 : 11 CB 47            	LD	DE,POWERS	; Powers of ten
    3764/    474C : 05                  	DEC	B		; Count digits before point
    3765/    474D : C2 56 47            	JP	NZ,DIGTXT	; Not zero - Do number
    3766/    4750 : 36 2E               	LD	(HL),'.'	; Save point
    3767/    4752 : 23                  	INC	HL		; Move on
    3768/    4753 : 36 30               	LD	(HL),'0'	; Save zero
    3769/    4755 : 23                  	INC	HL		; Move on
    3770/    4756 : 05                  DIGTXT: DEC	B		; Count digits before point
    3771/    4757 : 36 2E               	LD	(HL),'.'	; Save point in case
    3772/    4759 : CC 9F 45            	CALL	Z,INCHL		; Last digit - move on
    3773/    475C : C5                  	PUSH	BC		; Save digits before point
    3774/    475D : E5                  	PUSH	HL		; Save buffer address
    3775/    475E : D5                  	PUSH	DE		; Save powers of ten
    3776/    475F : CD 95 45            	CALL	BCDEFP		; Move FPREG to BCDE
    3777/    4762 : E1                  	POP	HL		; Powers of ten table
    3778/    4763 : 06 2F               	LD	B, '0'-1	; ASCII '0' - 1
    3779/    4765 : 04                  TRYAGN: INC	B		; Count subtractions
    3780/    4766 : 7B                  	LD	A,E		; Get LSB
    3781/    4767 : 96                  	SUB	(HL)		; Subtract LSB
    3782/    4768 : 5F                  	LD	E,A		; Save LSB
    3783/    4769 : 23                  	INC	HL
    3784/    476A : 7A                  	LD	A,D		; Get NMSB
    3785/    476B : 9E                  	SBC	A,(HL)		; Subtract NMSB
    3786/    476C : 57                  	LD	D,A		; Save NMSB
    3787/    476D : 23                  	INC	HL
    3788/    476E : 79                  	LD	A,C		; Get MSB
    3789/    476F : 9E                  	SBC	A,(HL)		; Subtract MSB
    3790/    4770 : 4F                  	LD	C,A		; Save MSB
    3791/    4771 : 2B                  	DEC	HL		; Point back to start
    3792/    4772 : 2B                  	DEC	HL
    3793/    4773 : D2 65 47            	JP	NC,TRYAGN	; No overflow - Try again
    3794/    4776 : CD A8 43            	CALL	PLUCDE		; Restore number
    3795/    4779 : 23                  	INC	HL		; Start of next number
    3796/    477A : CD 8A 45            	CALL	FPBCDE		; Move BCDE to FPREG
    3797/    477D : EB                  	EX	DE,HL		; Save point in table
    3798/    477E : E1                  	POP	HL		; Restore buffer address
    3799/    477F : 70                  	LD	(HL),B		; Save digit in buffer
    3800/    4780 : 23                  	INC	HL		; And move on
    3801/    4781 : C1                  	POP	BC		; Restore digit count
    3802/    4782 : 0D                  	DEC	C		; Count digits
    3803/    4783 : C2 56 47            	JP	NZ,DIGTXT	; More - Do them
    3804/    4786 : 05                  	DEC	B		; Any decimal part?
    3805/    4787 : CA 96 47            	JP	Z,DOEBIT	; No - Do 'E' bit
    3806/    478A : 2B                  SUPTLZ: DEC	HL		; Move back through buffer
    3807/    478B : 7E                  	LD	A,(HL)		; Get character
    3808/    478C : FE 30               	CP	'0'		; '0' character?
    3809/    478E : CA 8A 47            	JP	Z,SUPTLZ	; Yes - Look back for more
    3810/    4791 : FE 2E               	CP	'.'		; A decimal point?
    3811/    4793 : C4 9F 45            	CALL	NZ,INCHL	; Move back over digit
    3812/    4796 :                     ;
    3813/    4796 : F1                  DOEBIT: POP	AF		; Get 'E' flag
    3814/    4797 : CA B5 47            	JP	Z,NOENED	; No 'E' needed - End buffer
    3815/    479A : 36 45               	LD	(HL),'E'	; Put 'E' in buffer
    3816/    479C : 23                  	INC	HL		; And move on
    3817/    479D : 36 2B               	LD	(HL),'+'	; Put '+' in buffer
    3818/    479F : F2 A6 47            	JP	P,OUTEXP	; Positive - Output exponent
    3819/    47A2 : 36 2D               	LD	(HL),'-'	; Put '-' in buffer
    3820/    47A4 : 2F                  	CPL			; Negate exponent
    3821/    47A5 : 3C                  	INC	A
    3822/    47A6 : 06 2F               OUTEXP: LD	B,'0'-1		; ASCII '0' - 1
    3823/    47A8 : 04                  EXPTEN: INC	B		; Count subtractions
    3824/    47A9 : D6 0A               	SUB	10		; Tens digit
    3825/    47AB : D2 A8 47            	JP	NC,EXPTEN	; More to do
    3826/    47AE : C6 3A               	ADD	A,'0'+10	; Restore and make ASCII
    3827/    47B0 : 23                  	INC	HL		; Move on
    3828/    47B1 : 70                  	LD	(HL),B		; Save MSB of exponent
    3829/    47B2 : 23                  JSTZER: INC	HL		;
    3830/    47B3 : 77                  	LD	(HL),A		; Save LSB of exponent
    3831/    47B4 : 23                  	INC	HL
    3832/    47B5 : 71                  NOENED: LD	(HL),C		; Mark end of buffer
    3833/    47B6 : E1                  	POP	HL		; Restore code string address
    3834/    47B7 : C9                  	RET
    3835/    47B8 :                     ;
    3836/    47B8 : 01 74 94            RNGTST: LD	BC,9474H	; BCDE = 999999.
    3837/    47BB : 11 F7 23            	LD	DE,23F7H
    3838/    47BE : CD C4 45            	CALL	CMPNUM		; Compare numbers
    3839/    47C1 : B7                  	OR	A
    3840/    47C2 : E1                  	POP	HL		; Return address to HL
    3841/    47C3 : E2 20 47            	JP	PO,GTSIXD	; Too big - Divide by ten
    3842/    47C6 : E9                  	JP	(HL)		; Otherwise return to caller
    3843/    47C7 :                     ;
    3844/    47C7 : 00 00 00 80         HALF:	DB	00H,00H,00H,80H	; 0.5
    3845/    47CB :                     ;
    3846/    47CB : A0 86 01            POWERS: DB	0A0H,086H,001H	; 100000
    3847/    47CE : 10 27 00            	DB	010H,027H,000H	; 10000
    3848/    47D1 : E8 03 00            	DB	0E8H,003H,000H	; 1000
    3849/    47D4 : 64 00 00            	DB	064H,000H,000H	; 100
    3850/    47D7 : 0A 00 00            	DB	00AH,000H,000H	; 10
    3851/    47DA : 01 00 00            	DB	001H,000H,000H	; 1
    3852/    47DD :                     ;
    3853/    47DD : 21 72 45            NEGAFT: LD	HL,INVSGN	; Negate result
    3854/    47E0 : E3                  	EX	(SP),HL		; To be done after caller
    3855/    47E1 : E9                  	JP	(HL)		; Return to caller
    3856/    47E2 :                     ;
    3857/    47E2 : CD 7A 45            SQR:	CALL	STAKFP		; Put value on stack
    3858/    47E5 : 21 C7 47            	LD	HL,HALF		; Set power to 1/2
    3859/    47E8 : CD 87 45            	CALL	PHLTFP		; Move 1/2 to FPREG
    3860/    47EB :                     ;
    3861/    47EB : C1                  POWER:	POP	BC		; Get base
    3862/    47EC : D1                  	POP	DE
    3863/    47ED : CD 49 45            	CALL	TSTSGN		; Test sign of power
    3864/    47F0 : 78                  	LD	A,B		; Get exponent of base
    3865/    47F1 : CA 30 48            	JP	Z,EXP		; Make result 1 if zero
    3866/    47F4 : F2 FB 47            	JP	P,POWER1	; Positive base - Ok
    3867/    47F7 : B7                  	OR	A		; Zero to negative power?
    3868/    47F8 : CA A7 32            	JP	Z,DZERR		; Yes - ?/0 Error
    3869/    47FB : B7                  POWER1: OR	A		; Base zero?
    3870/    47FC : CA 6A 43            	JP	Z,SAVEXP	; Yes - Return zero
    3871/    47FF : D5                  	PUSH	DE		; Save base
    3872/    4800 : C5                  	PUSH	BC
    3873/    4801 : 79                  	LD	A,C		; Get MSB of base
    3874/    4802 : F6 7F               	OR	01111111B	; Get sign status
    3875/    4804 : CD 95 45            	CALL	BCDEFP		; Move power to BCDE
    3876/    4807 : F2 18 48            	JP	P,POWER2	; Positive base - Ok
    3877/    480A : D5                  	PUSH	DE		; Save power
    3878/    480B : C5                  	PUSH	BC
    3879/    480C : CD 1C 46            	CALL	INT		; Get integer of power
    3880/    480F : C1                  	POP	BC		; Restore power
    3881/    4810 : D1                  	POP	DE
    3882/    4811 : F5                  	PUSH	AF		; MSB of base
    3883/    4812 : CD C4 45            	CALL	CMPNUM		; Power an integer?
    3884/    4815 : E1                  	POP	HL		; Restore MSB of base
    3885/    4816 : 7C                  	LD	A,H		; but don't affect flags
    3886/    4817 : 1F                  	RRA			; Exponent odd or even?
    3887/    4818 : E1                  POWER2: POP	HL		; Restore MSB and exponent
    3888/    4819 : 22 2B 81            	LD	(FPREG+2),HL	; Save base in FPREG
    3889/    481C : E1                  	POP	HL		; LSBs of base
    3890/    481D : 22 29 81            	LD	(FPREG),HL	; Save in FPREG
    3891/    4820 : DC DD 47            	CALL	C,NEGAFT	; Odd power - Negate result
    3892/    4823 : CC 72 45            	CALL	Z,INVSGN	; Negative base - Negate it
    3893/    4826 : D5                  	PUSH	DE		; Save power
    3894/    4827 : C5                  	PUSH	BC
    3895/    4828 : CD FD 43            	CALL	LOG		; Get LOG of base
    3896/    482B : C1                  	POP	BC		; Restore power
    3897/    482C : D1                  	POP	DE
    3898/    482D : CD 3E 44            	CALL	FPMULT		; Multiply LOG by power
    3899/    4830 :                     ;
    3900/    4830 : CD 7A 45            EXP:	CALL	STAKFP		; Put value on stack
    3901/    4833 : 01 38 81            	LD	BC,08138H	; BCDE = 1/Ln(2)
    3902/    4836 : 11 3B AA            	LD	DE,0AA3BH
    3903/    4839 : CD 3E 44            	CALL	FPMULT		; Multiply value by 1/LN(2)
    3904/    483C : 3A 2C 81            	LD	A,(FPEXP)	; Get exponent
    3905/    483F : FE 88               	CP	80H+8		; Is it in range?
    3906/    4841 : D2 25 45            	JP	NC,OVTST1	; No - Test for overflow
    3907/    4844 : CD 1C 46            	CALL	INT		; Get INT of FPREG
    3908/    4847 : C6 80               	ADD	A,80H		; For excess 128
    3909/    4849 : C6 02               	ADD	A,2		; Exponent > 126?
    3910/    484B : DA 25 45            	JP	C,OVTST1	; Yes - Test for overflow
    3911/    484E : F5                  	PUSH	AF		; Save scaling factor
    3912/    484F : 21 EC 43            	LD	HL,UNITY	; Point to 1.
    3913/    4852 : CD F4 42            	CALL	ADDPHL		; Add 1 to FPREG
    3914/    4855 : CD 35 44            	CALL	MULLN2		; Multiply by LN(2)
    3915/    4858 : F1                  	POP	AF		; Restore scaling factor
    3916/    4859 : C1                  	POP	BC		; Restore exponent
    3917/    485A : D1                  	POP	DE
    3918/    485B : F5                  	PUSH	AF		; Save scaling factor
    3919/    485C : CD 00 43            	CALL	SUBCDE		; Subtract exponent from FPREG
    3920/    485F : CD 72 45            	CALL	INVSGN		; Negate result
    3921/    4862 : 21 70 48            	LD	HL,EXPTAB	; Coefficient table
    3922/    4865 : CD A0 48            	CALL	SMSER1		; Sum the series
    3923/    4868 : 11 00 00            	LD	DE,0		; Zero LSBs
    3924/    486B : C1                  	POP	BC		; Scaling factor
    3925/    486C : 4A                  	LD	C,D		; Zero MSB
    3926/    486D : C3 3E 44            	JP	FPMULT		; Scale result to correct value
    3927/    4870 :                     ;
    3928/    4870 : 08                  EXPTAB: DB	8			; Table used by EXP
    3929/    4871 : 40 2E 94 74         	DB	040H,02EH,094H,074H	; -1/7! (-1/5040)
    3930/    4875 : 70 4F 2E 77         	DB	070H,04FH,02EH,077H	;  1/6! ( 1/720)
    3931/    4879 : 6E 02 88 7A         	DB	06EH,002H,088H,07AH	; -1/5! (-1/120)
    3932/    487D : E6 A0 2A 7C         	DB	0E6H,0A0H,02AH,07CH	;  1/4! ( 1/24)
    3933/    4881 : 50 AA AA 7E         	DB	050H,0AAH,0AAH,07EH	; -1/3! (-1/6)
    3934/    4885 : FF FF 7F 7F         	DB	0FFH,0FFH,07FH,07FH	;  1/2! ( 1/2)
    3935/    4889 : 00 00 80 81         	DB	000H,000H,080H,081H	; -1/1! (-1/1)
    3936/    488D : 00 00 00 81         	DB	000H,000H,000H,081H	;  1/0! ( 1/1)
    3937/    4891 :                     ;
    3938/    4891 : CD 7A 45            SUMSER: CALL	STAKFP		; Put FPREG on stack
    3939/    4894 : 11 3C 44            	LD	DE,MULT		; Multiply by "X"
    3940/    4897 : D5                  	PUSH	DE		; To be done after
    3941/    4898 : E5                  	PUSH	HL		; Save address of table
    3942/    4899 : CD 95 45            	CALL	BCDEFP		; Move FPREG to BCDE
    3943/    489C : CD 3E 44            	CALL	FPMULT		; Square the value
    3944/    489F : E1                  	POP	HL		; Restore address of table
    3945/    48A0 : CD 7A 45            SMSER1: CALL	STAKFP		; Put value on stack
    3946/    48A3 : 7E                  	LD	A,(HL)		; Get number of coefficients
    3947/    48A4 : 23                  	INC	HL		; Point to start of table
    3948/    48A5 : CD 87 45            	CALL	PHLTFP		; Move coefficient to FPREG
    3949/    48A8 : 06                  	DB	06H		; Skip "POP AF"
    3950/    48A9 : F1                  SUMLP:	POP	AF		; Restore count
    3951/    48AA : C1                  	POP	BC		; Restore number
    3952/    48AB : D1                  	POP	DE
    3953/    48AC : 3D                  	DEC	A		; Cont coefficients
    3954/    48AD : C8                  	RET	Z		; All done
    3955/    48AE : D5                  	PUSH	DE		; Save number
    3956/    48AF : C5                  	PUSH	BC
    3957/    48B0 : F5                  	PUSH	AF		; Save count
    3958/    48B1 : E5                  	PUSH	HL		; Save address in table
    3959/    48B2 : CD 3E 44            	CALL	FPMULT		; Multiply FPREG by BCDE
    3960/    48B5 : E1                  	POP	HL		; Restore address in table
    3961/    48B6 : CD 98 45            	CALL	LOADFP		; Number at HL to BCDE
    3962/    48B9 : E5                  	PUSH	HL		; Save address in table
    3963/    48BA : CD 03 43            	CALL	FPADD		; Add coefficient to FPREG
    3964/    48BD : E1                  	POP	HL		; Restore address in table
    3965/    48BE : C3 A9 48            	JP	SUMLP		; More coefficients
    3966/    48C1 :                     ;
    3967/    48C1 : CD 49 45            RND:	CALL	TSTSGN		; Test sign of FPREG
    3968/    48C4 : 21 5E 80            	LD	HL,SEED+2	; Random number seed
    3969/    48C7 : FA 22 49            	JP	M,RESEED	; Negative - Re-seed
    3970/    48CA : 21 7F 80            	LD	HL,LSTRND	; Last random number
    3971/    48CD : CD 87 45            	CALL	PHLTFP		; Move last RND to FPREG
    3972/    48D0 : 21 5E 80            	LD	HL,SEED+2	; Random number seed
    3973/    48D3 : C8                  	RET	Z		; Return if RND(0)
    3974/    48D4 : 86                  	ADD	A,(HL)		; Add (SEED)+2)
    3975/    48D5 : E6 07               	AND	00000111B	; 0 to 7
    3976/    48D7 : 06 00               	LD	B,0
    3977/    48D9 : 77                  	LD	(HL),A		; Re-save seed
    3978/    48DA : 23                  	INC	HL		; Move to coefficient table
    3979/    48DB : 87                  	ADD	A,A		; 4 bytes
    3980/    48DC : 87                  	ADD	A,A		; per entry
    3981/    48DD : 4F                  	LD	C,A		; BC = Offset into table
    3982/    48DE : 09                  	ADD	HL,BC		; Point to coefficient
    3983/    48DF : CD 98 45            	CALL	LOADFP		; Coefficient to BCDE
    3984/    48E2 : CD 3E 44            	CALL	FPMULT	;	; Multiply FPREG by coefficient
    3985/    48E5 : 3A 5D 80            	LD	A,(SEED+1)	; Get (SEED+1)
    3986/    48E8 : 3C                  	INC	A		; Add 1
    3987/    48E9 : E6 03               	AND	00000011B	; 0 to 3
    3988/    48EB : 06 00               	LD	B,0
    3989/    48ED : FE 01               	CP	1		; Is it zero?
    3990/    48EF : 88                  	ADC	A,B		; Yes - Make it 1
    3991/    48F0 : 32 5D 80            	LD	(SEED+1),A	; Re-save seed
    3992/    48F3 : 21 26 49            	LD	HL,RNDTAB-4	; Addition table
    3993/    48F6 : 87                  	ADD	A,A		; 4 bytes
    3994/    48F7 : 87                  	ADD	A,A		; per entry
    3995/    48F8 : 4F                  	LD	C,A		; BC = Offset into table
    3996/    48F9 : 09                  	ADD	HL,BC		; Point to value
    3997/    48FA : CD F4 42            	CALL	ADDPHL		; Add value to FPREG
    3998/    48FD : CD 95 45            RND1:	CALL	BCDEFP		; Move FPREG to BCDE
    3999/    4900 : 7B                  	LD	A,E		; Get LSB
    4000/    4901 : 59                  	LD	E,C		; LSB = MSB
    4001/    4902 : EE 4F               	XOR	01001111B	; Fiddle around
    4002/    4904 : 4F                  	LD	C,A		; New MSB
    4003/    4905 : 36 80               	LD	(HL),80H	; Set exponent
    4004/    4907 : 2B                  	DEC	HL		; Point to MSB
    4005/    4908 : 46                  	LD	B,(HL)		; Get MSB
    4006/    4909 : 36 80               	LD	(HL),80H	; Make value -0.5
    4007/    490B : 21 5C 80            	LD	HL,SEED		; Random number seed
    4008/    490E : 34                  	INC	(HL)		; Count seed
    4009/    490F : 7E                  	LD	A,(HL)		; Get seed
    4010/    4910 : D6 AB               	SUB	171		; Do it modulo 171
    4011/    4912 : C2 19 49            	JP	NZ,RND2		; Non-zero - Ok
    4012/    4915 : 77                  	LD	(HL),A		; Zero seed
    4013/    4916 : 0C                  	INC	C		; Fillde about
    4014/    4917 : 15                  	DEC	D		; with the
    4015/    4918 : 1C                  	INC	E		; number
    4016/    4919 : CD 54 43            RND2:	CALL	BNORM		; Normalise number
    4017/    491C : 21 7F 80            	LD	HL,LSTRND	; Save random number
    4018/    491F : C3 A1 45            	JP	FPTHL		; Move FPREG to last and return
    4019/    4922 :                     ;
    4020/    4922 : 77                  RESEED: LD	(HL),A		; Re-seed random numbers
    4021/    4923 : 2B                  	DEC	HL
    4022/    4924 : 77                  	LD	(HL),A
    4023/    4925 : 2B                  	DEC	HL
    4024/    4926 : 77                  	LD	(HL),A
    4025/    4927 : C3 FD 48            	JP	RND1		; Return RND seed
    4026/    492A :                     ;
    4027/    492A : 68 B1 46 68         RNDTAB: DB	068H,0B1H,046H,068H	; Table used by RND
    4028/    492E : 99 E9 92 69         	DB	099H,0E9H,092H,069H
    4029/    4932 : 10 D1 75 68         	DB	010H,0D1H,075H,068H
    4030/    4936 :                     ;
    4031/    4936 : 21 80 49            COS:	LD	HL,HALFPI	; Point to PI/2
    4032/    4939 : CD F4 42            	CALL	ADDPHL		; Add it to PPREG
    4033/    493C : CD 7A 45            SIN:	CALL	STAKFP		; Put angle on stack
    4034/    493F : 01 49 83            	LD	BC,8349H	; BCDE = 2 PI
    4035/    4942 : 11 DB 0F            	LD	DE,0FDBH
    4036/    4945 : CD 8A 45            	CALL	FPBCDE		; Move 2 PI to FPREG
    4037/    4948 : C1                  	POP	BC		; Restore angle
    4038/    4949 : D1                  	POP	DE
    4039/    494A : CD 9F 44            	CALL	DVBCDE		; Divide angle by 2 PI
    4040/    494D : CD 7A 45            	CALL	STAKFP		; Put it on stack
    4041/    4950 : CD 1C 46            	CALL	INT		; Get INT of result
    4042/    4953 : C1                  	POP	BC		; Restore number
    4043/    4954 : D1                  	POP	DE
    4044/    4955 : CD 00 43            	CALL	SUBCDE		; Make it 0 <= value < 1
    4045/    4958 : 21 84 49            	LD	HL,QUARTR	; Point to 0.25
    4046/    495B : CD FA 42            	CALL	SUBPHL		; Subtract value from 0.25
    4047/    495E : CD 49 45            	CALL	TSTSGN		; Test sign of value
    4048/    4961 : 37                  	SCF			; Flag positive
    4049/    4962 : F2 6C 49            	JP	P,SIN1		; Positive - Ok
    4050/    4965 : CD F1 42            	CALL	ROUND		; Add 0.5 to value
    4051/    4968 : CD 49 45            	CALL	TSTSGN		; Test sign of value
    4052/    496B : B7                  	OR	A		; Flag negative
    4053/    496C : F5                  SIN1:	PUSH	AF		; Save sign
    4054/    496D : F4 72 45            	CALL	P,INVSGN	; Negate value if positive
    4055/    4970 : 21 84 49            	LD	HL,QUARTR	; Point to 0.25
    4056/    4973 : CD F4 42            	CALL	ADDPHL		; Add 0.25 to value
    4057/    4976 : F1                  	POP	AF		; Restore sign
    4058/    4977 : D4 72 45            	CALL	NC,INVSGN	; Negative - Make positive
    4059/    497A : 21 88 49            	LD	HL,SINTAB	; Coefficient table
    4060/    497D : C3 91 48            	JP	SUMSER		; Evaluate sum of series
    4061/    4980 :                     ;
    4062/    4980 : DB 0F 49 81         HALFPI: DB	0DBH,00FH,049H,081H	; 1.5708 (PI/2)
    4063/    4984 :                     ;
    4064/    4984 : 00 00 00 7F         QUARTR: DB	000H,000H,000H,07FH	; 0.25
    4065/    4988 :                     ;
    4066/    4988 : 05                  SINTAB: DB	5			; Table used by SIN
    4067/    4989 : BA D7 1E 86         	DB	0BAH,0D7H,01EH,086H	; 39.711
    4068/    498D : 64 26 99 87         	DB	064H,026H,099H,087H	;-76.575
    4069/    4991 : 58 34 23 87         	DB	058H,034H,023H,087H	; 81.602
    4070/    4995 : E0 5D A5 86         	DB	0E0H,05DH,0A5H,086H	;-41.342
    4071/    4999 : DA 0F 49 83         	DB	0DAH,00FH,049H,083H	; 6.2832
    4072/    499D :                     ;
    4073/    499D : CD 7A 45            TAN:	CALL	STAKFP		; Put angle on stack
    4074/    49A0 : CD 3C 49            	CALL	SIN		; Get SIN of angle
    4075/    49A3 : C1                  	POP	BC		; Restore angle
    4076/    49A4 : E1                  	POP	HL
    4077/    49A5 : CD 7A 45            	CALL	STAKFP		; Save SIN of angle
    4078/    49A8 : EB                  	EX	DE,HL		; BCDE = Angle
    4079/    49A9 : CD 8A 45            	CALL	FPBCDE		; Angle to FPREG
    4080/    49AC : CD 36 49            	CALL	COS		; Get COS of angle
    4081/    49AF : C3 9D 44            	JP	DIV		; TAN = SIN / COS
    4082/    49B2 :                     ;
    4083/    49B2 : CD 49 45            ATN:	CALL	TSTSGN		; Test sign of value
    4084/    49B5 : FC DD 47            	CALL	M,NEGAFT	; Negate result after if -ve
    4085/    49B8 : FC 72 45            	CALL	M,INVSGN	; Negate value if -ve
    4086/    49BB : 3A 2C 81            	LD	A,(FPEXP)	; Get exponent
    4087/    49BE : FE 81               	CP	81H		; Number less than 1?
    4088/    49C0 : DA CF 49            	JP	C,ATN1		; Yes - Get arc tangnt
    4089/    49C3 : 01 00 81            	LD	BC,8100H	; BCDE = 1
    4090/    49C6 : 51                  	LD	D,C
    4091/    49C7 : 59                  	LD	E,C
    4092/    49C8 : CD 9F 44            	CALL	DVBCDE		; Get reciprocal of number
    4093/    49CB : 21 FA 42            	LD	HL,SUBPHL	; Sub angle from PI/2
    4094/    49CE : E5                  	PUSH	HL		; Save for angle > 1
    4095/    49CF : 21 D9 49            ATN1:	LD	HL,ATNTAB	; Coefficient table
    4096/    49D2 : CD 91 48            	CALL	SUMSER		; Evaluate sum of series
    4097/    49D5 : 21 80 49            	LD	HL,HALFPI	; PI/2 - angle in case > 1
    4098/    49D8 : C9                  	RET			; Number > 1 - Sub from PI/2
    4099/    49D9 :                     ;
    4100/    49D9 : 09                  ATNTAB: DB	9			; Table used by ATN
    4101/    49DA : 4A D7 3B 78         	DB	04AH,0D7H,03BH,078H	; 1/17
    4102/    49DE : 02 6E 84 7B         	DB	002H,06EH,084H,07BH	;-1/15
    4103/    49E2 : FE C1 2F 7C         	DB	0FEH,0C1H,02FH,07CH	; 1/13
    4104/    49E6 : 74 31 9A 7D         	DB	074H,031H,09AH,07DH	;-1/11
    4105/    49EA : 84 3D 5A 7D         	DB	084H,03DH,05AH,07DH	; 1/9
    4106/    49EE : C8 7F 91 7E         	DB	0C8H,07FH,091H,07EH	;-1/7
    4107/    49F2 : E4 BB 4C 7E         	DB	0E4H,0BBH,04CH,07EH	; 1/5
    4108/    49F6 : 6C AA AA 7F         	DB	06CH,0AAH,0AAH,07FH	;-1/3
    4109/    49FA : 00 00 00 81         	DB	000H,000H,000H,081H	; 1/1
    4110/    49FE :                     ;
    4111/    49FE :                     
    4112/    49FE : C9                  ARET:	RET			; A RETurn instruction
    4113/    49FF :                     ;
    4114/    49FF : D7                  GETINP: RST	10H		;input a character
    4115/    4A00 : C9                  	RET
    4116/    4A01 :                     ;
    4117/    4A01 :                     CLS: 
    4118/    4A01 : 3E 0C               	LD	A,CS		; ASCII Clear screen
    4119/    4A03 :                     ;	JP	MONOUT		; Output character
    4120/    4A03 : CF                  	rst	08h
    4121/    4A04 : C9                  	ret
    4122/    4A05 :                     ;
    4123/    4A05 : CD C8 42            WIDTH:	CALL	GETINT		; Get integer 0-255
    4124/    4A08 : 7B                  	LD	A,E		; Width to A
    4125/    4A09 : 32 87 80            	LD	(LWIDTH),A	; Set width
    4126/    4A0C : C9                  	RET
    4127/    4A0D :                     ;
    4128/    4A0D : CD 67 3B            LINES:	CALL	GETNUM		; Get a number
    4129/    4A10 : CD AC 37            	CALL	DEINT		; Get integer -32768 to 32767
    4130/    4A13 : ED 53 8B 80         	LD	(LINESC),DE	; Set lines counter
    4131/    4A17 : ED 53 8D 80         	LD	(LINESN),DE	; Set lines number
    4132/    4A1B : C9                  	RET
    4133/    4A1C :                     ;
    4134/    4A1C : CD AC 37            DEEK:	CALL	DEINT		; Get integer -32768 to 32767
    4135/    4A1F : D5                  	PUSH	DE		; Save number
    4136/    4A20 : E1                  	POP	HL		; Number to HL
    4137/    4A21 : 46                  	LD	B,(HL)		; Get LSB of contents
    4138/    4A22 : 23                  	INC	HL
    4139/    4A23 : 7E                  	LD	A,(HL)		; Get MSB of contents
    4140/    4A24 : C3 22 3F            	JP	ABPASS		; Return integer AB
    4141/    4A27 :                     ;
    4142/    4A27 : CD 67 3B            DOKE:	CALL	GETNUM		; Get a number
    4143/    4A2A : CD AC 37            	CALL	DEINT		; Get integer -32768 to 32767
    4144/    4A2D : D5                  	PUSH	DE		; Save address
    4145/    4A2E : CD 72 35            	CALL	CHKSYN		; Make sure ',' follows
    4146/    4A31 : 2C                  	DB	','
    4147/    4A32 : CD 67 3B            	CALL	GETNUM		; Get a number
    4148/    4A35 : CD AC 37            	CALL	DEINT		; Get integer -32768 to 32767
    4149/    4A38 : E3                  	EX	(SP),HL		; Save value,get address
    4150/    4A39 : 73                  	LD	(HL),E		; Save LSB of value
    4151/    4A3A : 23                  	INC	HL
    4152/    4A3B : 72                  	LD	(HL),D		; Save MSB of value
    4153/    4A3C : E1                  	POP	HL		; Restore code string address
    4154/    4A3D : C9                  	RET
    4155/    4A3E :                     ;
    4156/    4A3E :                     
    4157/    4A3E :                     ; HEX$(nn) Convert 16 bit number to Hexadecimal string
    4158/    4A3E :                     ;
    4159/    4A3E : CD 6A 3B            HEX: 	CALL	TSTNUM		; Verify it's a number
    4160/    4A41 : CD AC 37            	CALL	DEINT		; Get integer -32768 to 32767
    4161/    4A44 : C5                  	PUSH	BC		; Save contents of BC
    4162/    4A45 : 21 2E 81            	LD	HL,PBUFF
    4163/    4A48 : 7A                  	LD	A,D		; Get high order into A
    4164/    4A49 : FE 00               	CP	0
    4165/    4A4B : 28 0C               	JR	Z,HEX2		; Skip output if both high digits are zero
    4166/    4A4D : CD 76 4A            	CALL	BYT2ASC		; Convert D to ASCII
    4167/    4A50 : 78                  	LD	A,B
    4168/    4A51 : FE 30               	CP	'0'
    4169/    4A53 : 28 02               	JR	Z,HEX1		; Don't store high digit if zero
    4170/    4A55 : 70                  	LD	(HL),B		; Store it to PBUFF
    4171/    4A56 : 23                  	INC	HL		; Next location
    4172/    4A57 : 71                  HEX1:	LD	(HL),C		; Store C to PBUFF+1
    4173/    4A58 : 23                  	INC	HL		; Next location
    4174/    4A59 : 7B                  HEX2:	LD	A,E		; Get lower byte
    4175/    4A5A : CD 76 4A            	CALL	BYT2ASC		; Convert E to ASCII
    4176/    4A5D : 7A                  	LD	A,D
    4177/    4A5E : FE 00               	CP	0
    4178/    4A60 : 20 05               	JR	NZ,HEX3		; If upper byte was not zero then always print lower byte
    4179/    4A62 : 78                  	LD	A,B
    4180/    4A63 : FE 30               	CP	'0'		; If high digit of lower byte is zero then don't print
    4181/    4A65 : 28 02               	JR	Z,HEX4
    4182/    4A67 : 70                  HEX3:	LD	(HL),B		; to PBUFF+2
    4183/    4A68 : 23                  	INC	HL		; Next location
    4184/    4A69 : 71                  HEX4:	LD	(HL),C		; to PBUFF+3
    4185/    4A6A : 23                  	INC	HL		; PBUFF+4 to zero
    4186/    4A6B : AF                  	XOR	A		; Terminating character
    4187/    4A6C : 77                  	LD	(HL),A		; Store zero to terminate
    4188/    4A6D : 23                  	INC	HL		; Make sure PBUFF is terminated
    4189/    4A6E : 77                  	LD	(HL),A		; Store the double zero there
    4190/    4A6F : C1                  	POP	BC		; Get BC back
    4191/    4A70 : 21 2E 81            	LD	HL,PBUFF	; Reset to start of PBUFF
    4192/    4A73 : C3 D0 3F            	JP	STR1		; Convert the PBUFF to a string and return it
    4193/    4A76 :                     ;
    4194/    4A76 : 47                  BYT2ASC: LD	B,A		; Save original value
    4195/    4A77 : E6 0F               	AND	0FH		; Strip off upper nybble
    4196/    4A79 : FE 0A               	CP	0AH		; 0-9?
    4197/    4A7B : 38 02               	JR	C,ADD30		; If A-F, add 7 more
    4198/    4A7D : C6 07               	ADD	A,07H		; Bring value up to ASCII A-F
    4199/    4A7F : C6 30               ADD30:	ADD	A,30H		; And make ASCII
    4200/    4A81 : 4F                  	LD	C,A		; Save converted char to C
    4201/    4A82 : 78                  	LD	A,B		; Retrieve original value
    4202/    4A83 : 0F                  	RRCA			; and Rotate it right
    4203/    4A84 : 0F                  	RRCA
    4204/    4A85 : 0F                  	RRCA
    4205/    4A86 : 0F                  	RRCA
    4206/    4A87 : E6 0F               	AND	0FH		; Mask off upper nybble
    4207/    4A89 : FE 0A               	CP	0AH		; 0-9? < A hex?
    4208/    4A8B : 38 02               	JR	C,ADD301	; Skip Add 7
    4209/    4A8D : C6 07               	ADD	A,07H		; Bring it up to ASCII A-F
    4210/    4A8F : C6 30               ADD301:	ADD	A,30H		; And make it full ASCII
    4211/    4A91 : 47                  	LD	B,A		; Store high order byte
    4212/    4A92 : C9                  	RET	
    4213/    4A93 :                     ;
    4214/    4A93 :                     ; Convert "&Hnnnn" to FPREG
    4215/    4A93 :                     ; Gets a character from (HL) checks for Hexadecimal ASCII numbers "&Hnnnn"
    4216/    4A93 :                     ; Char is in A, NC if char is;<=>?@ A-z, CY is set if 0-9
    4217/    4A93 : EB                  HEXTFP:	EX	DE,HL		; Move code string pointer to DE
    4218/    4A94 : 21 00 00            	LD	HL,0000H	; Zero out the value
    4219/    4A97 : CD AC 4A            	CALL	GETHEX		; Check the number for valid hex
    4220/    4A9A : DA CC 4A            	JP	C,HXERR		; First value wasn't hex, HX error
    4221/    4A9D : 18 05               	JR	HEXLP1		; Convert first character
    4222/    4A9F : CD AC 4A            HEXLP:	CALL	GETHEX		; Get second and addtional characters
    4223/    4AA2 : 38 1F               	JR	C,HEXIT		; Exit if not a hex character
    4224/    4AA4 : 29                  HEXLP1:	ADD	HL,HL		; Rotate 4 bits to the left
    4225/    4AA5 : 29                  	ADD	HL,HL
    4226/    4AA6 : 29                  	ADD	HL,HL
    4227/    4AA7 : 29                  	ADD	HL,HL
    4228/    4AA8 : B5                  	OR	L		; Add in D0-D3 into L
    4229/    4AA9 : 6F                  	LD	L,A		; Save new value
    4230/    4AAA : 18 F3               	JR	HEXLP		; And continue until all hex characters are in
    4231/    4AAC :                     ;
    4232/    4AAC : 13                  GETHEX:	INC	DE		; Next location
    4233/    4AAD : 1A                  	LD	A,(DE)		; Load character at pointer
    4234/    4AAE : FE 20               	CP	' '
    4235/    4AB0 : CA AC 4A            	JP	Z,GETHEX	; Skip spaces
    4236/    4AB3 : D6 30               	SUB	30H		; Get absolute value
    4237/    4AB5 : D8                  	RET	C		; < "0", error
    4238/    4AB6 : FE 0A               	CP	0AH
    4239/    4AB8 : 38 05               	JR	C,NOSUB7	; Is already in the range 0-9
    4240/    4ABA : D6 07               	SUB	07H		; Reduce to A-F
    4241/    4ABC : FE 0A               	CP	0AH		; Value should be $0A-$0F at this point
    4242/    4ABE : D8                  	RET	C		; CY set if was :		; < = > ? @
    4243/    4ABF : FE 10               NOSUB7:	CP	10H		; > Greater than "F"?
    4244/    4AC1 : 3F                  	CCF
    4245/    4AC2 : C9                  	RET			; CY set if it wasn't valid hex
    4246/    4AC3 :                     	
    4247/    4AC3 : EB                  HEXIT:	EX	DE,HL		; Value into DE, Code string into HL
    4248/    4AC4 : 7A                  	LD	A,D		; Load DE into AC
    4249/    4AC5 : 4B                  	LD	C,E		; For prep to 
    4250/    4AC6 : E5                  	PUSH	HL
    4251/    4AC7 : CD 21 3F            	CALL	ACPASS		; ACPASS to set AC as integer into FPREG
    4252/    4ACA : E1                  	POP	HL
    4253/    4ACB : C9                  	RET
    4254/    4ACC :                     ;
    4255/    4ACC : 1E 26               HXERR:	LD	E,HX		; ?HEX Error
    4256/    4ACE : C3 B8 32            	JP	ERROR_
    4257/    4AD1 :                     ;
    4258/    4AD1 :                     ; BIN$(NN) Convert integer to a 1-16 char binary string
    4259/    4AD1 : CD 6A 3B            BIN:	CALL	TSTNUM		; Verify it's a number
    4260/    4AD4 : CD AC 37            	CALL	DEINT		; Get integer -32768 to 32767
    4261/    4AD7 : C5                  BIN2:	PUSH	BC		; Save contents of BC
    4262/    4AD8 : 21 2E 81            	LD	HL,PBUFF
    4263/    4ADB : 06 11               	LD	B,17		; One higher than max char count
    4264/    4ADD :                     ZEROSUP:			; Suppress leading zeros
    4265/    4ADD : 05                  	DEC	B		; Max 16 chars
    4266/    4ADE : 78                  	LD	A,B
    4267/    4ADF : FE 01               	CP	01H
    4268/    4AE1 : 28 08               	JR	Z,BITOUT	; Always output at least one character
    4269/    4AE3 : CB 13               	RL	E
    4270/    4AE5 : CB 12               	RL	D
    4271/    4AE7 : 30 F4               	JR	NC,ZEROSUP
    4272/    4AE9 : 18 04               	JR	BITOUT2
    4273/    4AEB :                     BITOUT:	
    4274/    4AEB : CB 13               	RL	E
    4275/    4AED : CB 12               	RL	D		; Top bit now in carry
    4276/    4AEF :                     BITOUT2:
    4277/    4AEF : 3E 30               	LD	A,'0'		; Char for '0'
    4278/    4AF1 : CE 00               	ADC	A,0		; If carry set then '0' --> '1'
    4279/    4AF3 : 77                  	LD	(HL),A
    4280/    4AF4 : 23                  	INC	HL
    4281/    4AF5 : 05                  	DEC	B
    4282/    4AF6 : 20 F3               	JR	NZ,BITOUT
    4283/    4AF8 : AF                  	XOR	A		; Terminating character
    4284/    4AF9 : 77                  	LD	(HL),A		; Store zero to terminate
    4285/    4AFA : 23                  	INC	HL		; Make sure PBUFF is terminated
    4286/    4AFB : 77                  	LD	(HL),A		; Store the double zero there
    4287/    4AFC : C1                  	POP	BC
    4288/    4AFD : 21 2E 81            	LD	HL,PBUFF
    4289/    4B00 : C3 D0 3F            	JP	STR1
    4290/    4B03 :                     ;
    4291/    4B03 :                     ; Convert "&Bnnnn" to FPREG
    4292/    4B03 :                     ; Gets a character from (HL) checks for Binary ASCII numbers "&Bnnnn"
    4293/    4B03 : EB                  BINTFP: EX	DE,HL		; Move code string pointer to DE
    4294/    4B04 : 21 00 00            	LD	HL,0000H	; Zero out the value
    4295/    4B07 : CD 20 4B            	CALL	CHKBIN		; Check the number for valid bin
    4296/    4B0A : DA 2E 4B            	JP	C,BINERR	; First value wasn't bin, HX error
    4297/    4B0D : D6 30               BINIT:	SUB	'0'
    4298/    4B0F : 29                  	ADD	HL,HL		; Rotate HL left
    4299/    4B10 : B5                  	OR	L
    4300/    4B11 : 6F                  	LD	L,A
    4301/    4B12 : CD 20 4B            	CALL	CHKBIN		; Get second and addtional characters
    4302/    4B15 : 30 F6               	JR	NC,BINIT	; Process if a bin character
    4303/    4B17 : EB                  	EX	DE,HL		; Value into DE, Code string into HL
    4304/    4B18 : 7A                  	LD	A,D		; Load DE into AC
    4305/    4B19 : 4B                  	LD	C,E		; For prep to 
    4306/    4B1A : E5                  	PUSH	HL
    4307/    4B1B : CD 21 3F            	CALL	ACPASS		; ACPASS to set AC as integer into FPREG
    4308/    4B1E : E1                  	POP	HL
    4309/    4B1F : C9                  	RET
    4310/    4B20 :                     ;
    4311/    4B20 :                     ; Char is in A, NC if char is 0 or 1
    4312/    4B20 : 13                  CHKBIN: INC	DE
    4313/    4B21 : 1A                  	LD	A,(DE)
    4314/    4B22 : FE 20               	CP	' '
    4315/    4B24 : CA 20 4B            	JP	Z,CHKBIN	; Skip spaces
    4316/    4B27 : FE 30               	CP	'0'		; Set C if < '0'
    4317/    4B29 : D8                  	RET	C
    4318/    4B2A : FE 32               	CP	'2'
    4319/    4B2C : 3F                  	CCF			; Set C if > '1'
    4320/    4B2D : C9                  	RET
    4321/    4B2E :                     ;
    4322/    4B2E : 1E 28               BINERR: LD	E,BN		; ?BIN Error
    4323/    4B30 : C3 B8 32            	JP	ERROR_
    4324/    4B33 :                     ;
    4325/    4B33 :                     ;JJUMP1: JP	CSTART		; Go and initialise
    4326/    4B33 :                     ;
    4327/    4B33 :                     ;MONOUT: JP	TXA		; output a char
    4328/    4B33 :                     ;
    4329/    4B33 : 0E 01               MONITR:	ld	c, 1
    4330/    4B35 : F7                  	RST	30H		; monitor WSTART
    4331/    4B36 : C9                  	ret
    4332/    4B37 :                     ;
    4333/    4B37 : 3E 00               INITST: LD	A,0		; Clear break flag
    4334/    4B39 : 32 92 80            	LD	(BRKFLG),A
    4335/    4B3C : C3 14 2F            	JP	INIT
    4336/    4B3F :                     ;
    4337/    4B3F : F5                  TSTBIT: PUSH	AF		; Save bit mask
    4338/    4B40 : A0                  	AND	B		; Get common bits
    4339/    4B41 : C1                  	POP	BC		; Restore bit mask
    4340/    4B42 : B8                  	CP	B		; Same bit set?
    4341/    4B43 : 3E 00               	LD	A,0		; Return 0 in A
    4342/    4B45 : C9                  	RET
    4343/    4B46 :                     ;
    4344/    4B46 : CD 7D 35            OUTNCR: CALL	OUTC		; Output character in A
    4345/    4B49 : C3 A2 39            	JP	PRCRLF		; Output CRLF
    4346/    4B4C :                     
    4347/    4B4C : FF FF FF FF FF FF   	db	($ & 0FF00H)+100H-$ dup(0FFH)
             4B52 : FF FF FF FF FF FF 
             4B58 : FF FF FF FF FF FF 
             4B5E : FF FF FF FF FF FF 
             4B64 : FF FF FF FF FF FF 
             4B6A : FF FF FF FF FF FF 
             4B70 : FF FF FF FF FF FF 
             4B76 : FF FF FF FF FF FF 
             4B7C : FF FF FF FF FF FF 
             4B82 : FF FF FF FF FF FF 
             4B88 : FF FF FF FF FF FF 
             4B8E : FF FF FF FF FF FF 
             4B94 : FF FF FF FF FF FF 
             4B9A : FF FF FF FF FF FF 
             4BA0 : FF FF FF FF FF FF 
             4BA6 : FF FF FF FF FF FF 
             4BAC : FF FF FF FF FF FF 
             4BB2 : FF FF FF FF FF FF 
             4BB8 : FF FF FF FF FF FF 
             4BBE : FF FF FF FF FF FF 
             4BC4 : FF FF FF FF FF FF 
             4BCA : FF FF FF FF FF FF 
             4BD0 : FF FF FF FF FF FF 
             4BD6 : FF FF FF FF FF FF 
             4BDC : FF FF FF FF FF FF 
             4BE2 : FF FF FF FF FF FF 
             4BE8 : FF FF FF FF FF FF 
             4BEE : FF FF FF FF FF FF 
             4BF4 : FF FF FF FF FF FF 
             4BFA : FF FF FF FF FF FF 
    4348/    4C00 :                     
    4349/    4C00 :                     	END
 AS V1.42 Beta [Bld 227] - Source File add_EMUBASIC.ASM - Page 2 - 11/29/2022 11:11:34


  Symbol Table (* = unused):
  --------------------------

 ABPASS :                      3F22 C |  ABS :                         456E C |
*ACCSUM :                      378B C |  ACPASS :                      3F21 C |
 ADD30 :                       4A7F C |  ADD301 :                      4A8F C |
 ADDEXP :                      4507 C |  ADDIG :                       46AD C |
 ADDPHL :                      42F4 C |  ALLFOL :                      41F0 C |
 ANTVLU :                      3A8B C |
*ARCHITECTURE :                                        "i386-unknown-win32" - |
*ARET :                        49FE C |  ARLDSV :                      3E42 C |
 ARREND :                      811F - |  ARRLP :                       40BB C |
 ASC :                         41C1 C |  ASCTFP :                      4650 C |
 ASPCS :                       39ED C |  ATN :                         49B2 C |
 ATN1 :                        49CF C |  ATNTAB :                      49D9 C |
 ATOH :                        37C6 C |  BADINP :                      3A12 C |
 BAKSTK :                      324D C |  BAKTMP :                      41A1 C |
 BASTXT :                      80A3 - |  BCDEFP :                      4595 C |
 BFREE :                       2F7D C |  BIN :                         4AD1 C |
*BIN2 :                        4AD7 C |  BINERR :                      4B2E C |
 BINIT :                       4B0D C |  BINTFP :                      4B03 C |
 BITOUT :                      4AEB C |  BITOUT2 :                     4AEF C |
 BKSP :                           8 - |  BN :                            28 - |
 BNORM :                       4354 C |  BNRMLP :                      4357 C |
 BRK :                         373D C |  BRKFLG :                      8092 - |
 BRKLIN :                      8113 - |  BRKMSG :                      3247 C |
 BRKRET :                      2F6E C |  BS :                            10 - |
 BSERR :                       3E75 C |  BUFFER :                      80A6 - |
 BYT2ASC :                     4A76 C |  BYTSFT :                      448C C |
*CASESENSITIVE :                  0 - |  CFEVAL :                      3DD8 C |
 CHARTY :                      3D86 C |  CHEKFN :                      3FB9 C |
 CHKBIN :                      4B20 C |  CHKLTR :                      3798 C |
 CHKSTK :                      3281 C |  CHKSUM :                      808F - |
 CHKSYN :                      3572 C |  CHKTYP :                      3B6C C |
 CHR :                         41D2 C |  CLEAR :                       37EB C |
 CLOTST :                      35A5 C |  CLREG :                       33D6 C |
 CLRPTR :                      33B1 C |  CLS :                         4A01 C |
 CMPFP :                       45DE C |  CMPLG1 :                      3CEC C |
 CMPLOG :                      3CEA C |  CMPNUM :                      45C4 C |
 CMPRES :                      3D2E C |  CMPSTR :                      3D16 C |
 CN :                            20 - |  CNVNUM :                      465C C |
 COMMAN :                      8088 - |  COMPL :                       43B4 C |
*COMPMODE :                       0 - |  CONCAT :                      4136 C |
 CONEXP :                      468C C |  CONPOS :                      4351 C |
*CONSTPI :        3.141592653589793 - |  CONT :                        3770 C |
 CONTAD :                      8119 - |  CONVAR :                      3C57 C |
 COPY :                        2F1C C |  COS :                         4936 C |
 COUNT :                       3615 C |  CPDEHL :                      356C C |
 CPYLIT :                      34A8 C |  CR :                            0D - |
 CRARLP :                      3E95 C |  CREARY :                      3E7A C |
 CRESTR :                      38EA C |  CRNCLP :                      3409 C |
 CRTMST :                      3FF2 C |  CRTST :                       3FFE C |
 CRTSTE :                      4014 C |  CRUNCH :                      3400 C |
 CS :                            0C - |  CSTART :                      2F0D C |
 CTLOFG :                      808A - |  CTRLC :                          3 - |
 CTRLG :                          7 - |  CTRLO :                         0F - |
 CTRLQ :                         11 - |  CTRLR :                         12 - |
 CTRLS :                         13 - |  CTRLU :                         15 - |
 CUROPR :                      810A - |  CURPOS :                      80F0 - |
 DATA :                        3891 C | *DATE :                "11/29/2022" - |
 DATFLG :                      80F3 - |  DATLIN :                      810E - |
 DATSNR :                      329E C |  DCBCDE :                      4615 C |
 DDERR :                       32AD C |  DEEK :                        4A1C C |
 DEF :                         3F36 C |  DEFSIZ :                      3E9D C |
 DEINT :                       37AC C |  DEL :                           7F - |
 DELCHR :                      34D8 C |  DEPINT :                      37A6 C |
 DETHL4 :                      45A4 C |  DETHLB :                      45A6 C |
 DIGTXT :                      4756 C |  DIM :                         3D58 C |
 DIMRET :                      3D4F C |  DINPOS :                      35A1 C |
 DIV :                         449D C |  DIV1 :                        804F - |
 DIV10 :                       4491 C |  DIV2 :                        8053 - |
 DIV3 :                        8057 - |  DIV4 :                        805A - |
 DIVLP :                       44C4 C |  DIVSUP :                      804E - |
 DOAGN :                       33EF C |  DOCOM :                       39BE C |
 DODEL :                       34B8 C |  DOEBIT :                      4796 C |
 DOFN :                        3F63 C |  DOKE :                        4A27 C |
 DONULL :                      39AC C |  DOSPC :                       39E8 C |
 DOTAB :                       39D5 C |  DPOINT :                      4688 C |
 DTSTR :                       4002 C |  DVBCDE :                      449F C |
 DZ :                            14 - |  DZERR :                       32A7 C |
 ECHDEL :                      34CC C |  EDIGIT :                      46CF C |
 ENDBUF :                      34AF C |  ENDCON :                      469B C |
 ENDDIM :                      3EFC C |  ENDINP :                      399D C |
 ENDNAM :                      3D7A C |  ENDPRG :                      374C C |
 ENFMEM :                      328A C |  ERRIN :                       32D8 C |
 ERRLIN :                      8117 - |  ERRMSG :                      3235 C |
 ERRORS :                      31AB C |  ERROR_ :                      32B8 C |
 ESC :                           1B - |  EVAL :                        3B79 C |
 EVAL1 :                       3B7C C |  EVAL2 :                       3B85 C |
 EVAL3 :                       3B88 C |  EVLPAR :                      3C3E C |
 EVNOT :                       3D38 C |  EXCUTE :                      36DA C |
 EXP :                         4830 C |  EXPLP :                       467A C |
 EXPTAB :                      4870 C |  EXPTEN :                      47A8 C |
 EXTIG :                       3AE7 C | *FALSE :                          0 - |
 FANDT :                       3B11 C |  FC :                             8 - |
 FCERR :                       37C1 C |  FDTLP :                       3AF8 C |
 FINDEL :                      3ED8 C |  FLGDIF :                      4554 C |
 FLGREL :                      455B C |  FNARG :                       8125 - |
 FNCTAB :                      2FF5 C |  FNDARY :                      3E48 C |
 FNDELP :                      3EDD C |  FNDEND :                      3384 C |
 FNDNUM :                      42C5 C |  FNDTOK :                      35F4 C |
 FNDVAR :                      3DBF C |  FNDWRD :                      3433 C |
 FNOFST :                      3C68 C |  FNRGNM :                      8123 - |
 FNTHR :                       3DCD C |  FNVAL :                       3C8F C |
 FOPRND :                      3BB1 C |  FOR :                         3641 C |
 FORFLG :                      8110 - |  FORFND :                      3671 C |
 FORSLP :                      3655 C |  FPADD :                       4303 C |
 FPBCDE :                      458A C |  FPEXP :                       812C - |
 FPINT :                       45F1 C |  FPMULT :                      443E C |
 FPREG :                       8129 - |  FPROND :                      439B C |
 FPSINT :                      37A0 C |  FPTHL :                       45A1 C |
 FRE :                         3F00 C |  FRENUM :                      3F1C C |
 FRMEVL :                      3C5A C | *FULLPMMU :                       1 - |
 GARBGE :                      4083 C |  GARBLP :                      4086 C |
 GETCHR :                      36FA C |  GETCMD :                      32FC C |
 GETHEX :                      4AAC C |  GETINP :                      49FF C |
 GETINT :                      42C8 C |  GETLEN :                      41B6 C |
 GETLIN :                      34E9 C |  GETLN :                       37C7 C |
 GETNUM :                      3B67 C |  GETNXT :                      344E C |
 GETSTR :                      4180 C |  GETVAR :                      3D5D C |
 GNXARY :                      40BA C |  GOFUNC :                      3C97 C |
 GOSUB :                       383D C |  GOTO :                        384E C |
 GRBARY :                      40DA C |  GRBDON :                      405B C |
 GRBLP :                       4094 C |  GSTRCU :                      4183 C |
 GSTRDE :                      4187 C |  GSTRHL :                      4186 C |
*GTFLNM :                      41C5 C |  GTFNAM :                      3D62 C |
 GTLNLP :                      37CA C |  GTSIXD :                      4720 C |
 GTVLUS :                      3A63 C |  HALF :                        47C7 C |
 HALFPI :                      4980 C | *HAS64 :                          0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 HEX :                         4A3E C |  HEX1 :                        4A57 C |
 HEX2 :                        4A59 C |  HEX3 :                        4A67 C |
 HEX4 :                        4A69 C |  HEXIT :                       4AC3 C |
 HEXLP :                       4A9F C |  HEXLP1 :                      4AA4 C |
 HEXTFP :                      4A93 C |  HX :                            26 - |
 HXERR :                       4ACC C |  ID :                            16 - |
 IDTEST :                      3FAB C |  IFGO :                        392E C |
 IFJMP :                       36E1 C |  IF_ :                         3920 C |
 INCHL :                       459F C |  INCLEN :                      359D C |
 INDFND :                      3267 C |  INEWLN :                      334C C |
 INIT :                        2F14 C |  INITAB :                      31D5 C |
 INITBE :                      3235 C |  INITST :                      4B37 C |
 INMSG :                       323C C |  INP :                         4285 C |
 INPBIN :                      3AB5 C |  INPBRK :                      3749 C |
 INPORT :                      8084 - |  INPSUB :                      8083 - |
 INPUT :                       3A23 C |  INRNG :                       4729 C |
*INSUPMODE :                      0 - |  INT :                         461C C |
 INTVAR :                      33C0 C |  INVSGN :                      4572 C |
 ITMSEP :                      3AA6 C |  JSTZER :                      47B2 C |
 KILFOR :                      3B57 C |  KILIN :                       34E3 C |
 LCRFLG :                      80F1 - |  LEFT :                        41E2 C |
 LEN :                         41B2 C |  LET :                         38A8 C |
 LETNUM :                      38FB C |  LETSTR :                      38C3 C |
 LF :                            0A - |  LFRGNM :                      427B C |
 LINEAT :                      80A1 - |  LINEIN :                      46DB C |
 LINES :                       4A0D C |  LINESC :                      808B - |
 LINESN :                      808D - |  LINFND :                      3335 C |
 LIST :                        35B6 C |  LISTLP :                      35C2 C |
*LISTON :                         1 - |  LOADFP :                      4598 C |
 LOG :                         43FD C |  LOGTAB :                      43F0 C |
 LOKFOR :                      3251 C |  LOOPST :                      810C - |
 LS :                            1C - |  LSTBIN :                      8111 - |
 LSTLP2 :                      35E2 C |  LSTLP3 :                      35E5 C |
 LSTRAM :                      80F4 - |  LSTRND :                      807F - |
 LTSTND :                      3AC0 C |  LWIDTH :                      8087 - |
*MACEXP :                         7 - |  MAKINT :                      42CB C |
 MAKNUM :                      4745 C |  MANLP :                       4664 C |
 MATCH :                       3480 C |  MEMMSG :                      2FC3 C |
 MID :                         421C C |  MID1 :                        41E8 C |
 MIDNUM :                      4280 C |  MINCDE :                      4343 C |
 MINUS :                       3C46 C |  MKTMST :                      3FEF C |
 MLDBLP :                      463D C |  MLDEBC :                      4635 C |
 MLSP10 :                      4532 C |  MO :                            24 - |
*MOMCPU :                        80 - | *MOMCPUNAME :                 "Z80" - |
 MONITR :                      4B33 C |  MORDT :                       3ACC C |
 MORINP :                      34F2 C |  MOVBUF :                      336B C |
 MOVDIR :                      3488 C |  MOVLP :                       3276 C |
 MOVSTR :                      3273 C |  MOVUP :                       3270 C |
 MRPRNT :                      3940 C |  MSTACK_SIZE :                   40 - |
 MUL8LP :                      4469 C |  MULLN2 :                      4435 C |
 MULT :                        443C C |  MULT8 :                       4460 C |
 MULTEN :                      46A6 C |  MULVAL :                      813B - |
 MVSTPT :                      38F2 C |  NEDMOR :                      3A5F C |
 NEGAFT :                      47DD C |  NEMEM :                       2F74 C |
*NESTMAX :                      100 - |  NEW :                         33B0 C |
 NEXITM :                      39F8 C |  NEXT :                        3B1C C |
 NEXT1 :                       3B1F C |  NF :                             0 - |
 NFERR :                       32AA C | *NMIFLG :                      8091 - |
 NOCHNG :                      3478 C |  NOENED :                      47B5 C |
 NOLIN :                       375F C |  NOMADD :                      447A C |
 NOMLAD :                      464B C |  NOPMPT :                      3A3D C |
 NORMAL :                      436E C |  NOSPC :                       346F C |
 NOSUB7 :                      4ABF C |  NOSWAP :                      431D C |
 NOTAMP :                      3C1B C |  NOTSTR :                      3D95 C |
 NOXOR :                       42AB C |  NSCFOR :                      3DA5 C |
 NULFLG :                      8089 - |  NULL :                        3783 C |
 NULLP :                       39B3 C |  NULLS :                       8086 - |
 NUMASC :                      46EE C |  NXTARY :                      3E5C C |
 NXTBYT :                      345E C |  NXTCHR :                      349F C |
 NXTDAT :                      8121 - |  NXTDTA :                      3890 C |
 NXTITM :                      3A57 C |  NXTOPR :                      8115 - |
 NXTSTL :                      3897 C |  NXTSTT :                      389A C |
 OD :                             6 - |  OKMSG :                       3241 C |
 OM :                            0C - |  OMERR :                       3299 C |
 ON :                          3902 C |  ONGO :                        3911 C |
 ONGOLP :                      3912 C |  ONJMP :                       36E2 C |
 OPNPAR :                      3B75 C |  OPRND :                       3BF0 C |
 OS :                            1A - |  OTKLN :                       34E0 C |
 OTPORT :                      804C - |  OUTC :                        357D C |
 OUTEXP :                      47A6 C |  OUTIT :                       355E C |
 OUTNBS :                      3564 C |  OUTNCR :                      4B46 C |
 OUTSUB :                      804B - |  OUTWRD :                      35FE C |
 OV :                            0A - |  OVERR :                       32B3 C |
 OVTST1 :                      4525 C |  OVTST2 :                      452A C |
 OVTST3 :                      452B C |  PADD :                        46CA C |
*PADDING :                        1 - |  PAND :                        3CB1 C |
 PASSA :                       3F31 C |  PBUFF :                       812E - |
 PEEK :                        42D9 C |  PEND :                        3744 C |
 PHLTFP :                      4587 C |  PLUCDE :                      43A8 C |
 PNORM :                       4376 C |  POINT :                       8096 - |
 POKE :                        42E0 C |  POPAF :                       4075 C |
 POPHL :                       419F C |  POPHRT :                      448A C |
 POPNOK :                      32EE C |  POR :                         3CB0 C |
 POR1 :                        3CD3 C |  POS :                         3F2E C |
 POSINT :                      37A3 C |  POUT :                        4291 C |
 POWER :                       47EB C |  POWER1 :                      47FB C |
 POWER2 :                      4818 C |  POWERS :                      47CB C |
 PRCRLF :                      39A2 C |  PRINT :                       3944 C |
 PRITAB :                      3196 C |  PRNTHL :                      46E3 C |
 PRNTLP :                      3947 C |  PRNTNB :                      398A C |
 PRNTOK :                      32EF C |  PRNTST :                      398E C |
 PRNUMS :                      403F C |  PROCES :                      350B C |
 PROGND :                      811B - |  PROGST :                      813E - |
 PROMPT :                      33F3 C |  PRS :                         4040 C |
 PRS1 :                        4043 C |  PRSLP :                       404A C |
 PSET :                        8099 - |  PSUB :                        42FE C |
 PTRLP :                       3378 C |  PUTBUF :                      354A C |
 PUTCTL :                      354F C |  PUTFID :                      36B6 C |
 QTSTLP :                      4005 C |  QTSTR :                       3FFF C |
 QUARTR :                      4984 C |  RAMSIZ :                      4000 - |
 RAMTOP :                      8000 - |  RAM_E :                      0BFFF - |
 RD :                            12 - |  READ :                        3A52 C |
 READFG :                      8112 - |  REDO :                        39FF C |
*RELAXED :                        0 - |  REM :                         3893 C |
 RESDIV :                      44D7 C |  RESEED :                      4922 C |
 RESET :                       809C - |  RESTNL :                      371F C |
 RESTOR :                      370A C |  RESZER :                      4369 C |
 RETADR :                      3E0C C |  RETINT :                      4560 C |
 RETLIN :                      388B C |  RETNAD :                      3484 C |
 RETNUL :                      3E0F C |  RETNUM :                      3C52 C |
 RETREL :                      4552 C |  RETURN :                      386C C |
 RG :                             4 - |  RIGHT :                       4212 C |
 RIGHT1 :                      41E6 C |  RINPUT :                      8093 - |
 RLTLP :                       3B95 C |  RND :                         48C1 C |
 RND1 :                        48FD C |  RND2 :                        4919 C |
 RNDTAB :                      492A C |  RNGTST :                      47B8 C |
 ROMTOP :                      2F00 - |  RONDB :                       438A C |
 RONDUP :                      4389 C |  ROUND :                       42F1 C |
 RSCALE :                      46C4 C |  RSLNBK :                      3638 C |
 RSTSTR :                      4235 C |  RUN :                         3831 C |
 RUNCNT :                      36BA C |  RUNFST :                      33BC C |
 RUNLIN :                      384D C |  SAVEXP :                      436A C |
 SAVSTP :                      36AD C |  SAVSTR :                      3FDA C |
 SBSCPT :                      3E1A C |  SCALE :                       43C8 C |
 SCALLP :                      43CA C |  SCALMI :                      468F C |
 SCALPL :                      46A5 C |  SCNEND :                      4111 C |
 SCPTLP :                      3E20 C |  SEARCH :                      344C C |
 SEED :                        805C - |  SETIO :                       42B5 C |
 SETLIN :                      360C C |  SETLIT :                      3496 C |
 SETPTR :                      3373 C |  SFTPRG :                      333D C |
 SGN :                         4558 C |  SGNEXP :                      3CA0 C |
 SGNRES :                      812D - |  SHRITE :                      43D7 C |
 SHRLP :                       43DA C |  SHRT1 :                       43DE C |
 SIGNON :                      2F8C C |  SIGNS :                       45AF C |
 SIN :                         493C C |  SIN1 :                        496C C |
 SINTAB :                      4988 C |  SIXDIG :                      470B C |
 SMPVAR :                      40A5 C |  SMSER1 :                      48A0 C |
 SN :                             2 - |  SNERR :                       32A4 C |
 SPCFST :                      46FC C |  SPCLP :                       39F1 C |
 SQR :                         47E2 C |  SRCHLN :                      3390 C |
 SRCHLP :                      3393 C |  SSTSA :                       416D C |
 ST :                            1E - |  STACK :                       80AB - |
 STACKU :                     0BEC0 - |  STAKFP :                      457A C |
 STALL :                       3733 C |  STARTB :                      2F06 C |
 STKTHS :                      3BD9 C |  STLOOK :                      81A2 - |
 STOP :                        3742 C |  STORED :                      380E C |
 STPOOL :                      40E8 C |  STR :                         3FCA C |
 STR1 :                        3FD0 C |  STRADD :                      40EB C |
 STRBOT :                      8108 - |  STRENT :                      3AA9 C |
 STRSPC :                      809F - |  STTLIN :                      3995 C |
 SUBCDE :                      4300 C |  SUBPHL :                      42FA C |
 SUMLP :                       48A9 C |  SUMSER :                      4891 C |
 SUPTLZ :                      478A C |  SVNAM2 :                      3D79 C |
 SVSTAD :                      3FF8 C |  TAN :                         499D C |
 TESTOS :                      4077 C |  TESTR :                       4059 C |
*TIME :                  "11:11:34" - |  TM :                            18 - |
 TMERR :                       32B6 C |  TMPSTR :                      8104 - |
 TMSTPL :                      80F8 - |  TMSTPT :                      80F6 - |
 TOPOOL :                      41DE C |  TOSTRA :                      4176 C |
*TRUE :                           1 - |  TRYAGN :                      4765 C |
 TSALP :                       4177 C | *TSTBIT :                      4B3F C |
 TSTBRK :                      3725 C |  TSTNUM :                      3B6A C |
 TSTOPL :                      4020 C |  TSTRED :                      3CD8 C |
 TSTREM :                      3499 C |  TSTSGN :                      4549 C |
 TSTSTR :                      3B6B C |  TTYLIN :                      34E9 C |
 TYPE :                        80F2 - |  UF :                            22 - |
 UFERR :                       32B0 C |  UL :                            0E - |
 ULERR :                       3867 C |  UNITY :                       43EC C |
 UPDATA :                      3720 C |  USR :                         8048 - |
 VAL :                         424C C |  VAL1 :                        426A C |
 VAL2 :                        4274 C |  VAL3 :                        4277 C |
 VAREND :                      811D - | *VERSION :                     142F - |
 WAIT :                        4297 C |  WAITLP :                      42AC C |
 WARMST :                      2F6B C |  WIDTH :                       4A05 C |
 WORDS :                       302D C |  WORDTB :                      314C C |
 WORK_B :                     0BF00 - |  WORK_SIZE :                    100 - |
 WRKSPC :                      8045 - |  XXXXX :                       2F7A C |
 ZDATA :                         83 - | *ZDIV :                         0AF - |
 ZEND :                          80 - |  ZEQUAL :                       0B4 - |
 ZERARY :                      3EBB C |  ZERBYT :                      3240 - |
 ZEROLP :                      3DFE C |  ZEROSUP :                     4ADD C |
 ZFN :                          0A7 - |  ZFOR :                          81 - |
 ZGOSUB :                        8C - |  ZGOTO :                         88 - |
 ZGTR :                         0B3 - |  ZLEFT :                        0CF - |
 ZLTH :                         0B5 - |  ZMINUS :                       0AD - |
 ZNEW :                         0A4 - |  ZNOT :                         0AA - |
 ZONELP :                      39CC C |  ZOR :                          0B2 - |
 ZPLUS :                        0AC - | *ZPOINT :                       0C7 - |
 ZPRINT :                        9E - |  ZREM :                          8E - |
 ZSGN :                         0B6 - |  ZSPC :                         0A8 - |
 ZSTEP :                        0AB - |  ZTAB :                         0A5 - |
 ZTHEN :                        0A9 - | *ZTIMES :                       0AE - |
 ZTO :                          0A6 - |

    657 symbols
     30 unused symbols

 AS V1.42 Beta [Bld 227] - Source File add_EMUBASIC.ASM - Page 3 - 11/29/2022 11:11:34


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.04 seconds assembly time

   4350 lines source file
      2 passes
      0 errors
      0 warnings
